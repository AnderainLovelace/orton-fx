SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\Orton\game.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c     1    #include <stdlib.h> //for strlen, rand and abs
          game.c     2    #include <fxlib.h> //for Bdisp_AllClr_VRAM, Bdisp_PutDisp_DD, PrintMini and GetKey
          game.c     3    #include "draw.h"
          game.c     4    #include "game.h"
          game.c     5    #include "key.h"
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
    00000004 D346                   MOV.L       L935+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L935+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L935+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS
    0000003C 201B                   OR          R1,R0
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L549:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L549
    0000004A 000B                   RTS
    0000004C 0009                   NOP
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
    00000052 E50F                   MOV         #15,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L550
    00000072 A005                   BRA         L551
    00000074 C907                   AND         #7,R0
    00000076              L550:                             
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L551:                             
    00000080 994B                   MOV.W       L935,R9    ; H'AAAA
    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L935+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L935+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L935+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L552
    0000009E 7C36                   ADD         #54,R12
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
    000000AE D221                   MOV.L       L935+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L911
    000000B8 CB0F                   OR          #15,R0
    000000BA              L552:                             
    000000BA 2B91                   MOV.W       R9,@R11
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
    000000C8 D31A                   MOV.L       L935+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L911:                             
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
    000000D8 D317                   MOV.L       L935+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
    000000EC 2B91                   MOV.W       R9,@R11
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
    000000F8 9211                   MOV.W       L935+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
    00000106 60F0                   MOV.B       @R15,R0
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12
    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L935:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102
    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
    00000144 D351                   MOV.L       L936+18,R3 ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D24F                   MOV.L       L936+22,R2 ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L555
    00000158 D34E                   MOV.L       L936+26,R3 ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
    00000162 E610                   MOV         #16,R6
    00000164 D34C                   MOV.L       L936+30,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1
    00000174 D249                   MOV.L       L936+34,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0
    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L557
    000001A4 CA01                   XOR         #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001A6              L555:                             
    000001A6 61D3                   MOV         R13,R1
    000001A8 D33C                   MOV.L       L936+34,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D338                   MOV.L       L936+26,R3 ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
    000001C2              L557:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15
    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
    000001D4 D332                   MOV.L       L936+38,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L560:                             
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L561
    000001EC 6EEC                   EXTU.B      R14,R14
    000001EE A004                   BRA         L559
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L561:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L560
    000001FA              L559:                             
    000001FA 60F0                   MOV.B       @R15,R0
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
          game.c     6    #include "level.h"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c     7    #include <setjmp.h>
          game.c     8    
          game.c     9    
          game.c    10    int game(Level* level)
    00000208              _game:                           ; function: game
                                                           ; frame size=1284
                                                           ; used runtime library name:
                                                           ; __divls, __modls, __quick_evn_mvn, __quick_odd_mvn
    00000208 2F96                   MOV.L       R9,@-R15
          game.c    11    {
          game.c    12            int i, j, nb_death=0;
    0000020A E200                   MOV         #0,R2
    0000020C 9035                   MOV.W       L936,R0    ; H'FB0C
    0000020E 2F86                   MOV.L       R8,@-R15
    00000210 4F22                   STS.L       PR,@-R15
    00000212 4F12                   STS.L       MACL,@-R15
    00000214 9332                   MOV.W       L936+2,R3  ; H'04F0
    00000216 3F0C                   ADD         R0,R15
    00000218 9031                   MOV.W       L936+4,R0  ; H'04E4
    0000021A 33FC                   ADD         R15,R3
    0000021C 2342                   MOV.L       R4,@R3
          game.c    13            char run=1, dead=0, begin=1;
    0000021E E301                   MOV         #1,R3
    00000220 0F26                   MOV.L       R2,@(R0,R15)
    00000222 902D                   MOV.W       L936+6,R0  ; H'04E3
    00000224 0F34                   MOV.B       R3,@(R0,R15)
    00000226 902C                   MOV.W       L936+8,R0  ; H'04E2
    00000228 0F24                   MOV.B       R2,@(R0,R15)
    0000022A 902B                   MOV.W       L936+10,R0 ; H'04E1
    0000022C 0F34                   MOV.B       R3,@(R0,R15)
          game.c    14            Character orton, orton_start;
          game.c    15            Camera camera;
          game.c    16            Bullet bullet[MAX_BULLETS];
          game.c    17            Stone stone[MAX_STONES];
          game.c    18            int nb_bullets=0, nb_stones=0, stone_dx_sleep=0, thrower_sleep=0, thrower_freq_pos=0, moving_line_
                         +sleep=0, moving_wall_sleep=TIME_MOVING_WALL_SLEEP;
    0000022E 6323                   MOV         R2,R3
          game.c    19            
          game.c    20            if(!level) return 0;
    00000230 9024                   MOV.W       L936+2,R0  ; H'04F0
    00000232 1F27                   MOV.L       R2,@(28,R15)
    00000234 1F36                   MOV.L       R3,@(24,R15)
    00000236 1F25                   MOV.L       R2,@(20,R15)
    00000238 1F34                   MOV.L       R3,@(16,R15)
    0000023A 1F23                   MOV.L       R2,@(12,R15)
    0000023C 1F32                   MOV.L       R3,@(8,R15)
    0000023E E232                   MOV         #50,R2
    00000240 1F21                   MOV.L       R2,@(4,R15)
    00000242 03FE                   MOV.L       @(R0,R15),R3
    00000244 2338                   TST         R3,R3
    00000246 8B02                   BF          L937
    00000248 D316                   MOV.L       L936+42,R3 ; L926
    0000024A 432B                   JMP         @R3
    0000024C 0009                   NOP
    0000024E              L937:                             
          game.c    21            if(level->type == DIALOG)
    0000024E 9015                   MOV.W       L936+2,R0  ; H'04F0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000250 00FE                   MOV.L       @(R0,R15),R0
    00000252 5001                   MOV.L       @(4,R0),R0
    00000254 8801                   CMP/EQ      #1,R0
    00000256 8B06                   BF          L566
          game.c    22            {
          game.c    23                    dialog(level);
    00000258 9010                   MOV.W       L936+2,R0  ; H'04F0
    0000025A D313                   MOV.L       L936+46,R3 ; _dialog
    0000025C 430B                   JSR         @R3
    0000025E 04FE                   MOV.L       @(R0,R15),R4
          game.c    24                    return 0;
    00000260 D110                   MOV.L       L936+42,R1 ; L926
    00000262 412B                   JMP         @R1
    00000264 0009                   NOP
    00000266              L566:                             
          game.c    25            }
          game.c    26    /** Initialization **/
          game.c    27            camera.x = 8;
    00000266 E208                   MOV         #8,R2
    00000268 900D                   MOV.W       L936+12,R0 ; H'04A0
          game.c    28            camera.y = 8;
    0000026A 6323                   MOV         R2,R3
    0000026C 0F26                   MOV.L       R2,@(R0,R15)
          game.c    29            for(i=1 ; i<level->height-1 ; i++)
    0000026E E201                   MOV         #1,R2
    00000270 900A                   MOV.W       L936+14,R0 ; H'04A4
    00000272 0F36                   MOV.L       R3,@(R0,R15)
    00000274 9009                   MOV.W       L936+16,R0 ; H'04EC
    00000276 A05C                   BRA         L567
    00000278 0F26                   MOV.L       R2,@(R0,R15)
    0000027A              L936:                             
    0000027A FB0C                   .DATA.W     H'FB0C
    0000027C 04F0                   .DATA.W     H'04F0
    0000027E 04E4                   .DATA.W     H'04E4
    00000280 04E3                   .DATA.W     H'04E3
    00000282 04E2                   .DATA.W     H'04E2
    00000284 04E1                   .DATA.W     H'04E1
    00000286 04A0                   .DATA.W     H'04A0
    00000288 04A4                   .DATA.W     H'04A4
    0000028A 04EC                   .DATA.W     H'04EC
    0000028C A44B0000               .DATA.L     H'A44B0000
    00000290 02020000               .DATA.L     H'02020000
    00000294 <00000000>             .DATA.L     __modls
    00000298 <00000000>             .DATA.L     _memcpy
    0000029C <00000000>             .DATA.L     __divls
    000002A0 <00000000>             .DATA.L     _GetKey
    000002A4 <00000000>             .DATA.L     L926
    000002A8 <00000000>             .DATA.L     _dialog
    000002AC              L568:                             
          game.c    30            {
          game.c    31                    for(j=1 ; j<level->width-1 ; j++)
    000002AC 9090                   MOV.W       L938,R0    ; H'04E8
    000002AE E101                   MOV         #1,R1
    000002B0 A032                   BRA         L569
    000002B2 0F16                   MOV.L       R1,@(R0,R15)
    000002B4              L570:                             
          game.c    32                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c    33                            if(level->map[i*level->width+j] == START)
    000002B4 908D                   MOV.W       L938+2,R0  ; H'04F0
    000002B6 00FE                   MOV.L       @(R0,R15),R0
    000002B8 918B                   MOV.W       L938+2,R1  ; H'04F0
    000002BA 31FC                   ADD         R15,R1
    000002BC 6312                   MOV.L       @R1,R3
    000002BE 5333                   MOV.L       @(12,R3),R3
    000002C0 9288                   MOV.W       L938+4,R2  ; H'04EC
    000002C2 32FC                   ADD         R15,R2
    000002C4 6222                   MOV.L       @R2,R2
    000002C6 0237                   MUL.L       R3,R2
    000002C8 9182                   MOV.W       L938,R1    ; H'04E8
    000002CA 031A                   STS         MACL,R3
    000002CC 5002                   MOV.L       @(8,R0),R0
    000002CE 31FC                   ADD         R15,R1
    000002D0 6112                   MOV.L       @R1,R1
    000002D2 331C                   ADD         R1,R3
    000002D4 003C                   MOV.B       @(R0,R3),R0
    000002D6 880B                   CMP/EQ      #11,R0
    000002D8 8B19                   BF          L571
          game.c    34                            {
          game.c    35                                    orton.x = 8*j;
    000002DA 4108                   SHLL2       R1
    000002DC 907B                   MOV.W       L938+6,R0  ; H'04C4
          game.c    36                                    orton.y = 8*i;
    000002DE 4208                   SHLL2       R2
    000002E0 4100                   SHLL        R1
    000002E2 4200                   SHLL        R2
    000002E4 0F16                   MOV.L       R1,@(R0,R15)
    000002E6 9077                   MOV.W       L938+8,R0  ; H'04C8
          game.c    37                                    level->map[i*level->width+j] = EMPTY;
    000002E8 9173                   MOV.W       L938+2,R1  ; H'04F0
    000002EA 0F26                   MOV.L       R2,@(R0,R15)
    000002EC 9071                   MOV.W       L938+2,R0  ; H'04F0
    000002EE 31FC                   ADD         R15,R1
    000002F0 9270                   MOV.W       L938+4,R2  ; H'04EC
    000002F2 00FE                   MOV.L       @(R0,R15),R0
    000002F4 6312                   MOV.L       @R1,R3
    000002F6 32FC                   ADD         R15,R2
    000002F8 5002                   MOV.L       @(8,R0),R0
    000002FA 5333                   MOV.L       @(12,R3),R3
    000002FC 6222                   MOV.L       @R2,R2
    000002FE 0237                   MUL.L       R3,R2
    00000300 9166                   MOV.W       L938,R1    ; H'04E8
    00000302 E200                   MOV         #0,R2
    00000304 031A                   STS         MACL,R3
    00000306 31FC                   ADD         R15,R1
    00000308 6112                   MOV.L       @R1,R1
    0000030A 331C                   ADD         R1,R3
    0000030C 0324                   MOV.B       R2,@(R0,R3)
    0000030E              L571:                             
    0000030E 905F                   MOV.W       L938,R0    ; H'04E8
    00000310 03FE                   MOV.L       @(R0,R15),R3
    00000312 7301                   ADD         #1,R3
    00000314 905C                   MOV.W       L938,R0    ; H'04E8
    00000316 0F36                   MOV.L       R3,@(R0,R15)
    00000318              L569:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000318 905B                   MOV.W       L938+2,R0  ; H'04F0
    0000031A 02FE                   MOV.L       @(R0,R15),R2
    0000031C 9058                   MOV.W       L938,R0    ; H'04E8
    0000031E 5323                   MOV.L       @(12,R2),R3
    00000320 02FE                   MOV.L       @(R0,R15),R2
    00000322 73FF                   ADD         #-1,R3
    00000324 3233                   CMP/GE      R3,R2
    00000326 8BC5                   BF          L570
    00000328 9054                   MOV.W       L938+4,R0  ; H'04EC
    0000032A 01FE                   MOV.L       @(R0,R15),R1
    0000032C 9052                   MOV.W       L938+4,R0  ; H'04EC
    0000032E 7101                   ADD         #1,R1
    00000330 0F16                   MOV.L       R1,@(R0,R15)
    00000332              L567:                             
    00000332 904E                   MOV.W       L938+2,R0  ; H'04F0
    00000334 03FE                   MOV.L       @(R0,R15),R3
    00000336 5234                   MOV.L       @(16,R3),R2
    00000338 904C                   MOV.W       L938+4,R0  ; H'04EC
    0000033A 72FF                   ADD         #-1,R2
    0000033C 03FE                   MOV.L       @(R0,R15),R3
    0000033E 3323                   CMP/GE      R2,R3
    00000340 8BB4                   BF          L568
          game.c    38                            }
          game.c    39                    }
          game.c    40            }
          game.c    41            orton.direction = RIGHT;
    00000342 E101                   MOV         #1,R1
    00000344 9049                   MOV.W       L938+10,R0 ; H'04D4
          game.c    42            orton.position = STOP;
    00000346 E300                   MOV         #0,R3
    00000348 0F16                   MOV.L       R1,@(R0,R15)
          game.c    43            orton.counter_jump = orton.dx = orton.dy = 0;
    0000034A 6233                   MOV         R3,R2
    0000034C 9046                   MOV.W       L938+12,R0 ; H'04D8
    0000034E 0F36                   MOV.L       R3,@(R0,R15)
    00000350 9045                   MOV.W       L938+14,R0 ; H'04D0
          game.c    44            orton.can_jump = 1;
    00000352 6313                   MOV         R1,R3
    00000354 0F26                   MOV.L       R2,@(R0,R15)
    00000356 9043                   MOV.W       L938+16,R0 ; H'04CC
          game.c    45            orton.counter_change_position = TIME_ORTON_CHANGE_POSITION;
          game.c    46            orton_start = orton;
    00000358 9146                   MOV.W       L938+24,R1 ; H'04A8
    0000035A 0F26                   MOV.L       R2,@(R0,R15)
    0000035C 9041                   MOV.W       L938+18,R0 ; H'04DD
    0000035E 31FC                   ADD         R15,R1
    00000360 0F24                   MOV.B       R2,@(R0,R15)
    00000362 E202                   MOV         #2,R2
    00000364 903E                   MOV.W       L938+20,R0 ; H'04DC
    00000366 0F34                   MOV.B       R3,@(R0,R15)
    00000368 903D                   MOV.W       L938+22,R0 ; H'04DE
    0000036A 0F24                   MOV.B       R2,@(R0,R15)
    0000036C 9233                   MOV.W       L938+6,R2  ; H'04C4
    0000036E 32FC                   ADD         R15,R2
    00000370 D31F                   MOV.L       L938+32,R3 ; __quick_odd_mvn
    00000372 430B                   JSR         @R3
    00000374 E01C                   MOV         #28,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c    47            
          game.c    48            camera.x = orton.x-60;
    00000376 902E                   MOV.W       L938+6,R0  ; H'04C4
    00000378 02FE                   MOV.L       @(R0,R15),R2
    0000037A 72C4                   ADD         #-60,R2
    0000037C 9035                   MOV.W       L938+26,R0 ; H'04A0
    0000037E 0F26                   MOV.L       R2,@(R0,R15)
          game.c    49            camera.y = orton.y-28;
    00000380 902A                   MOV.W       L938+8,R0  ; H'04C8
    00000382 03FE                   MOV.L       @(R0,R15),R3
    00000384 9032                   MOV.W       L938+28,R0 ; H'04A4
    00000386 73E4                   ADD         #-28,R3
          game.c    50            
          game.c    51    /** Main loop **/
          game.c    52            while(run)
    00000388 D21A                   MOV.L       L938+36,R2 ; L572
    0000038A 422B                   JMP         @R2
    0000038C 0F36                   MOV.L       R3,@(R0,R15)
    0000038E              L573:                             
          game.c    53            {
          game.c    54    /** Movements **/
          game.c    55                    /** Orton **/
          game.c    56                    if(!dead)
    0000038E 902E                   MOV.W       L938+30,R0 ; H'04E2
    00000390 01FC                   MOV.B       @(R0,R15),R1
    00000392 2118                   TST         R1,R1
    00000394 8901                   BT          L939
    00000396 A161                   BRA         L574
    00000398 0009                   NOP
    0000039A              L939:                             
          game.c    57                    {
          game.c    58                            if(IsKeyDown(KEY_CHAR_0)) pause();
    0000039A BECF                   BSR         _KeyDown
    0000039C E447                   MOV         #71,R4
    0000039E 600C                   EXTU.B      R0,R0
    000003A0 2008                   TST         R0,R0
    000003A2 8902                   BT          L575
    000003A4 D314                   MOV.L       L938+40,R3 ; _pause
    000003A6 430B                   JSR         @R3
    000003A8 0009                   NOP
    000003AA              L575:                             
          game.c    59                            if(IsKeyDown(KEY_CTRL_LEFT))
    000003AA BEC7                   BSR         _KeyDown
    000003AC E426                   MOV         #38,R4
    000003AE 600C                   EXTU.B      R0,R0
    000003B0 2008                   TST         R0,R0
    000003B2 8923                   BT          L576
          game.c    60                            {
          game.c    61                                    orton.direction = LEFT;
    000003B4 9011                   MOV.W       L938+10,R0 ; H'04D4
          game.c    62                                    if(orton.dx > -2)
    000003B6 E3FE                   MOV         #-2,R3
    000003B8 E200                   MOV         #0,R2
    000003BA 0F26                   MOV.L       R2,@(R0,R15)
    000003BC 9010                   MOV.W       L938+16,R0 ; H'04CC
    000003BE 01FE                   MOV.L       @(R0,R15),R1
    000003C0 3137                   CMP/GT      R3,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C2 8B3C                   BF          L582
          game.c    63                                            orton.dx--;
    000003C4 900C                   MOV.W       L938+16,R0 ; H'04CC
    000003C6 02FE                   MOV.L       @(R0,R15),R2
    000003C8 900A                   MOV.W       L938+16,R0 ; H'04CC
    000003CA 72FF                   ADD         #-1,R2
    000003CC A037                   BRA         L582
    000003CE 0F26                   MOV.L       R2,@(R0,R15)
    000003D0              L938:                             
    000003D0 04E8                   .DATA.W     H'04E8
    000003D2 04F0                   .DATA.W     H'04F0
    000003D4 04EC                   .DATA.W     H'04EC
    000003D6 04C4                   .DATA.W     H'04C4
    000003D8 04C8                   .DATA.W     H'04C8
    000003DA 04D4                   .DATA.W     H'04D4
    000003DC 04D8                   .DATA.W     H'04D8
    000003DE 04D0                   .DATA.W     H'04D0
    000003E0 04CC                   .DATA.W     H'04CC
    000003E2 04DD                   .DATA.W     H'04DD
    000003E4 04DC                   .DATA.W     H'04DC
    000003E6 04DE                   .DATA.W     H'04DE
    000003E8 04A8                   .DATA.W     H'04A8
    000003EA 04A0                   .DATA.W     H'04A0
    000003EC 04A4                   .DATA.W     H'04A4
    000003EE 04E2                   .DATA.W     H'04E2
    000003F0 <00000000>             .DATA.L     __quick_odd_mvn
    000003F4 <00000000>             .DATA.L     L572
    000003F8 <00000000>             .DATA.L     _pause
    000003FC              L576:                             
          game.c    64                            }
          game.c    65                            else if(IsKeyDown(KEY_CTRL_RIGHT))
    000003FC BE9E                   BSR         _KeyDown
    000003FE E41B                   MOV         #27,R4
    00000400 600C                   EXTU.B      R0,R0
    00000402 2008                   TST         R0,R0
    00000404 890D                   BT          L579
          game.c    66                            {
          game.c    67                                    orton.direction = RIGHT;
    00000406 E201                   MOV         #1,R2
    00000408 9064                   MOV.W       L940,R0    ; H'04D4
          game.c    68                                    if(orton.dx < 2)
    0000040A E302                   MOV         #2,R3
    0000040C 0F26                   MOV.L       R2,@(R0,R15)
    0000040E 9062                   MOV.W       L940+2,R0  ; H'04CC
    00000410 01FE                   MOV.L       @(R0,R15),R1
    00000412 3133                   CMP/GE      R3,R1
    00000414 8913                   BT          L582
          game.c    69                                            orton.dx++;
    00000416 905E                   MOV.W       L940+2,R0  ; H'04CC
    00000418 02FE                   MOV.L       @(R0,R15),R2
    0000041A 7201                   ADD         #1,R2
    0000041C 905B                   MOV.W       L940+2,R0  ; H'04CC
    0000041E A00E                   BRA         L582
    00000420 0F26                   MOV.L       R2,@(R0,R15)
    00000422              L579:                             
          game.c    70                            }
          game.c    71                            else orton.dx /= 2;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000422 E300                   MOV         #0,R3
    00000424 9057                   MOV.W       L940+2,R0  ; H'04CC
    00000426 01FE                   MOV.L       @(R0,R15),R1
    00000428 9055                   MOV.W       L940+2,R0  ; H'04CC
    0000042A 3317                   CMP/GT      R1,R3
    0000042C 313E                   ADDC        R3,R1
    0000042E 4121                   SHAR        R1
          game.c    72                            while(level->map[orton.y/8*level->width + (orton.x+orton.dx+1)/8]==WALL || level->
                         +map[(orton.y+5)/8*level->width + (orton.x+orton.dx+1)/8]==WALL)
    00000430 A005                   BRA         L582
    00000432 0F16                   MOV.L       R1,@(R0,R15)
    00000434              L583:                             
          game.c    73                                    orton.dx++;
    00000434 904F                   MOV.W       L940+2,R0  ; H'04CC
    00000436 03FE                   MOV.L       @(R0,R15),R3
    00000438 904D                   MOV.W       L940+2,R0  ; H'04CC
    0000043A 7301                   ADD         #1,R3
    0000043C 0F36                   MOV.L       R3,@(R0,R15)
    0000043E              L582:                             
    0000043E 904B                   MOV.W       L940+4,R0  ; H'04F0
    00000440 914B                   MOV.W       L940+6,R1  ; H'04C8
    00000442 31FC                   ADD         R15,R1
    00000444 6312                   MOV.L       @R1,R3
    00000446 4311                   CMP/PZ      R3
    00000448 8D01                   BT/S        L584
    0000044A 00FE                   MOV.L       @(R0,R15),R0
    0000044C 7307                   ADD         #7,R3
    0000044E              L584:                             
    0000044E 4321                   SHAR        R3
    00000450 9142                   MOV.W       L940+4,R1  ; H'04F0
    00000452 4321                   SHAR        R3
    00000454 4321                   SHAR        R3
    00000456 31FC                   ADD         R15,R1
    00000458 6212                   MOV.L       @R1,R2
    0000045A 5223                   MOV.L       @(12,R2),R2
    0000045C 913B                   MOV.W       L940+2,R1  ; H'04CC
    0000045E 0327                   MUL.L       R2,R3
    00000460 31FC                   ADD         R15,R1
    00000462 6212                   MOV.L       @R1,R2
    00000464 913A                   MOV.W       L940+8,R1  ; H'04C4
    00000466 31FC                   ADD         R15,R1
    00000468 6112                   MOV.L       @R1,R1
    0000046A 312C                   ADD         R2,R1
    0000046C 7101                   ADD         #1,R1
    0000046E 4111                   CMP/PZ      R1
    00000470 8D01                   BT/S        L585
    00000472 031A                   STS         MACL,R3
    00000474 7107                   ADD         #7,R1
    00000476              L585:                             
    00000476 4121                   SHAR        R1
    00000478 5002                   MOV.L       @(8,R0),R0
    0000047A 4121                   SHAR        R1
    0000047C 4121                   SHAR        R1
    0000047E 331C                   ADD         R1,R3
    00000480 003C                   MOV.B       @(R0,R3),R0
    00000482 8801                   CMP/EQ      #1,R0
    00000484 89D6                   BT          L583




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000486 9027                   MOV.W       L940+4,R0  ; H'04F0
    00000488 9127                   MOV.W       L940+6,R1  ; H'04C8
    0000048A 31FC                   ADD         R15,R1
    0000048C 6312                   MOV.L       @R1,R3
    0000048E 7305                   ADD         #5,R3
    00000490 4311                   CMP/PZ      R3
    00000492 8D01                   BT/S        L586
    00000494 00FE                   MOV.L       @(R0,R15),R0
    00000496 7307                   ADD         #7,R3
    00000498              L586:                             
    00000498 911E                   MOV.W       L940+4,R1  ; H'04F0
    0000049A 4321                   SHAR        R3
    0000049C 4321                   SHAR        R3
    0000049E 4321                   SHAR        R3
    000004A0 31FC                   ADD         R15,R1
    000004A2 6112                   MOV.L       @R1,R1
    000004A4 5213                   MOV.L       @(12,R1),R2
    000004A6 0327                   MUL.L       R2,R3
    000004A8 9115                   MOV.W       L940+2,R1  ; H'04CC
    000004AA 31FC                   ADD         R15,R1
    000004AC 6212                   MOV.L       @R1,R2
    000004AE 9115                   MOV.W       L940+8,R1  ; H'04C4
    000004B0 31FC                   ADD         R15,R1
    000004B2 6112                   MOV.L       @R1,R1
    000004B4 312C                   ADD         R2,R1
    000004B6 7101                   ADD         #1,R1
    000004B8 4111                   CMP/PZ      R1
    000004BA 8D01                   BT/S        L587
    000004BC 031A                   STS         MACL,R3
    000004BE 7107                   ADD         #7,R1
    000004C0              L587:                             
    000004C0 5002                   MOV.L       @(8,R0),R0
    000004C2 4121                   SHAR        R1
    000004C4 4121                   SHAR        R1
    000004C6 4121                   SHAR        R1
    000004C8 331C                   ADD         R1,R3
    000004CA 003C                   MOV.B       @(R0,R3),R0
    000004CC 8801                   CMP/EQ      #1,R0
    000004CE 89B1                   BT          L583
          game.c    74                            while(level->map[orton.y/8*level->width + (orton.x+orton.dx+6)/8]==WALL || level->
                         +map[(orton.y+5)/8*level->width + (orton.x+orton.dx+6)/8]==WALL)
    000004D0 A00A                   BRA         L588
    000004D2 0009                   NOP
    000004D4              L940:                             
    000004D4 04D4                   .DATA.W     H'04D4
    000004D6 04CC                   .DATA.W     H'04CC
    000004D8 04F0                   .DATA.W     H'04F0
    000004DA 04C8                   .DATA.W     H'04C8
    000004DC 04C4                   .DATA.W     H'04C4
    000004DE              L589:                             
          game.c    75                                    orton.dx--;
    000004DE 906C                   MOV.W       L941,R0    ; H'04CC
    000004E0 03FE                   MOV.L       @(R0,R15),R3
    000004E2 73FF                   ADD         #-1,R3
    000004E4 9069                   MOV.W       L941,R0    ; H'04CC
    000004E6 0F36                   MOV.L       R3,@(R0,R15)
    000004E8              L588:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004E8 9068                   MOV.W       L941+2,R0  ; H'04F0
    000004EA 9168                   MOV.W       L941+4,R1  ; H'04C8
    000004EC 31FC                   ADD         R15,R1
    000004EE 6312                   MOV.L       @R1,R3
    000004F0 4311                   CMP/PZ      R3
    000004F2 8D01                   BT/S        L590
    000004F4 00FE                   MOV.L       @(R0,R15),R0
    000004F6 7307                   ADD         #7,R3
    000004F8              L590:                             
    000004F8 9160                   MOV.W       L941+2,R1  ; H'04F0
    000004FA 4321                   SHAR        R3
    000004FC 4321                   SHAR        R3
    000004FE 4321                   SHAR        R3
    00000500 31FC                   ADD         R15,R1
    00000502 6212                   MOV.L       @R1,R2
    00000504 9159                   MOV.W       L941,R1    ; H'04CC
    00000506 5223                   MOV.L       @(12,R2),R2
    00000508 0327                   MUL.L       R2,R3
    0000050A 31FC                   ADD         R15,R1
    0000050C 6212                   MOV.L       @R1,R2
    0000050E 9157                   MOV.W       L941+6,R1  ; H'04C4
    00000510 31FC                   ADD         R15,R1
    00000512 6112                   MOV.L       @R1,R1
    00000514 312C                   ADD         R2,R1
    00000516 7106                   ADD         #6,R1
    00000518 4111                   CMP/PZ      R1
    0000051A 8D01                   BT/S        L591
    0000051C 031A                   STS         MACL,R3
    0000051E 7107                   ADD         #7,R1
    00000520              L591:                             
    00000520 5002                   MOV.L       @(8,R0),R0
    00000522 4121                   SHAR        R1
    00000524 4121                   SHAR        R1
    00000526 4121                   SHAR        R1
    00000528 331C                   ADD         R1,R3
    0000052A 003C                   MOV.B       @(R0,R3),R0
    0000052C 8801                   CMP/EQ      #1,R0
    0000052E 89D6                   BT          L589
    00000530 9044                   MOV.W       L941+2,R0  ; H'04F0
    00000532 9144                   MOV.W       L941+4,R1  ; H'04C8
    00000534 31FC                   ADD         R15,R1
    00000536 6312                   MOV.L       @R1,R3
    00000538 7305                   ADD         #5,R3
    0000053A 4311                   CMP/PZ      R3
    0000053C 8D01                   BT/S        L592
    0000053E 00FE                   MOV.L       @(R0,R15),R0
    00000540 7307                   ADD         #7,R3
    00000542              L592:                             
    00000542 4321                   SHAR        R3
    00000544 913A                   MOV.W       L941+2,R1  ; H'04F0
    00000546 4321                   SHAR        R3
    00000548 4321                   SHAR        R3
    0000054A 31FC                   ADD         R15,R1
    0000054C 6112                   MOV.L       @R1,R1
    0000054E 5213                   MOV.L       @(12,R1),R2
    00000550 9133                   MOV.W       L941,R1    ; H'04CC
    00000552 0327                   MUL.L       R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000554 31FC                   ADD         R15,R1
    00000556 6212                   MOV.L       @R1,R2
    00000558 9132                   MOV.W       L941+6,R1  ; H'04C4
    0000055A 31FC                   ADD         R15,R1
    0000055C 6112                   MOV.L       @R1,R1
    0000055E 312C                   ADD         R2,R1
    00000560 7106                   ADD         #6,R1
    00000562 4111                   CMP/PZ      R1
    00000564 8D01                   BT/S        L593
    00000566 031A                   STS         MACL,R3
    00000568 7107                   ADD         #7,R1
    0000056A              L593:                             
    0000056A 4121                   SHAR        R1
    0000056C 5002                   MOV.L       @(8,R0),R0
    0000056E 4121                   SHAR        R1
    00000570 4121                   SHAR        R1
    00000572 331C                   ADD         R1,R3
    00000574 003C                   MOV.B       @(R0,R3),R0
    00000576 8801                   CMP/EQ      #1,R0
    00000578 89B1                   BT          L589
          game.c    76                            if(orton.dx)
    0000057A 901E                   MOV.W       L941,R0    ; H'04CC
    0000057C 02FE                   MOV.L       @(R0,R15),R2
    0000057E 2228                   TST         R2,R2
    00000580 8921                   BT          L594
          game.c    77                            {
          game.c    78                                    if(orton.counter_change_position > TIME_ORTON_CHANGE_POSITION-1)
    00000582 E201                   MOV         #1,R2
    00000584 901D                   MOV.W       L941+8,R0  ; H'04DE
    00000586 03FC                   MOV.B       @(R0,R15),R3
    00000588 3327                   CMP/GT      R2,R3
    0000058A 8B10                   BF          L595
          game.c    79                                    {
          game.c    80                                            orton.position = orton.position%4+1;
    0000058C 901A                   MOV.W       L941+10,R0 ; H'04D8
    0000058E 00FE                   MOV.L       @(R0,R15),R0
    00000590 4011                   CMP/PZ      R0
    00000592 8B01                   BF          L596
    00000594 A005                   BRA         L597
    00000596 C903                   AND         #3,R0
    00000598              L596:                             
    00000598 6007                   NOT         R0,R0
    0000059A 7001                   ADD         #1,R0
    0000059C C903                   AND         #3,R0
    0000059E 6007                   NOT         R0,R0
    000005A0 7001                   ADD         #1,R0
    000005A2              L597:                             
    000005A2 302C                   ADD         R2,R0
    000005A4 910E                   MOV.W       L941+10,R1 ; H'04D8
    000005A6 31FC                   ADD         R15,R1
    000005A8 2102                   MOV.L       R0,@R1
          game.c    81                                            orton.counter_change_position = 0;
    000005AA A003                   BRA         L913
    000005AC E300                   MOV         #0,R3
    000005AE              L595:                             
          game.c    82                                    }
          game.c    83                                    else orton.counter_change_position++;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005AE 9008                   MOV.W       L941+8,R0  ; H'04DE
    000005B0 03FC                   MOV.B       @(R0,R15),R3
    000005B2 7301                   ADD         #1,R3
    000005B4              L913:                             
    000005B4 9005                   MOV.W       L941+8,R0  ; H'04DE
    000005B6 A00C                   BRA         L599
    000005B8 0F34                   MOV.B       R3,@(R0,R15)
    000005BA              L941:                             
    000005BA 04CC                   .DATA.W     H'04CC
    000005BC 04F0                   .DATA.W     H'04F0
    000005BE 04C8                   .DATA.W     H'04C8
    000005C0 04C4                   .DATA.W     H'04C4
    000005C2 04DE                   .DATA.W     H'04DE
    000005C4 04D8                   .DATA.W     H'04D8
    000005C6              L594:                             
          game.c    84                            } else {
          game.c    85                                    orton.position = STOP;
    000005C6 E100                   MOV         #0,R1
    000005C8 9087                   MOV.W       L942,R0    ; H'04D8
          game.c    86                                    orton.counter_change_position = TIME_ORTON_CHANGE_POSITION;
    000005CA E302                   MOV         #2,R3
    000005CC 0F16                   MOV.L       R1,@(R0,R15)
    000005CE 9085                   MOV.W       L942+2,R0  ; H'04DE
    000005D0 0F34                   MOV.B       R3,@(R0,R15)
    000005D2              L599:                             
          game.c    87                            }
          game.c    88                            if((IsKeyDown(KEY_CTRL_UP) || IsKeyDown(KEY_CTRL_SHIFT)) && (orton.dy<=0 || orton.
                         +can_jump) && orton.counter_jump < MAX_JUMP)
    000005D2 BDB3                   BSR         _KeyDown
    000005D4 E41C                   MOV         #28,R4
    000005D6 600C                   EXTU.B      R0,R0
    000005D8 2008                   TST         R0,R0
    000005DA 8B04                   BF          L601
    000005DC BDAE                   BSR         _KeyDown
    000005DE E44E                   MOV         #78,R4
    000005E0 600C                   EXTU.B      R0,R0
    000005E2 2008                   TST         R0,R0
    000005E4 891E                   BT          L600
    000005E6              L601:                             
    000005E6 907A                   MOV.W       L942+4,R0  ; H'04D0
    000005E8 03FE                   MOV.L       @(R0,R15),R3
    000005EA 4315                   CMP/PL      R3
    000005EC 8B03                   BF          L602
    000005EE 9077                   MOV.W       L942+6,R0  ; H'04DC
    000005F0 01FC                   MOV.B       @(R0,R15),R1
    000005F2 2118                   TST         R1,R1
    000005F4 8916                   BT          L600
    000005F6              L602:                             
    000005F6 E306                   MOV         #6,R3
    000005F8 9073                   MOV.W       L942+8,R0  ; H'04DD
    000005FA 02FC                   MOV.B       @(R0,R15),R2
    000005FC 3233                   CMP/GE      R3,R2
    000005FE 8911                   BT          L600
          game.c    89                            {
          game.c    90                                    if(orton.can_jump) orton.dy = -2;
    00000600 906E                   MOV.W       L942+6,R0  ; H'04DC
    00000602 01FC                   MOV.B       @(R0,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000604 2118                   TST         R1,R1
    00000606 8903                   BT          L603
    00000608 9069                   MOV.W       L942+4,R0  ; H'04D0
    0000060A E2FE                   MOV         #-2,R2
    0000060C A005                   BRA         L604
    0000060E 0F26                   MOV.L       R2,@(R0,R15)
    00000610              L603:                             
          game.c    91                                    else orton.dy-=2;
    00000610 9065                   MOV.W       L942+4,R0  ; H'04D0
    00000612 01FE                   MOV.L       @(R0,R15),R1
    00000614 9063                   MOV.W       L942+4,R0  ; H'04D0
    00000616 71FE                   ADD         #-2,R1
    00000618 0F16                   MOV.L       R1,@(R0,R15)
    0000061A              L604:                             
          game.c    92                                    orton.counter_jump++;
    0000061A 9062                   MOV.W       L942+8,R0  ; H'04DD
    0000061C 03FC                   MOV.B       @(R0,R15),R3
    0000061E 7301                   ADD         #1,R3
    00000620 905F                   MOV.W       L942+8,R0  ; H'04DD
    00000622 0F34                   MOV.B       R3,@(R0,R15)
    00000624              L600:                             
          game.c    93                            }
          game.c    94                            orton.x += orton.dx;
    00000624 905E                   MOV.W       L942+10,R0 ; H'04CC
    00000626 03FE                   MOV.L       @(R0,R15),R3
    00000628 905D                   MOV.W       L942+12,R0 ; H'04C4
    0000062A 02FE                   MOV.L       @(R0,R15),R2
    0000062C 905B                   MOV.W       L942+12,R0 ; H'04C4
    0000062E 323C                   ADD         R3,R2
    00000630 0F26                   MOV.L       R2,@(R0,R15)
          game.c    95                            orton.y += orton.dy/2;
    00000632 E300                   MOV         #0,R3
    00000634 9053                   MOV.W       L942+4,R0  ; H'04D0
    00000636 01FE                   MOV.L       @(R0,R15),R1
    00000638 9056                   MOV.W       L942+14,R0 ; H'04C8
    0000063A 3317                   CMP/GT      R1,R3
    0000063C 02FE                   MOV.L       @(R0,R15),R2
    0000063E 313E                   ADDC        R3,R1
    00000640 9052                   MOV.W       L942+14,R0 ; H'04C8
    00000642 4121                   SHAR        R1
    00000644 321C                   ADD         R1,R2
          game.c    96                            if(orton.dy < FALLING_MAX_SPEED*2) orton.dy++;
    00000646 E30A                   MOV         #10,R3
    00000648 0F26                   MOV.L       R2,@(R0,R15)
    0000064A 9048                   MOV.W       L942+4,R0  ; H'04D0
    0000064C 01FE                   MOV.L       @(R0,R15),R1
    0000064E 3133                   CMP/GE      R3,R1
    00000650 8904                   BT          L574
    00000652 9044                   MOV.W       L942+4,R0  ; H'04D0
    00000654 02FE                   MOV.L       @(R0,R15),R2
    00000656 7201                   ADD         #1,R2
    00000658 9041                   MOV.W       L942+4,R0  ; H'04D0
    0000065A 0F26                   MOV.L       R2,@(R0,R15)
    0000065C              L574:                             
          game.c    97                    }
          game.c    98    
          game.c    99                    /** Moving lines **/




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   100                    moving_line_sleep = (moving_line_sleep+1)%TIME_LINE_SLEEP;
    0000065C 50F2                   MOV.L       @(8,R15),R0
    0000065E 7001                   ADD         #1,R0
    00000660 4011                   CMP/PZ      R0
    00000662 8B01                   BF          L606
    00000664 A005                   BRA         L607
    00000666 C903                   AND         #3,R0
    00000668              L606:                             
    00000668 6007                   NOT         R0,R0
    0000066A 7001                   ADD         #1,R0
    0000066C C903                   AND         #3,R0
    0000066E 6007                   NOT         R0,R0
    00000670 7001                   ADD         #1,R0
    00000672              L607:                             
    00000672 1F02                   MOV.L       R0,@(8,R15)
          game.c   101                    for(i=0 ; i<level->nb_lines ; i++)
    00000674 A098                   BRA         L914
    00000676 E300                   MOV         #0,R3
    00000678              L609:                             
          game.c   102                    {
          game.c   103                            if(moving_line_sleep%(TIME_LINE_SLEEP/level->line[i].dx)==0) level->line[i].x += s
                         +ng(level->line[i].dx);
    00000678 9037                   MOV.W       L942+16,R0 ; H'04F0
    0000067A 00FE                   MOV.L       @(R0,R15),R0
    0000067C 9136                   MOV.W       L942+18,R1 ; H'04EC
    0000067E 31FC                   ADD         R15,R1
    00000680 6312                   MOV.L       @R1,R3
    00000682 E104                   MOV         #4,R1
    00000684 5005                   MOV.L       @(20,R0),R0
    00000686 6233                   MOV         R3,R2
    00000688 4308                   SHLL2       R3
    0000068A 4300                   SHLL        R3
    0000068C 332C                   ADD         R2,R3
    0000068E 4308                   SHLL2       R3
    00000690 303C                   ADD         R3,R0
    00000692 D317                   MOV.L       L942+22,R3 ; __divls
    00000694 430B                   JSR         @R3
    00000696 5003                   MOV.L       @(12,R0),R0
    00000698 D216                   MOV.L       L942+26,R2 ; __modls
    0000069A 420B                   JSR         @R2
    0000069C 51F2                   MOV.L       @(8,R15),R1
    0000069E 2008                   TST         R0,R0
    000006A0 8B3C                   BF          L610
    000006A2 9022                   MOV.W       L942+16,R0 ; H'04F0
    000006A4 03FE                   MOV.L       @(R0,R15),R3
    000006A6 9021                   MOV.W       L942+18,R0 ; H'04EC
    000006A8 5335                   MOV.L       @(20,R3),R3
    000006AA 02FE                   MOV.L       @(R0,R15),R2
    000006AC 901D                   MOV.W       L942+16,R0 ; H'04F0
    000006AE 6123                   MOV         R2,R1
    000006B0 00FE                   MOV.L       @(R0,R15),R0
    000006B2 4208                   SHLL2       R2
    000006B4 5005                   MOV.L       @(20,R0),R0
    000006B6 4200                   SHLL        R2
    000006B8 321C                   ADD         R1,R2
    000006BA 4208                   SHLL2       R2
    000006BC 9116                   MOV.W       L942+18,R1 ; H'04EC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006BE 323C                   ADD         R3,R2
    000006C0 31FC                   ADD         R15,R1
    000006C2 6312                   MOV.L       @R1,R3
    000006C4 6133                   MOV         R3,R1
    000006C6 4308                   SHLL2       R3
    000006C8 4300                   SHLL        R3
    000006CA 331C                   ADD         R1,R3
    000006CC 4308                   SHLL2       R3
    000006CE 330C                   ADD         R0,R3
    000006D0 5133                   MOV.L       @(12,R3),R1
    000006D2 4111                   CMP/PZ      R1
    000006D4 8910                   BT          L611
    000006D6 A01E                   BRA         L613
    000006D8 E1FF                   MOV         #-1,R1
    000006DA              L942:                             
    000006DA 04D8                   .DATA.W     H'04D8
    000006DC 04DE                   .DATA.W     H'04DE
    000006DE 04D0                   .DATA.W     H'04D0
    000006E0 04DC                   .DATA.W     H'04DC
    000006E2 04DD                   .DATA.W     H'04DD
    000006E4 04CC                   .DATA.W     H'04CC
    000006E6 04C4                   .DATA.W     H'04C4
    000006E8 04C8                   .DATA.W     H'04C8
    000006EA 04F0                   .DATA.W     H'04F0
    000006EC 04EC                   .DATA.W     H'04EC
    000006EE 0000                   .DATA.W     0
    000006F0 <00000000>             .DATA.L     __divls
    000006F4 <00000000>             .DATA.L     __modls
    000006F8              L611:                             
    000006F8 9091                   MOV.W       L943,R0    ; H'04F0
    000006FA 00FE                   MOV.L       @(R0,R15),R0
    000006FC 9190                   MOV.W       L943+2,R1  ; H'04EC
    000006FE 31FC                   ADD         R15,R1
    00000700 6312                   MOV.L       @R1,R3
    00000702 6133                   MOV         R3,R1
    00000704 5005                   MOV.L       @(20,R0),R0
    00000706 4308                   SHLL2       R3
    00000708 4300                   SHLL        R3
    0000070A 331C                   ADD         R1,R3
    0000070C 4308                   SHLL2       R3
    0000070E 330C                   ADD         R0,R3
    00000710 5133                   MOV.L       @(12,R3),R1
    00000712 4115                   CMP/PL      R1
    00000714 0129                   MOVT        R1
    00000716              L613:                             
    00000716 6022                   MOV.L       @R2,R0
    00000718 301C                   ADD         R1,R0
    0000071A 2202                   MOV.L       R0,@R2
    0000071C              L610:                             
          game.c   104                            if(moving_line_sleep%(TIME_LINE_SLEEP/level->line[i].dy)==0) level->line[i].y += s
                         +ng(level->line[i].dy);
    0000071C 907F                   MOV.W       L943,R0    ; H'04F0
    0000071E 00FE                   MOV.L       @(R0,R15),R0
    00000720 917E                   MOV.W       L943+2,R1  ; H'04EC
    00000722 31FC                   ADD         R15,R1
    00000724 6312                   MOV.L       @R1,R3
    00000726 E104                   MOV         #4,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000728 5005                   MOV.L       @(20,R0),R0
    0000072A 6233                   MOV         R3,R2
    0000072C 4308                   SHLL2       R3
    0000072E 4300                   SHLL        R3
    00000730 332C                   ADD         R2,R3
    00000732 4308                   SHLL2       R3
    00000734 303C                   ADD         R3,R0
    00000736 D33B                   MOV.L       L943+6,R3  ; __divls
    00000738 430B                   JSR         @R3
    0000073A 5004                   MOV.L       @(16,R0),R0
    0000073C D23A                   MOV.L       L943+10,R2 ; __modls
    0000073E 420B                   JSR         @R2
    00000740 51F2                   MOV.L       @(8,R15),R1
    00000742 2008                   TST         R0,R0
    00000744 8B2D                   BF          L615
    00000746 906A                   MOV.W       L943,R0    ; H'04F0
    00000748 03FE                   MOV.L       @(R0,R15),R3
    0000074A 9069                   MOV.W       L943+2,R0  ; H'04EC
    0000074C 5335                   MOV.L       @(20,R3),R3
    0000074E 02FE                   MOV.L       @(R0,R15),R2
    00000750 9065                   MOV.W       L943,R0    ; H'04F0
    00000752 6123                   MOV         R2,R1
    00000754 00FE                   MOV.L       @(R0,R15),R0
    00000756 4208                   SHLL2       R2
    00000758 5005                   MOV.L       @(20,R0),R0
    0000075A 4200                   SHLL        R2
    0000075C 321C                   ADD         R1,R2
    0000075E 4208                   SHLL2       R2
    00000760 915E                   MOV.W       L943+2,R1  ; H'04EC
    00000762 323C                   ADD         R3,R2
    00000764 31FC                   ADD         R15,R1
    00000766 6312                   MOV.L       @R1,R3
    00000768 6133                   MOV         R3,R1
    0000076A 4308                   SHLL2       R3
    0000076C 4300                   SHLL        R3
    0000076E 331C                   ADD         R1,R3
    00000770 4308                   SHLL2       R3
    00000772 330C                   ADD         R0,R3
    00000774 5134                   MOV.L       @(16,R3),R1
    00000776 4111                   CMP/PZ      R1
    00000778 8901                   BT          L616
    0000077A A00F                   BRA         L618
    0000077C E1FF                   MOV         #-1,R1
    0000077E              L616:                             
    0000077E 904E                   MOV.W       L943,R0    ; H'04F0
    00000780 914E                   MOV.W       L943+2,R1  ; H'04EC
    00000782 00FE                   MOV.L       @(R0,R15),R0
    00000784 31FC                   ADD         R15,R1
    00000786 6312                   MOV.L       @R1,R3
    00000788 5005                   MOV.L       @(20,R0),R0
    0000078A 6133                   MOV         R3,R1
    0000078C 4308                   SHLL2       R3
    0000078E 4300                   SHLL        R3
    00000790 331C                   ADD         R1,R3
    00000792 4308                   SHLL2       R3
    00000794 330C                   ADD         R0,R3
    00000796 5134                   MOV.L       @(16,R3),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000798 4115                   CMP/PL      R1
    0000079A 0129                   MOVT        R1
    0000079C              L618:                             
    0000079C 5021                   MOV.L       @(4,R2),R0
    0000079E 301C                   ADD         R1,R0
    000007A0 1201                   MOV.L       R0,@(4,R2)
    000007A2              L615:                             
    000007A2 903D                   MOV.W       L943+2,R0  ; H'04EC
    000007A4 03FE                   MOV.L       @(R0,R15),R3
    000007A6 7301                   ADD         #1,R3
    000007A8              L914:                             
    000007A8 903A                   MOV.W       L943+2,R0  ; H'04EC
    000007AA 0F36                   MOV.L       R3,@(R0,R15)
    000007AC 9037                   MOV.W       L943,R0    ; H'04F0
    000007AE 02FE                   MOV.L       @(R0,R15),R2
    000007B0 9036                   MOV.W       L943+2,R0  ; H'04EC
    000007B2 5326                   MOV.L       @(24,R2),R3
    000007B4 01FE                   MOV.L       @(R0,R15),R1
    000007B6 3133                   CMP/GE      R3,R1
    000007B8 8901                   BT          L944
    000007BA AF5D                   BRA         L609
    000007BC 0009                   NOP
    000007BE              L944:                             
          game.c   105                    }
          game.c   106                    
          game.c   107                    /** Moving walls **/
          game.c   108                    if(moving_wall_sleep) moving_wall_sleep--;
    000007BE 53F1                   MOV.L       @(4,R15),R3
    000007C0 2338                   TST         R3,R3
    000007C2 8903                   BT          L620
    000007C4 52F1                   MOV.L       @(4,R15),R2
    000007C6 72FF                   ADD         #-1,R2
    000007C8 A06A                   BRA         L621
    000007CA 1F21                   MOV.L       R2,@(4,R15)
    000007CC              L620:                             
          game.c   109                    else
          game.c   110                    {
          game.c   111                            for(i=0 ; i<level->nb_walls ; i++)
    000007CC 9028                   MOV.W       L943+2,R0  ; H'04EC
    000007CE E100                   MOV         #0,R1
    000007D0 A05F                   BRA         L622
    000007D2 0F16                   MOV.L       R1,@(R0,R15)
    000007D4              L623:                             
          game.c   112                            {
          game.c   113                                    switch(level->wall[i].direction)
    000007D4 9023                   MOV.W       L943,R0    ; H'04F0
    000007D6 00FE                   MOV.L       @(R0,R15),R0
    000007D8 9122                   MOV.W       L943+2,R1  ; H'04EC
    000007DA 31FC                   ADD         R15,R1
    000007DC 6312                   MOV.L       @R1,R3
    000007DE 6233                   MOV         R3,R2
    000007E0 5007                   MOV.L       @(28,R0),R0
    000007E2 4300                   SHLL        R3
    000007E4 332C                   ADD         R2,R3
    000007E6 4308                   SHLL2       R3
    000007E8 4300                   SHLL        R3
    000007EA 003E                   MOV.L       @(R0,R3),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007EC 8800                   CMP/EQ      #0,R0
    000007EE 8907                   BT          L516
    000007F0 8801                   CMP/EQ      #1,R0
    000007F2 891B                   BT          L517
    000007F4 8802                   CMP/EQ      #2,R0
    000007F6 8929                   BT          L518
    000007F8 8803                   CMP/EQ      #3,R0
    000007FA 8937                   BT          L519
    000007FC A044                   BRA         L624
    000007FE 0009                   NOP
    00000800              L516:                            ; case label 
          game.c   114                                    {
          game.c   115                                            case W_LEFT: level->wall[i].x--; break;
    00000800 900D                   MOV.W       L943,R0    ; H'04F0
    00000802 03FE                   MOV.L       @(R0,R15),R3
    00000804 900C                   MOV.W       L943+2,R0  ; H'04EC
    00000806 02FE                   MOV.L       @(R0,R15),R2
    00000808 5337                   MOV.L       @(28,R3),R3
    0000080A 6123                   MOV         R2,R1
    0000080C 4200                   SHLL        R2
    0000080E 321C                   ADD         R1,R2
    00000810 4208                   SHLL2       R2
    00000812 4200                   SHLL        R2
    00000814 323C                   ADD         R3,R2
    00000816 5123                   MOV.L       @(12,R2),R1
    00000818 71FF                   ADD         #-1,R1
    0000081A A035                   BRA         L624
    0000081C 1213                   MOV.L       R1,@(12,R2)
    0000081E              L943:                             
    0000081E 04F0                   .DATA.W     H'04F0
    00000820 04EC                   .DATA.W     H'04EC
    00000822 0000                   .DATA.W     0
    00000824 <00000000>             .DATA.L     __divls
    00000828 <00000000>             .DATA.L     __modls
    0000082C              L517:                            ; case label 
          game.c   116                                            case W_RIGHT: level->wall[i].x++; break;
    0000082C 9074                   MOV.W       L945,R0    ; H'04F0
    0000082E 02FE                   MOV.L       @(R0,R15),R2
    00000830 9073                   MOV.W       L945+2,R0  ; H'04EC
    00000832 03FE                   MOV.L       @(R0,R15),R3
    00000834 5227                   MOV.L       @(28,R2),R2
    00000836 6133                   MOV         R3,R1
    00000838 4300                   SHLL        R3
    0000083A 331C                   ADD         R1,R3
    0000083C 4308                   SHLL2       R3
    0000083E 4300                   SHLL        R3
    00000840 332C                   ADD         R2,R3
    00000842 5133                   MOV.L       @(12,R3),R1
    00000844 7101                   ADD         #1,R1
    00000846 1313                   MOV.L       R1,@(12,R3)
    00000848 A01E                   BRA         L624
    0000084A 0009                   NOP
    0000084C              L518:                            ; case label 
          game.c   117                                            case W_UP: level->wall[i].y--; break;
    0000084C 9064                   MOV.W       L945,R0    ; H'04F0
    0000084E 02FE                   MOV.L       @(R0,R15),R2
    00000850 9063                   MOV.W       L945+2,R0  ; H'04EC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000852 03FE                   MOV.L       @(R0,R15),R3
    00000854 5227                   MOV.L       @(28,R2),R2
    00000856 6133                   MOV         R3,R1
    00000858 4300                   SHLL        R3
    0000085A 331C                   ADD         R1,R3
    0000085C 4308                   SHLL2       R3
    0000085E 4300                   SHLL        R3
    00000860 332C                   ADD         R2,R3
    00000862 5134                   MOV.L       @(16,R3),R1
    00000864 71FF                   ADD         #-1,R1
    00000866 1314                   MOV.L       R1,@(16,R3)
    00000868 A00E                   BRA         L624
    0000086A 0009                   NOP
    0000086C              L519:                            ; case label 
          game.c   118                                            case W_DOWN: level->wall[i].y++; break;
    0000086C 9054                   MOV.W       L945,R0    ; H'04F0
    0000086E 02FE                   MOV.L       @(R0,R15),R2
    00000870 9053                   MOV.W       L945+2,R0  ; H'04EC
    00000872 03FE                   MOV.L       @(R0,R15),R3
    00000874 5227                   MOV.L       @(28,R2),R2
    00000876 6133                   MOV         R3,R1
    00000878 4300                   SHLL        R3
    0000087A 331C                   ADD         R1,R3
    0000087C 4308                   SHLL2       R3
    0000087E 4300                   SHLL        R3
    00000880 332C                   ADD         R2,R3
    00000882 5134                   MOV.L       @(16,R3),R1
    00000884 7101                   ADD         #1,R1
    00000886 1314                   MOV.L       R1,@(16,R3)
    00000888              L624:                             
    00000888 9047                   MOV.W       L945+2,R0  ; H'04EC
    0000088A 02FE                   MOV.L       @(R0,R15),R2
    0000088C 9045                   MOV.W       L945+2,R0  ; H'04EC
    0000088E 7201                   ADD         #1,R2
    00000890 0F26                   MOV.L       R2,@(R0,R15)
    00000892              L622:                             
    00000892 9041                   MOV.W       L945,R0    ; H'04F0
    00000894 03FE                   MOV.L       @(R0,R15),R3
    00000896 5238                   MOV.L       @(32,R3),R2
    00000898 903F                   MOV.W       L945+2,R0  ; H'04EC
    0000089A 01FE                   MOV.L       @(R0,R15),R1
    0000089C 3123                   CMP/GE      R2,R1
    0000089E 8B99                   BF          L623
    000008A0              L621:                             
          game.c   119                                    }
          game.c   120                            }
          game.c   121                    }
          game.c   122                    
          game.c   123                    /** Bullets **/
          game.c   124                    for(i=0 ; i<nb_bullets ; i++)
    000008A0 903B                   MOV.W       L945+2,R0  ; H'04EC
    000008A2 E300                   MOV         #0,R3
    000008A4 A02B                   BRA         L625
    000008A6 0F36                   MOV.L       R3,@(R0,R15)
    000008A8              L626:                             
          game.c   125                    {
          game.c   126                            bullet[i].x += bullet[i].dx;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008A8 9037                   MOV.W       L945+2,R0  ; H'04EC
    000008AA 01FE                   MOV.L       @(R0,R15),R1
    000008AC 9236                   MOV.W       L945+4,R2  ; H'0220
    000008AE 6313                   MOV         R1,R3
    000008B0 9033                   MOV.W       L945+2,R0  ; H'04EC
    000008B2 32FC                   ADD         R15,R2
    000008B4 4108                   SHLL2       R1
    000008B6 313C                   ADD         R3,R1
    000008B8 03FE                   MOV.L       @(R0,R15),R3
    000008BA 4108                   SHLL2       R1
    000008BC 312C                   ADD         R2,R1
    000008BE 6033                   MOV         R3,R0
    000008C0 4308                   SHLL2       R3
    000008C2 330C                   ADD         R0,R3
    000008C4 6012                   MOV.L       @R1,R0
    000008C6 4308                   SHLL2       R3
    000008C8 332C                   ADD         R2,R3
    000008CA 5332                   MOV.L       @(8,R3),R3
    000008CC 303C                   ADD         R3,R0
    000008CE 2102                   MOV.L       R0,@R1
          game.c   127                            bullet[i].y += bullet[i].dy;
    000008D0 9023                   MOV.W       L945+2,R0  ; H'04EC
    000008D2 01FE                   MOV.L       @(R0,R15),R1
    000008D4 9021                   MOV.W       L945+2,R0  ; H'04EC
    000008D6 6313                   MOV         R1,R3
    000008D8 4108                   SHLL2       R1
    000008DA 313C                   ADD         R3,R1
    000008DC 03FE                   MOV.L       @(R0,R15),R3
    000008DE 4108                   SHLL2       R1
    000008E0 312C                   ADD         R2,R1
    000008E2 6033                   MOV         R3,R0
    000008E4 4308                   SHLL2       R3
    000008E6 330C                   ADD         R0,R3
    000008E8 5011                   MOV.L       @(4,R1),R0
    000008EA 4308                   SHLL2       R3
    000008EC 332C                   ADD         R2,R3
    000008EE 5333                   MOV.L       @(12,R3),R3
    000008F0 303C                   ADD         R3,R0
    000008F2 1101                   MOV.L       R0,@(4,R1)
    000008F4 9011                   MOV.W       L945+2,R0  ; H'04EC
    000008F6 01FE                   MOV.L       @(R0,R15),R1
    000008F8 900F                   MOV.W       L945+2,R0  ; H'04EC
    000008FA 7101                   ADD         #1,R1
    000008FC 0F16                   MOV.L       R1,@(R0,R15)
    000008FE              L625:                             
    000008FE 53F7                   MOV.L       @(28,R15),R3
    00000900 900B                   MOV.W       L945+2,R0  ; H'04EC
    00000902 02FE                   MOV.L       @(R0,R15),R2
    00000904 3233                   CMP/GE      R3,R2
    00000906 8BCF                   BF          L626
          game.c   128                    }
          game.c   129                    
          game.c   130                    /** Stones **/
          game.c   131                    stone_dx_sleep = (stone_dx_sleep+1)%TIME_STONE_DX_SLEEP;
    00000908 51F5                   MOV.L       @(20,R15),R1
    0000090A 7101                   ADD         #1,R1
    0000090C D304                   MOV.L       L945+8,R3  ; __modls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000090E 430B                   JSR         @R3
    00000910 E014                   MOV         #20,R0
    00000912 1F05                   MOV.L       R0,@(20,R15)
          game.c   132                    for(i=0 ; i<nb_stones ; i++)
    00000914 A0B4                   BRA         L915
    00000916 E300                   MOV         #0,R3
    00000918              L945:                             
    00000918 04F0                   .DATA.W     H'04F0
    0000091A 04EC                   .DATA.W     H'04EC
    0000091C 0220                   .DATA.W     H'0220
    0000091E 0000                   .DATA.W     0
    00000920 <00000000>             .DATA.L     __modls
    00000924              L628:                             
          game.c   133                    {
          game.c   134                            if(stone[i].dx)
    00000924 906F                   MOV.W       L946,R0    ; H'04EC
    00000926 63F3                   MOV         R15,R3
    00000928 01FE                   MOV.L       @(R0,R15),R1
    0000092A 7320                   ADD         #32,R3
    0000092C 4108                   SHLL2       R1
    0000092E 4108                   SHLL2       R1
    00000930 313C                   ADD         R3,R1
    00000932 5212                   MOV.L       @(8,R1),R2
    00000934 2228                   TST         R2,R2
    00000936 897A                   BT          L629
          game.c   135                            {
          game.c   136                                    if(stone_dx_sleep%(TIME_STONE_DX_SLEEP/abs(stone[i].dx))==0 && level->map[
                         +stone[i].y/8*level->width+(stone[i].x+1+2*sng(stone[i].dx))/8] != WALL)
    00000938 9065                   MOV.W       L946,R0    ; H'04EC
    0000093A 04FE                   MOV.L       @(R0,R15),R4
    0000093C D233                   MOV.L       L946+6,R2  ; _abs
    0000093E 4408                   SHLL2       R4
    00000940 4408                   SHLL2       R4
    00000942 343C                   ADD         R3,R4
    00000944 420B                   JSR         @R2
    00000946 5442                   MOV.L       @(8,R4),R4
    00000948 D331                   MOV.L       L946+10,R3 ; __divls
    0000094A 430B                   JSR         @R3
    0000094C E114                   MOV         #20,R1
    0000094E D231                   MOV.L       L946+14,R2 ; __modls
    00000950 420B                   JSR         @R2
    00000952 51F5                   MOV.L       @(20,R15),R1
    00000954 2008                   TST         R0,R0
    00000956 8B6A                   BF          L629
    00000958 9056                   MOV.W       L946+2,R0  ; H'04F0
    0000095A 62F3                   MOV         R15,R2
    0000095C 9153                   MOV.W       L946,R1    ; H'04EC
    0000095E 7220                   ADD         #32,R2
    00000960 31FC                   ADD         R15,R1
    00000962 6312                   MOV.L       @R1,R3
    00000964 4308                   SHLL2       R3
    00000966 4308                   SHLL2       R3
    00000968 332C                   ADD         R2,R3
    0000096A 5331                   MOV.L       @(4,R3),R3
    0000096C 4311                   CMP/PZ      R3
    0000096E 8D01                   BT/S        L631
    00000970 00FE                   MOV.L       @(R0,R15),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000972 7307                   ADD         #7,R3
    00000974              L631:                             
    00000974 9148                   MOV.W       L946+2,R1  ; H'04F0
    00000976 68F3                   MOV         R15,R8
    00000978 4321                   SHAR        R3
    0000097A 4321                   SHAR        R3
    0000097C 4321                   SHAR        R3
    0000097E 31FC                   ADD         R15,R1
    00000980 6112                   MOV.L       @R1,R1
    00000982 7820                   ADD         #32,R8
    00000984 5213                   MOV.L       @(12,R1),R2
    00000986 0327                   MUL.L       R2,R3
    00000988 913D                   MOV.W       L946,R1    ; H'04EC
    0000098A 62F3                   MOV         R15,R2
    0000098C 31FC                   ADD         R15,R1
    0000098E 7220                   ADD         #32,R2
    00000990 6112                   MOV.L       @R1,R1
    00000992 4108                   SHLL2       R1
    00000994 4108                   SHLL2       R1
    00000996 312C                   ADD         R2,R1
    00000998 9235                   MOV.W       L946,R2    ; H'04EC
    0000099A 32FC                   ADD         R15,R2
    0000099C 6222                   MOV.L       @R2,R2
    0000099E 4208                   SHLL2       R2
    000009A0 4208                   SHLL2       R2
    000009A2 328C                   ADD         R8,R2
    000009A4 5222                   MOV.L       @(8,R2),R2
    000009A6 4211                   CMP/PZ      R2
    000009A8 8D02                   BT/S        L632
    000009AA 031A                   STS         MACL,R3
    000009AC A00B                   BRA         L635
    000009AE E2FF                   MOV         #-1,R2
    000009B0              L632:                             
    000009B0 9229                   MOV.W       L946,R2    ; H'04EC
    000009B2 68F3                   MOV         R15,R8
    000009B4 32FC                   ADD         R15,R2
    000009B6 7820                   ADD         #32,R8
    000009B8 6222                   MOV.L       @R2,R2
    000009BA 4208                   SHLL2       R2
    000009BC 4208                   SHLL2       R2
    000009BE 328C                   ADD         R8,R2
    000009C0 5222                   MOV.L       @(8,R2),R2
    000009C2 4215                   CMP/PL      R2
    000009C4 0229                   MOVT        R2
    000009C6              L635:                             
    000009C6 4200                   SHLL        R2
    000009C8 6112                   MOV.L       @R1,R1
    000009CA 321C                   ADD         R1,R2
    000009CC 7201                   ADD         #1,R2
    000009CE 4211                   CMP/PZ      R2
    000009D0 8900                   BT          L634
    000009D2 7207                   ADD         #7,R2
    000009D4              L634:                             
    000009D4 5002                   MOV.L       @(8,R0),R0
    000009D6 4221                   SHAR        R2
    000009D8 4221                   SHAR        R2
    000009DA 4221                   SHAR        R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009DC 332C                   ADD         R2,R3
    000009DE 003C                   MOV.B       @(R0,R3),R0
    000009E0 8801                   CMP/EQ      #1,R0
    000009E2 8924                   BT          L629
          game.c   137                                            stone[i].x += sng(stone[i].dx);
    000009E4 900F                   MOV.W       L946,R0    ; H'04EC
    000009E6 63F3                   MOV         R15,R3
    000009E8 02FE                   MOV.L       @(R0,R15),R2
    000009EA 7320                   ADD         #32,R3
    000009EC 900B                   MOV.W       L946,R0    ; H'04EC
    000009EE 4208                   SHLL2       R2
    000009F0 00FE                   MOV.L       @(R0,R15),R0
    000009F2 4208                   SHLL2       R2
    000009F4 4008                   SHLL2       R0
    000009F6 4008                   SHLL2       R0
    000009F8 303C                   ADD         R3,R0
    000009FA 5102                   MOV.L       @(8,R0),R1
    000009FC 4111                   CMP/PZ      R1
    000009FE 8D0B                   BT/S        L637
    00000A00 323C                   ADD         R3,R2
    00000A02 A011                   BRA         L639
    00000A04 E1FF                   MOV         #-1,R1
    00000A06              L946:                             
    00000A06 04EC                   .DATA.W     H'04EC
    00000A08 04F0                   .DATA.W     H'04F0
    00000A0A 0000                   .DATA.W     0
    00000A0C <00000000>             .DATA.L     _abs
    00000A10 <00000000>             .DATA.L     __divls
    00000A14 <00000000>             .DATA.L     __modls
    00000A18              L637:                             
    00000A18 9087                   MOV.W       L947,R0    ; H'04EC
    00000A1A 01FE                   MOV.L       @(R0,R15),R1
    00000A1C 4108                   SHLL2       R1
    00000A1E 4108                   SHLL2       R1
    00000A20 313C                   ADD         R3,R1
    00000A22 5112                   MOV.L       @(8,R1),R1
    00000A24 4115                   CMP/PL      R1
    00000A26 0129                   MOVT        R1
    00000A28              L639:                             
    00000A28 6322                   MOV.L       @R2,R3
    00000A2A 331C                   ADD         R1,R3
    00000A2C 2232                   MOV.L       R3,@R2
    00000A2E              L629:                             
          game.c   138                            }
          game.c   139                            stone[i].y += stone[i].dy/6;
    00000A2E 63F3                   MOV         R15,R3
    00000A30 907B                   MOV.W       L947,R0    ; H'04EC
    00000A32 7320                   ADD         #32,R3
    00000A34 02FE                   MOV.L       @(R0,R15),R2
    00000A36 4208                   SHLL2       R2
    00000A38 9077                   MOV.W       L947,R0    ; H'04EC
    00000A3A 4208                   SHLL2       R2
    00000A3C 01FE                   MOV.L       @(R0,R15),R1
    00000A3E 323C                   ADD         R3,R2
    00000A40 4108                   SHLL2       R1
    00000A42 4108                   SHLL2       R1
    00000A44 313C                   ADD         R3,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A46 5113                   MOV.L       @(12,R1),R1
    00000A48 D339                   MOV.L       L947+6,R3  ; __divls
    00000A4A 430B                   JSR         @R3
    00000A4C E006                   MOV         #6,R0
    00000A4E 5121                   MOV.L       @(4,R2),R1
    00000A50 310C                   ADD         R0,R1
    00000A52 1211                   MOV.L       R1,@(4,R2)
          game.c   140                            if(stone[i].dy < FALLING_MAX_SPEED*4) stone[i].dy++;
    00000A54 9069                   MOV.W       L947,R0    ; H'04EC
    00000A56 62F3                   MOV         R15,R2
    00000A58 03FE                   MOV.L       @(R0,R15),R3
    00000A5A E114                   MOV         #20,R1
    00000A5C 4308                   SHLL2       R3
    00000A5E 4308                   SHLL2       R3
    00000A60 7220                   ADD         #32,R2
    00000A62 332C                   ADD         R2,R3
    00000A64 5033                   MOV.L       @(12,R3),R0
    00000A66 3013                   CMP/GE      R1,R0
    00000A68 8907                   BT          L641
    00000A6A 905E                   MOV.W       L947,R0    ; H'04EC
    00000A6C 03FE                   MOV.L       @(R0,R15),R3
    00000A6E 4308                   SHLL2       R3
    00000A70 4308                   SHLL2       R3
    00000A72 332C                   ADD         R2,R3
    00000A74 5033                   MOV.L       @(12,R3),R0
    00000A76 7001                   ADD         #1,R0
    00000A78 1303                   MOV.L       R0,@(12,R3)
    00000A7A              L641:                             
    00000A7A 9056                   MOV.W       L947,R0    ; H'04EC
    00000A7C 03FE                   MOV.L       @(R0,R15),R3
    00000A7E 7301                   ADD         #1,R3
    00000A80              L915:                             
    00000A80 9053                   MOV.W       L947,R0    ; H'04EC
    00000A82 6133                   MOV         R3,R1
    00000A84 0F36                   MOV.L       R3,@(R0,R15)
    00000A86 52F6                   MOV.L       @(24,R15),R2
    00000A88 3123                   CMP/GE      R2,R1
    00000A8A 8901                   BT          L948
    00000A8C AF4A                   BRA         L628
    00000A8E 0009                   NOP
    00000A90              L948:                             
          game.c   141                    }
          game.c   142                    
          game.c   143                    /** Throwers **/
          game.c   144                    thrower_sleep = (thrower_sleep+1)%TIME_THROWER_SLEEP;
    00000A90 50F4                   MOV.L       @(16,R15),R0
    00000A92 7001                   ADD         #1,R0
    00000A94 4011                   CMP/PZ      R0
    00000A96 8B01                   BF          L642
    00000A98 A005                   BRA         L643
    00000A9A C907                   AND         #7,R0
    00000A9C              L642:                             
    00000A9C 6007                   NOT         R0,R0
    00000A9E 7001                   ADD         #1,R0
    00000AA0 C907                   AND         #7,R0
    00000AA2 6007                   NOT         R0,R0
    00000AA4 7001                   ADD         #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AA6              L643:                             
          game.c   145                    if(thrower_sleep == 0)
    00000AA6 2008                   TST         R0,R0
    00000AA8 8D02                   BT/S        L949
    00000AAA 1F04                   MOV.L       R0,@(16,R15)
    00000AAC A16D                   BRA         L644
    00000AAE 0009                   NOP
    00000AB0              L949:                             
          game.c   146                    {
          game.c   147                            thrower_freq_pos = (thrower_freq_pos+1)%SIZE_FREQ_ARRAY;
    00000AB0 50F3                   MOV.L       @(12,R15),R0
    00000AB2 7001                   ADD         #1,R0
    00000AB4 4011                   CMP/PZ      R0
    00000AB6 8B01                   BF          L645
    00000AB8 A005                   BRA         L646
    00000ABA C90F                   AND         #15,R0
    00000ABC              L645:                             
    00000ABC 6007                   NOT         R0,R0
    00000ABE 7001                   ADD         #1,R0
    00000AC0 C90F                   AND         #15,R0
    00000AC2 6007                   NOT         R0,R0
    00000AC4 7001                   ADD         #1,R0
    00000AC6              L646:                             
          game.c   148                            for(i=0 ; i<level->nb_throwers ; i++)
    00000AC6 E300                   MOV         #0,R3
    00000AC8 1F03                   MOV.L       R0,@(12,R15)
    00000ACA 902E                   MOV.W       L947,R0    ; H'04EC
    00000ACC A154                   BRA         L647
    00000ACE 0F36                   MOV.L       R3,@(R0,R15)
    00000AD0              L648:                             
          game.c   149                            {
          game.c   150                                    if(level->thrower[i].freq[thrower_freq_pos])
    00000AD0 902C                   MOV.W       L947+2,R0  ; H'04F0
    00000AD2 00FE                   MOV.L       @(R0,R15),R0
    00000AD4 9129                   MOV.W       L947,R1    ; H'04EC
    00000AD6 31FC                   ADD         R15,R1
    00000AD8 6312                   MOV.L       @R1,R3
    00000ADA 4308                   SHLL2       R3
    00000ADC 500B                   MOV.L       @(44,R0),R0
    00000ADE 4308                   SHLL2       R3
    00000AE0 4300                   SHLL        R3
    00000AE2 303C                   ADD         R3,R0
    00000AE4 53F3                   MOV.L       @(12,R15),R3
    00000AE6 6203                   MOV         R0,R2
    00000AE8 7210                   ADD         #16,R2
    00000AEA 323C                   ADD         R3,R2
    00000AEC 6020                   MOV.B       @R2,R0
    00000AEE 2008                   TST         R0,R0
    00000AF0 8B01                   BF          L950
    00000AF2 A13C                   BRA         L649
    00000AF4 0009                   NOP
    00000AF6              L950:                             
          game.c   151                                    {
          game.c   152                                            switch(level->thrower[i].type)
    00000AF6 9019                   MOV.W       L947+2,R0  ; H'04F0
    00000AF8 9117                   MOV.W       L947,R1    ; H'04EC
    00000AFA 00FE                   MOV.L       @(R0,R15),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AFC 31FC                   ADD         R15,R1
    00000AFE 6312                   MOV.L       @R1,R3
    00000B00 500B                   MOV.L       @(44,R0),R0
    00000B02 4308                   SHLL2       R3
    00000B04 4308                   SHLL2       R3
    00000B06 4300                   SHLL        R3
    00000B08 303C                   ADD         R3,R0
    00000B0A 5002                   MOV.L       @(8,R0),R0
    00000B0C 8800                   CMP/EQ      #0,R0
    00000B0E 8905                   BT          L520
    00000B10 8801                   CMP/EQ      #1,R0
    00000B12 8B01                   BF          L951
    00000B14 A0C6                   BRA         L525
    00000B16 0009                   NOP
    00000B18              L951:                             
    00000B18 A129                   BRA         L649
    00000B1A 0009                   NOP
    00000B1C              L520:                            ; case label 
          game.c   153                                            {
          game.c   154                                                    case T_BULLET:
          game.c   155                                                            if(nb_bullets == MAX_BULLETS)
    00000B1C 50F7                   MOV.L       @(28,R15),R0
    00000B1E 8820                   CMP/EQ      #32,R0
    00000B20 8B2C                   BF          L651
          game.c   156                                                            {
          game.c   157                                                                    for(j=0 ; j<MAX_BULLETS-1 ; j++)
    00000B22 E200                   MOV         #0,R2
    00000B24 9003                   MOV.W       L947+4,R0  ; H'04E8
    00000B26 A021                   BRA         L652
    00000B28 0F26                   MOV.L       R2,@(R0,R15)
    00000B2A              L947:                             
    00000B2A 04EC                   .DATA.W     H'04EC
    00000B2C 04F0                   .DATA.W     H'04F0
    00000B2E 04E8                   .DATA.W     H'04E8
    00000B30 <00000000>             .DATA.L     __divls
    00000B34              L653:                             
          game.c   158                                                                            bullet[j] = bullet[j+1];
    00000B34 90A1                   MOV.W       L952,R0    ; H'04E8
    00000B36 01FE                   MOV.L       @(R0,R15),R1
    00000B38 92A0                   MOV.W       L952+2,R2  ; H'0220
    00000B3A 6313                   MOV         R1,R3
    00000B3C 909D                   MOV.W       L952,R0    ; H'04E8
    00000B3E 32FC                   ADD         R15,R2
    00000B40 4108                   SHLL2       R1
    00000B42 313C                   ADD         R3,R1
    00000B44 4108                   SHLL2       R1
    00000B46 312C                   ADD         R2,R1
    00000B48 02FE                   MOV.L       @(R0,R15),R2
    00000B4A 6323                   MOV         R2,R3
    00000B4C 4208                   SHLL2       R2
    00000B4E 323C                   ADD         R3,R2
    00000B50 9394                   MOV.W       L952+2,R3  ; H'0220
    00000B52 4208                   SHLL2       R2
    00000B54 33FC                   ADD         R15,R3
    00000B56 323C                   ADD         R3,R2
    00000B58 D34A                   MOV.L       L952+10,R3 ; __quick_odd_mvn
    00000B5A 7214                   ADD         #20,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B5C 430B                   JSR         @R3
    00000B5E E014                   MOV         #20,R0
    00000B60 908B                   MOV.W       L952,R0    ; H'04E8
    00000B62 00FE                   MOV.L       @(R0,R15),R0
    00000B64 9189                   MOV.W       L952,R1    ; H'04E8
    00000B66 7001                   ADD         #1,R0
    00000B68 31FC                   ADD         R15,R1
    00000B6A 2102                   MOV.L       R0,@R1
    00000B6C              L652:                             
    00000B6C 9085                   MOV.W       L952,R0    ; H'04E8
    00000B6E E31F                   MOV         #31,R3
    00000B70 02FE                   MOV.L       @(R0,R15),R2
    00000B72 3233                   CMP/GE      R3,R2
    00000B74 8BDE                   BF          L653
          game.c   159                                                                    nb_bullets--;
    00000B76 53F7                   MOV.L       @(28,R15),R3
    00000B78 73FF                   ADD         #-1,R3
    00000B7A 1F37                   MOV.L       R3,@(28,R15)
    00000B7C              L651:                             
          game.c   160                                                            }
          game.c   161                                                            bullet[nb_bullets].direction = level->thrower[i].d
                         +irection;
    00000B7C 52F7                   MOV.L       @(28,R15),R2
    00000B7E 6323                   MOV         R2,R3
    00000B80 917C                   MOV.W       L952+2,R1  ; H'0220
    00000B82 4208                   SHLL2       R2
    00000B84 907B                   MOV.W       L952+4,R0  ; H'04F0
    00000B86 31FC                   ADD         R15,R1
    00000B88 323C                   ADD         R3,R2
    00000B8A 4208                   SHLL2       R2
    00000B8C 03FE                   MOV.L       @(R0,R15),R3
    00000B8E 321C                   ADD         R1,R2
    00000B90 9076                   MOV.W       L952+6,R0  ; H'04EC
    00000B92 00FE                   MOV.L       @(R0,R15),R0
    00000B94 533B                   MOV.L       @(44,R3),R3
    00000B96 4008                   SHLL2       R0
    00000B98 4008                   SHLL2       R0
    00000B9A 4000                   SHLL        R0
    00000B9C 303C                   ADD         R3,R0
    00000B9E 5303                   MOV.L       @(12,R0),R3
          game.c   162                                                            bullet[nb_bullets].x = level->thrower[i].x*8+3;
    00000BA0 906D                   MOV.W       L952+4,R0  ; H'04F0
    00000BA2 1234                   MOV.L       R3,@(16,R2)
    00000BA4 52F7                   MOV.L       @(28,R15),R2
    00000BA6 6323                   MOV         R2,R3
    00000BA8 4208                   SHLL2       R2
    00000BAA 323C                   ADD         R3,R2
    00000BAC 03FE                   MOV.L       @(R0,R15),R3
    00000BAE 4208                   SHLL2       R2
    00000BB0 9066                   MOV.W       L952+6,R0  ; H'04EC
    00000BB2 321C                   ADD         R1,R2
    00000BB4 00FE                   MOV.L       @(R0,R15),R0
    00000BB6 4008                   SHLL2       R0
    00000BB8 4008                   SHLL2       R0
    00000BBA 4000                   SHLL        R0
    00000BBC 533B                   MOV.L       @(44,R3),R3
    00000BBE 303C                   ADD         R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BC0 6302                   MOV.L       @R0,R3
    00000BC2 4308                   SHLL2       R3
          game.c   163                                                            bullet[nb_bullets].y = level->thrower[i].y*8+3;
    00000BC4 905B                   MOV.W       L952+4,R0  ; H'04F0
    00000BC6 4300                   SHLL        R3
    00000BC8 7303                   ADD         #3,R3
    00000BCA 2232                   MOV.L       R3,@R2
    00000BCC 52F7                   MOV.L       @(28,R15),R2
    00000BCE 6323                   MOV         R2,R3
    00000BD0 4208                   SHLL2       R2
    00000BD2 323C                   ADD         R3,R2
    00000BD4 03FE                   MOV.L       @(R0,R15),R3
    00000BD6 4208                   SHLL2       R2
    00000BD8 9052                   MOV.W       L952+6,R0  ; H'04EC
    00000BDA 321C                   ADD         R1,R2
    00000BDC 533B                   MOV.L       @(44,R3),R3
    00000BDE 00FE                   MOV.L       @(R0,R15),R0
    00000BE0 4008                   SHLL2       R0
    00000BE2 4008                   SHLL2       R0
    00000BE4 4000                   SHLL        R0
    00000BE6 303C                   ADD         R3,R0
    00000BE8 5301                   MOV.L       @(4,R0),R3
    00000BEA 4308                   SHLL2       R3
    00000BEC 4300                   SHLL        R3
    00000BEE 7303                   ADD         #3,R3
    00000BF0 1231                   MOV.L       R3,@(4,R2)
          game.c   164                                                            bullet[nb_bullets].dx = bullet[nb_bullets].dy = 0;
    00000BF2 52F7                   MOV.L       @(28,R15),R2
    00000BF4 6323                   MOV         R2,R3
    00000BF6 4208                   SHLL2       R2
    00000BF8 323C                   ADD         R3,R2
    00000BFA 4208                   SHLL2       R2
    00000BFC 53F7                   MOV.L       @(28,R15),R3
    00000BFE 321C                   ADD         R1,R2
    00000C00 6033                   MOV         R3,R0
    00000C02 4308                   SHLL2       R3
    00000C04 330C                   ADD         R0,R3
    00000C06 4308                   SHLL2       R3
    00000C08 331C                   ADD         R1,R3
    00000C0A E000                   MOV         #0,R0
    00000C0C 1303                   MOV.L       R0,@(12,R3)
    00000C0E 1202                   MOV.L       R0,@(8,R2)
          game.c   165                                                            switch(bullet[nb_bullets].direction)
    00000C10 50F7                   MOV.L       @(28,R15),R0
    00000C12 6303                   MOV         R0,R3
    00000C14 4008                   SHLL2       R0
    00000C16 303C                   ADD         R3,R0
    00000C18 4008                   SHLL2       R0
    00000C1A 301C                   ADD         R1,R0
    00000C1C 5004                   MOV.L       @(16,R0),R0
    00000C1E 8800                   CMP/EQ      #0,R0
    00000C20 8907                   BT          L521
    00000C22 8801                   CMP/EQ      #1,R0
    00000C24 8911                   BT          L522
    00000C26 8802                   CMP/EQ      #2,R0
    00000C28 891B                   BT          L523
    00000C2A 8803                   CMP/EQ      #3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C2C 892C                   BT          L524
    00000C2E A035                   BRA         L654
    00000C30 0009                   NOP
    00000C32              L521:                            ; case label 
          game.c   166                                                            {
          game.c   167                                                                    case T_LEFT:    bullet[nb_bullets].dx = -B
                         +ULLET_SPEED; break;
    00000C32 53F7                   MOV.L       @(28,R15),R3
    00000C34 9122                   MOV.W       L952+2,R1  ; H'0220
    00000C36 6233                   MOV         R3,R2
    00000C38 4308                   SHLL2       R3
    00000C3A 332C                   ADD         R2,R3
    00000C3C 4308                   SHLL2       R3
    00000C3E 31FC                   ADD         R15,R1
    00000C40 331C                   ADD         R1,R3
    00000C42 E2FA                   MOV         #-6,R2
    00000C44 1322                   MOV.L       R2,@(8,R3)
    00000C46 A029                   BRA         L654
    00000C48 0009                   NOP
    00000C4A              L522:                            ; case label 
          game.c   168                                                                    case T_RIGHT:   bullet[nb_bullets].dx = BU
                         +LLET_SPEED; break;
    00000C4A 51F7                   MOV.L       @(28,R15),R1
    00000C4C 9216                   MOV.W       L952+2,R2  ; H'0220
    00000C4E 6313                   MOV         R1,R3
    00000C50 4108                   SHLL2       R1
    00000C52 313C                   ADD         R3,R1
    00000C54 4108                   SHLL2       R1
    00000C56 32FC                   ADD         R15,R2
    00000C58 312C                   ADD         R2,R1
    00000C5A E306                   MOV         #6,R3
    00000C5C 1132                   MOV.L       R3,@(8,R1)
    00000C5E A01D                   BRA         L654
    00000C60 0009                   NOP
    00000C62              L523:                            ; case label 
          game.c   169                                                                    case T_UP:      bullet[nb_bullets].dy = -B
                         +ULLET_SPEED; break;
    00000C62 52F7                   MOV.L       @(28,R15),R2
    00000C64 910A                   MOV.W       L952+2,R1  ; H'0220
    00000C66 6323                   MOV         R2,R3
    00000C68 4208                   SHLL2       R2
    00000C6A 323C                   ADD         R3,R2
    00000C6C 4208                   SHLL2       R2
    00000C6E 31FC                   ADD         R15,R1
    00000C70 321C                   ADD         R1,R2
    00000C72 E3FA                   MOV         #-6,R3
    00000C74 1233                   MOV.L       R3,@(12,R2)
    00000C76 A011                   BRA         L654
    00000C78 0009                   NOP
    00000C7A              L952:                             
    00000C7A 04E8                   .DATA.W     H'04E8
    00000C7C 0220                   .DATA.W     H'0220
    00000C7E 04F0                   .DATA.W     H'04F0
    00000C80 04EC                   .DATA.W     H'04EC
    00000C82 0000                   .DATA.W     0
    00000C84 <00000000>             .DATA.L     __quick_odd_mvn
    00000C88              L524:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   170                                                                    case T_DOWN:    bullet[nb_bullets].dy = BU
                         +LLET_SPEED; break;
    00000C88 51F7                   MOV.L       @(28,R15),R1
    00000C8A 6313                   MOV         R1,R3
    00000C8C 9211                   MOV.W       L953,R2    ; H'0220
    00000C8E 4108                   SHLL2       R1
    00000C90 313C                   ADD         R3,R1
    00000C92 4108                   SHLL2       R1
    00000C94 32FC                   ADD         R15,R2
    00000C96 312C                   ADD         R2,R1
    00000C98 E306                   MOV         #6,R3
    00000C9A 1133                   MOV.L       R3,@(12,R1)
    00000C9C              L654:                             
          game.c   171                                                            }
          game.c   172                                                            nb_bullets++;
    00000C9C 52F7                   MOV.L       @(28,R15),R2
    00000C9E 7201                   ADD         #1,R2
          game.c   173                                                            break;
    00000CA0 A065                   BRA         L649
    00000CA2 1F27                   MOV.L       R2,@(28,R15)
    00000CA4              L525:                            ; case label 
          game.c   174                                                    case T_STONE:
          game.c   175                                                            if(nb_stones == MAX_STONES)
    00000CA4 50F6                   MOV.L       @(24,R15),R0
    00000CA6 8820                   CMP/EQ      #32,R0
    00000CA8 8B23                   BF          L655
          game.c   176                                                            {
          game.c   177                                                                    for(j=0 ; j<MAX_STONES-1 ; j++)
    00000CAA E200                   MOV         #0,R2
    00000CAC 9002                   MOV.W       L953+2,R0  ; H'04E8
    00000CAE A018                   BRA         L656
    00000CB0 0F26                   MOV.L       R2,@(R0,R15)
    00000CB2              L953:                             
    00000CB2 0220                   .DATA.W     H'0220
    00000CB4 04E8                   .DATA.W     H'04E8
    00000CB6              L657:                             
          game.c   178                                                                            stone[j] = stone[j+1];
    00000CB6 63F3                   MOV         R15,R3
    00000CB8 90B1                   MOV.W       L954,R0    ; H'04E8
    00000CBA 7320                   ADD         #32,R3
    00000CBC 01FE                   MOV.L       @(R0,R15),R1
    00000CBE 4108                   SHLL2       R1
    00000CC0 90AD                   MOV.W       L954,R0    ; H'04E8
    00000CC2 4108                   SHLL2       R1
    00000CC4 02FE                   MOV.L       @(R0,R15),R2
    00000CC6 313C                   ADD         R3,R1
    00000CC8 4208                   SHLL2       R2
    00000CCA 4208                   SHLL2       R2
    00000CCC 323C                   ADD         R3,R2
    00000CCE 7210                   ADD         #16,R2
    00000CD0 D356                   MOV.L       L954+14,R3 ; __quick_evn_mvn
    00000CD2 430B                   JSR         @R3
    00000CD4 E010                   MOV         #16,R0
    00000CD6 90A2                   MOV.W       L954,R0    ; H'04E8
    00000CD8 91A1                   MOV.W       L954,R1    ; H'04E8
    00000CDA 00FE                   MOV.L       @(R0,R15),R0
    00000CDC 7001                   ADD         #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CDE 31FC                   ADD         R15,R1
    00000CE0 2102                   MOV.L       R0,@R1
    00000CE2              L656:                             
    00000CE2 E31F                   MOV         #31,R3
    00000CE4 909B                   MOV.W       L954,R0    ; H'04E8
    00000CE6 02FE                   MOV.L       @(R0,R15),R2
    00000CE8 3233                   CMP/GE      R3,R2
    00000CEA 8BE4                   BF          L657
          game.c   179                                                                    nb_stones--;
    00000CEC 53F6                   MOV.L       @(24,R15),R3
    00000CEE 73FF                   ADD         #-1,R3
    00000CF0 1F36                   MOV.L       R3,@(24,R15)
    00000CF2              L655:                             
          game.c   180                                                            }
          game.c   181                                                            stone[nb_stones].x = level->thrower[i].x*8+2;
    00000CF2 63F3                   MOV         R15,R3
    00000CF4 9094                   MOV.W       L954+2,R0  ; H'04F0
    00000CF6 7320                   ADD         #32,R3
    00000CF8 52F6                   MOV.L       @(24,R15),R2
    00000CFA 4208                   SHLL2       R2
    00000CFC 01FE                   MOV.L       @(R0,R15),R1
    00000CFE 4208                   SHLL2       R2
    00000D00 908F                   MOV.W       L954+4,R0  ; H'04EC
    00000D02 323C                   ADD         R3,R2
    00000D04 511B                   MOV.L       @(44,R1),R1
    00000D06 00FE                   MOV.L       @(R0,R15),R0
    00000D08 4008                   SHLL2       R0
    00000D0A 4008                   SHLL2       R0
    00000D0C 4000                   SHLL        R0
    00000D0E 301C                   ADD         R1,R0
    00000D10 6102                   MOV.L       @R0,R1
    00000D12 4108                   SHLL2       R1
          game.c   182                                                            stone[nb_stones].y = level->thrower[i].y*8;
    00000D14 9084                   MOV.W       L954+2,R0  ; H'04F0
    00000D16 4100                   SHLL        R1
    00000D18 7102                   ADD         #2,R1
    00000D1A 2212                   MOV.L       R1,@R2
    00000D1C 52F6                   MOV.L       @(24,R15),R2
    00000D1E 4208                   SHLL2       R2
    00000D20 01FE                   MOV.L       @(R0,R15),R1
    00000D22 4208                   SHLL2       R2
    00000D24 907D                   MOV.W       L954+4,R0  ; H'04EC
    00000D26 323C                   ADD         R3,R2
    00000D28 00FE                   MOV.L       @(R0,R15),R0
    00000D2A 4008                   SHLL2       R0
    00000D2C 4008                   SHLL2       R0
    00000D2E 4000                   SHLL        R0
    00000D30 511B                   MOV.L       @(44,R1),R1
    00000D32 301C                   ADD         R1,R0
    00000D34 5101                   MOV.L       @(4,R0),R1
    00000D36 4108                   SHLL2       R1
    00000D38 4100                   SHLL        R1
    00000D3A 1211                   MOV.L       R1,@(4,R2)
          game.c   183                                                            stone[nb_stones].dx = rand()%9-4;
    00000D3C 52F6                   MOV.L       @(24,R15),R2
    00000D3E 4208                   SHLL2       R2
    00000D40 D13B                   MOV.L       L954+18,R1 ; _rand




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D42 4208                   SHLL2       R2
    00000D44 323C                   ADD         R3,R2
    00000D46 6823                   MOV         R2,R8
    00000D48 410B                   JSR         @R1
    00000D4A 7808                   ADD         #8,R8
    00000D4C D339                   MOV.L       L954+22,R3 ; __modls
    00000D4E 6103                   MOV         R0,R1
    00000D50 430B                   JSR         @R3
    00000D52 E009                   MOV         #9,R0
    00000D54 70FC                   ADD         #-4,R0
          game.c   184                                                            stone[nb_stones].dy = 0;
    00000D56 62F3                   MOV         R15,R2
    00000D58 2802                   MOV.L       R0,@R8
    00000D5A E100                   MOV         #0,R1
    00000D5C 53F6                   MOV.L       @(24,R15),R3
    00000D5E 7220                   ADD         #32,R2
    00000D60 4308                   SHLL2       R3
    00000D62 4308                   SHLL2       R3
    00000D64 332C                   ADD         R2,R3
    00000D66 1313                   MOV.L       R1,@(12,R3)
          game.c   185                                                            nb_stones++;
    00000D68 53F6                   MOV.L       @(24,R15),R3
    00000D6A 7301                   ADD         #1,R3
    00000D6C 1F36                   MOV.L       R3,@(24,R15)
          game.c   186                                                            break;
    00000D6E              L649:                             
    00000D6E 9058                   MOV.W       L954+4,R0  ; H'04EC
    00000D70 02FE                   MOV.L       @(R0,R15),R2
    00000D72 7201                   ADD         #1,R2
    00000D74 9055                   MOV.W       L954+4,R0  ; H'04EC
    00000D76 0F26                   MOV.L       R2,@(R0,R15)
    00000D78              L647:                             
    00000D78 9052                   MOV.W       L954+2,R0  ; H'04F0
    00000D7A 03FE                   MOV.L       @(R0,R15),R3
    00000D7C 9051                   MOV.W       L954+4,R0  ; H'04EC
    00000D7E 523C                   MOV.L       @(48,R3),R2
    00000D80 01FE                   MOV.L       @(R0,R15),R1
    00000D82 3123                   CMP/GE      R2,R1
    00000D84 8901                   BT          L955
    00000D86 AEA3                   BRA         L648
    00000D88 0009                   NOP
    00000D8A              L955:                             
    00000D8A              L644:                             
          game.c   187                                            }
          game.c   188                                    }
          game.c   189                            }
          game.c   190                    }
          game.c   191    
          game.c   192    /** Collisions **/
          game.c   193                    if(!dead)
    00000D8A 904B                   MOV.W       L954+6,R0  ; H'04E2
    00000D8C 03FC                   MOV.B       @(R0,R15),R3
    00000D8E 2338                   TST         R3,R3
    00000D90 8902                   BT          L956
    00000D92 D329                   MOV.L       L954+26,R3 ; L658
    00000D94 432B                   JMP         @R3
    00000D96 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D98              L956:                             
          game.c   194                    {
          game.c   195                            /** Orton & Princess **/
          game.c   196                            if(level->map[(orton.y+1)/8*level->width+(orton.x+1)/8] == GOAL ||
          game.c   197                               level->map[(orton.y+1)/8*level->width+(orton.x+6)/8] == GOAL ||
          game.c   198                               level->map[(orton.y+6)/8*level->width+(orton.x+1)/8] == GOAL ||
          game.c   199                               level->map[(orton.y+6)/8*level->width+(orton.x+6)/8] == GOAL)
    00000D98 9042                   MOV.W       L954+2,R0  ; H'04F0
    00000D9A 9144                   MOV.W       L954+8,R1  ; H'04C8
    00000D9C 31FC                   ADD         R15,R1
    00000D9E 6312                   MOV.L       @R1,R3
    00000DA0 7301                   ADD         #1,R3
    00000DA2 4311                   CMP/PZ      R3
    00000DA4 8D01                   BT/S        L661
    00000DA6 00FE                   MOV.L       @(R0,R15),R0
    00000DA8 7307                   ADD         #7,R3
    00000DAA              L661:                             
    00000DAA 4321                   SHAR        R3
    00000DAC 9138                   MOV.W       L954+2,R1  ; H'04F0
    00000DAE 4321                   SHAR        R3
    00000DB0 4321                   SHAR        R3
    00000DB2 31FC                   ADD         R15,R1
    00000DB4 6112                   MOV.L       @R1,R1
    00000DB6 5213                   MOV.L       @(12,R1),R2
    00000DB8 9136                   MOV.W       L954+10,R1 ; H'04C4
    00000DBA 0327                   MUL.L       R2,R3
    00000DBC 31FC                   ADD         R15,R1
    00000DBE 6112                   MOV.L       @R1,R1
    00000DC0 7101                   ADD         #1,R1
    00000DC2 4111                   CMP/PZ      R1
    00000DC4 8D01                   BT/S        L662
    00000DC6 031A                   STS         MACL,R3
    00000DC8 7107                   ADD         #7,R1
    00000DCA              L662:                             
    00000DCA 4121                   SHAR        R1
    00000DCC 5002                   MOV.L       @(8,R0),R0
    00000DCE 4121                   SHAR        R1
    00000DD0 4121                   SHAR        R1
    00000DD2 331C                   ADD         R1,R3
    00000DD4 003C                   MOV.B       @(R0,R3),R0
    00000DD6 880C                   CMP/EQ      #12,R0
    00000DD8 8973                   BT          L660
    00000DDA 9021                   MOV.W       L954+2,R0  ; H'04F0
    00000DDC 9123                   MOV.W       L954+8,R1  ; H'04C8
    00000DDE 31FC                   ADD         R15,R1
    00000DE0 6312                   MOV.L       @R1,R3
    00000DE2 7301                   ADD         #1,R3
    00000DE4 4311                   CMP/PZ      R3
    00000DE6 8D01                   BT/S        L663
    00000DE8 00FE                   MOV.L       @(R0,R15),R0
    00000DEA 7307                   ADD         #7,R3
    00000DEC              L663:                             
    00000DEC 9118                   MOV.W       L954+2,R1  ; H'04F0
    00000DEE 4321                   SHAR        R3
    00000DF0 4321                   SHAR        R3
    00000DF2 4321                   SHAR        R3
    00000DF4 31FC                   ADD         R15,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DF6 6112                   MOV.L       @R1,R1
    00000DF8 5213                   MOV.L       @(12,R1),R2
    00000DFA 0327                   MUL.L       R2,R3
    00000DFC 9114                   MOV.W       L954+10,R1 ; H'04C4
    00000DFE 31FC                   ADD         R15,R1
    00000E00 6112                   MOV.L       @R1,R1
    00000E02 7106                   ADD         #6,R1
    00000E04 4111                   CMP/PZ      R1
    00000E06 8D01                   BT/S        L664
    00000E08 031A                   STS         MACL,R3
    00000E0A 7107                   ADD         #7,R1
    00000E0C              L664:                             
    00000E0C 5002                   MOV.L       @(8,R0),R0
    00000E0E 4121                   SHAR        R1
    00000E10 4121                   SHAR        R1
    00000E12 4121                   SHAR        R1
    00000E14 331C                   ADD         R1,R3
    00000E16 003C                   MOV.B       @(R0,R3),R0
    00000E18 880C                   CMP/EQ      #12,R0
    00000E1A A00F                   BRA         L927
    00000E1C 0009                   NOP
    00000E1E              L954:                             
    00000E1E 04E8                   .DATA.W     H'04E8
    00000E20 04F0                   .DATA.W     H'04F0
    00000E22 04EC                   .DATA.W     H'04EC
    00000E24 04E2                   .DATA.W     H'04E2
    00000E26 04C8                   .DATA.W     H'04C8
    00000E28 04C4                   .DATA.W     H'04C4
    00000E2A 0000                   .DATA.W     0
    00000E2C <00000000>             .DATA.L     __quick_evn_mvn
    00000E30 <00000000>             .DATA.L     _rand
    00000E34 <00000000>             .DATA.L     __modls
    00000E38 <00000000>             .DATA.L     L658
    00000E3C              L927:                             
    00000E3C 8941                   BT          L660
    00000E3E 9098                   MOV.W       L957,R0    ; H'04F0
    00000E40 9198                   MOV.W       L957+2,R1  ; H'04C8
    00000E42 31FC                   ADD         R15,R1
    00000E44 6312                   MOV.L       @R1,R3
    00000E46 7306                   ADD         #6,R3
    00000E48 4311                   CMP/PZ      R3
    00000E4A 8D01                   BT/S        L665
    00000E4C 00FE                   MOV.L       @(R0,R15),R0
    00000E4E 7307                   ADD         #7,R3
    00000E50              L665:                             
    00000E50 918F                   MOV.W       L957,R1    ; H'04F0
    00000E52 4321                   SHAR        R3
    00000E54 4321                   SHAR        R3
    00000E56 4321                   SHAR        R3
    00000E58 31FC                   ADD         R15,R1
    00000E5A 6112                   MOV.L       @R1,R1
    00000E5C 5213                   MOV.L       @(12,R1),R2
    00000E5E 0327                   MUL.L       R2,R3
    00000E60 9189                   MOV.W       L957+4,R1  ; H'04C4
    00000E62 31FC                   ADD         R15,R1
    00000E64 6112                   MOV.L       @R1,R1
    00000E66 7101                   ADD         #1,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E68 4111                   CMP/PZ      R1
    00000E6A 8D01                   BT/S        L666
    00000E6C 031A                   STS         MACL,R3
    00000E6E 7107                   ADD         #7,R1
    00000E70              L666:                             
    00000E70 5002                   MOV.L       @(8,R0),R0
    00000E72 4121                   SHAR        R1
    00000E74 4121                   SHAR        R1
    00000E76 4121                   SHAR        R1
    00000E78 331C                   ADD         R1,R3
    00000E7A 003C                   MOV.B       @(R0,R3),R0
    00000E7C 880C                   CMP/EQ      #12,R0
    00000E7E 8920                   BT          L660
    00000E80 9077                   MOV.W       L957,R0    ; H'04F0
    00000E82 9177                   MOV.W       L957+2,R1  ; H'04C8
    00000E84 31FC                   ADD         R15,R1
    00000E86 6312                   MOV.L       @R1,R3
    00000E88 7306                   ADD         #6,R3
    00000E8A 4311                   CMP/PZ      R3
    00000E8C 8D01                   BT/S        L667
    00000E8E 00FE                   MOV.L       @(R0,R15),R0
    00000E90 7307                   ADD         #7,R3
    00000E92              L667:                             
    00000E92 4321                   SHAR        R3
    00000E94 916D                   MOV.W       L957,R1    ; H'04F0
    00000E96 4321                   SHAR        R3
    00000E98 4321                   SHAR        R3
    00000E9A 31FC                   ADD         R15,R1
    00000E9C 6112                   MOV.L       @R1,R1
    00000E9E 5213                   MOV.L       @(12,R1),R2
    00000EA0 9169                   MOV.W       L957+4,R1  ; H'04C4
    00000EA2 0327                   MUL.L       R2,R3
    00000EA4 31FC                   ADD         R15,R1
    00000EA6 6112                   MOV.L       @R1,R1
    00000EA8 7106                   ADD         #6,R1
    00000EAA 4111                   CMP/PZ      R1
    00000EAC 8D01                   BT/S        L668
    00000EAE 031A                   STS         MACL,R3
    00000EB0 7107                   ADD         #7,R1
    00000EB2              L668:                             
    00000EB2 4121                   SHAR        R1
    00000EB4 5002                   MOV.L       @(8,R0),R0
    00000EB6 4121                   SHAR        R1
    00000EB8 4121                   SHAR        R1
    00000EBA 331C                   ADD         R1,R3
    00000EBC 003C                   MOV.B       @(R0,R3),R0
    00000EBE 880C                   CMP/EQ      #12,R0
    00000EC0 8B02                   BF          L659
    00000EC2              L660:                             
          game.c   200                                    run = 0;
    00000EC2 E200                   MOV         #0,R2
    00000EC4 9058                   MOV.W       L957+6,R0  ; H'04E3
    00000EC6 0F24                   MOV.B       R2,@(R0,R15)
    00000EC8              L659:                             
          game.c   201    
          game.c   202                            orton.can_jump = 0;
    00000EC8 9057                   MOV.W       L957+8,R0  ; H'04DC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000ECA E300                   MOV         #0,R3
          game.c   203                            /** Orton & ceiling **/
          game.c   204                            if(level->map[orton.y/8*level->width + (orton.x+1)/8]==WALL || level->map[orton.y/
                         +8*level->width + (orton.x+6)/8]==WALL)
    00000ECC 9152                   MOV.W       L957+2,R1  ; H'04C8
    00000ECE 0F34                   MOV.B       R3,@(R0,R15)
    00000ED0 904F                   MOV.W       L957,R0    ; H'04F0
    00000ED2 31FC                   ADD         R15,R1
    00000ED4 6312                   MOV.L       @R1,R3
    00000ED6 4311                   CMP/PZ      R3
    00000ED8 8D01                   BT/S        L671
    00000EDA 00FE                   MOV.L       @(R0,R15),R0
    00000EDC 7307                   ADD         #7,R3
    00000EDE              L671:                             
    00000EDE 4321                   SHAR        R3
    00000EE0 9147                   MOV.W       L957,R1    ; H'04F0
    00000EE2 4321                   SHAR        R3
    00000EE4 4321                   SHAR        R3
    00000EE6 31FC                   ADD         R15,R1
    00000EE8 6212                   MOV.L       @R1,R2
    00000EEA 5223                   MOV.L       @(12,R2),R2
    00000EEC 9143                   MOV.W       L957+4,R1  ; H'04C4
    00000EEE 0327                   MUL.L       R2,R3
    00000EF0 31FC                   ADD         R15,R1
    00000EF2 6112                   MOV.L       @R1,R1
    00000EF4 7101                   ADD         #1,R1
    00000EF6 4111                   CMP/PZ      R1
    00000EF8 8D01                   BT/S        L672
    00000EFA 031A                   STS         MACL,R3
    00000EFC 7107                   ADD         #7,R1
    00000EFE              L672:                             
    00000EFE 4121                   SHAR        R1
    00000F00 5002                   MOV.L       @(8,R0),R0
    00000F02 4121                   SHAR        R1
    00000F04 4121                   SHAR        R1
    00000F06 331C                   ADD         R1,R3
    00000F08 003C                   MOV.B       @(R0,R3),R0
    00000F0A 8801                   CMP/EQ      #1,R0
    00000F0C 891F                   BT          L670
    00000F0E 9030                   MOV.W       L957,R0    ; H'04F0
    00000F10 9130                   MOV.W       L957+2,R1  ; H'04C8
    00000F12 31FC                   ADD         R15,R1
    00000F14 6312                   MOV.L       @R1,R3
    00000F16 4311                   CMP/PZ      R3
    00000F18 8D01                   BT/S        L673
    00000F1A 00FE                   MOV.L       @(R0,R15),R0
    00000F1C 7307                   ADD         #7,R3
    00000F1E              L673:                             
    00000F1E 4321                   SHAR        R3
    00000F20 9127                   MOV.W       L957,R1    ; H'04F0
    00000F22 4321                   SHAR        R3
    00000F24 4321                   SHAR        R3
    00000F26 31FC                   ADD         R15,R1
    00000F28 6212                   MOV.L       @R1,R2
    00000F2A 5223                   MOV.L       @(12,R2),R2
    00000F2C 9123                   MOV.W       L957+4,R1  ; H'04C4
    00000F2E 0327                   MUL.L       R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F30 31FC                   ADD         R15,R1
    00000F32 6112                   MOV.L       @R1,R1
    00000F34 7106                   ADD         #6,R1
    00000F36 4111                   CMP/PZ      R1
    00000F38 8D01                   BT/S        L674
    00000F3A 031A                   STS         MACL,R3
    00000F3C 7107                   ADD         #7,R1
    00000F3E              L674:                             
    00000F3E 4121                   SHAR        R1
    00000F40 5002                   MOV.L       @(8,R0),R0
    00000F42 4121                   SHAR        R1
    00000F44 4121                   SHAR        R1
    00000F46 331C                   ADD         R1,R3
    00000F48 003C                   MOV.B       @(R0,R3),R0
    00000F4A 8801                   CMP/EQ      #1,R0
    00000F4C 8B1B                   BF          L669
    00000F4E              L670:                             
          game.c   205                            {
          game.c   206                                    orton.y = (orton.y>>3<<3)+8;
    00000F4E 9011                   MOV.W       L957+2,R0  ; H'04C8
    00000F50 02FE                   MOV.L       @(R0,R15),R2
    00000F52 4221                   SHAR        R2
    00000F54 900E                   MOV.W       L957+2,R0  ; H'04C8
    00000F56 4221                   SHAR        R2
    00000F58 4221                   SHAR        R2
    00000F5A 4208                   SHLL2       R2
    00000F5C 4200                   SHLL        R2
    00000F5E 7208                   ADD         #8,R2
    00000F60 0F26                   MOV.L       R2,@(R0,R15)
          game.c   207                                    if(orton.dy<0) orton.dy = 1;
    00000F62 900B                   MOV.W       L957+10,R0 ; H'04D0
    00000F64 03FE                   MOV.L       @(R0,R15),R3
    00000F66 4311                   CMP/PZ      R3
    00000F68 8B01                   BF          L958
    00000F6A A239                   BRA         L676
    00000F6C 0009                   NOP
    00000F6E              L958:                             
    00000F6E A006                   BRA         L928
    00000F70 0009                   NOP
    00000F72              L957:                             
    00000F72 04F0                   .DATA.W     H'04F0
    00000F74 04C8                   .DATA.W     H'04C8
    00000F76 04C4                   .DATA.W     H'04C4
    00000F78 04E3                   .DATA.W     H'04E3
    00000F7A 04DC                   .DATA.W     H'04DC
    00000F7C 04D0                   .DATA.W     H'04D0
    00000F7E              L928:                             
    00000F7E E101                   MOV         #1,R1
    00000F80 905A                   MOV.W       L959,R0    ; H'04D0
    00000F82 A22D                   BRA         L676
    00000F84 0F16                   MOV.L       R1,@(R0,R15)
    00000F86              L669:                             
          game.c   208                            }
          game.c   209    
          game.c   210                            /** Orton & ground **/
          game.c   211                            else if(level->map[(orton.y/8+1)*level->width + (orton.x+1)/8]==WALL || level->map
                         +[(orton.y/8+1)*level->width + (orton.x+6)/8]==WALL)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F86 9058                   MOV.W       L959+2,R0  ; H'04F0
    00000F88 9158                   MOV.W       L959+4,R1  ; H'04C8
    00000F8A 31FC                   ADD         R15,R1
    00000F8C 6312                   MOV.L       @R1,R3
    00000F8E 4311                   CMP/PZ      R3
    00000F90 8D01                   BT/S        L679
    00000F92 00FE                   MOV.L       @(R0,R15),R0
    00000F94 7307                   ADD         #7,R3
    00000F96              L679:                             
    00000F96 4321                   SHAR        R3
    00000F98 914F                   MOV.W       L959+2,R1  ; H'04F0
    00000F9A 4321                   SHAR        R3
    00000F9C 4321                   SHAR        R3
    00000F9E 7301                   ADD         #1,R3
    00000FA0 31FC                   ADD         R15,R1
    00000FA2 6212                   MOV.L       @R1,R2
    00000FA4 914B                   MOV.W       L959+6,R1  ; H'04C4
    00000FA6 5223                   MOV.L       @(12,R2),R2
    00000FA8 0327                   MUL.L       R2,R3
    00000FAA 31FC                   ADD         R15,R1
    00000FAC 6112                   MOV.L       @R1,R1
    00000FAE 7101                   ADD         #1,R1
    00000FB0 4111                   CMP/PZ      R1
    00000FB2 8D01                   BT/S        L680
    00000FB4 031A                   STS         MACL,R3
    00000FB6 7107                   ADD         #7,R1
    00000FB8              L680:                             
    00000FB8 5002                   MOV.L       @(8,R0),R0
    00000FBA 4121                   SHAR        R1
    00000FBC 4121                   SHAR        R1
    00000FBE 4121                   SHAR        R1
    00000FC0 331C                   ADD         R1,R3
    00000FC2 003C                   MOV.B       @(R0,R3),R0
    00000FC4 8801                   CMP/EQ      #1,R0
    00000FC6 8920                   BT          L678
    00000FC8 9037                   MOV.W       L959+2,R0  ; H'04F0
    00000FCA 9137                   MOV.W       L959+4,R1  ; H'04C8
    00000FCC 31FC                   ADD         R15,R1
    00000FCE 6312                   MOV.L       @R1,R3
    00000FD0 4311                   CMP/PZ      R3
    00000FD2 8D01                   BT/S        L681
    00000FD4 00FE                   MOV.L       @(R0,R15),R0
    00000FD6 7307                   ADD         #7,R3
    00000FD8              L681:                             
    00000FD8 912F                   MOV.W       L959+2,R1  ; H'04F0
    00000FDA 4321                   SHAR        R3
    00000FDC 4321                   SHAR        R3
    00000FDE 4321                   SHAR        R3
    00000FE0 7301                   ADD         #1,R3
    00000FE2 31FC                   ADD         R15,R1
    00000FE4 6212                   MOV.L       @R1,R2
    00000FE6 5223                   MOV.L       @(12,R2),R2
    00000FE8 9129                   MOV.W       L959+6,R1  ; H'04C4
    00000FEA 0327                   MUL.L       R2,R3
    00000FEC 31FC                   ADD         R15,R1
    00000FEE 6112                   MOV.L       @R1,R1
    00000FF0 7106                   ADD         #6,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FF2 4111                   CMP/PZ      R1
    00000FF4 8D01                   BT/S        L682
    00000FF6 031A                   STS         MACL,R3
    00000FF8 7107                   ADD         #7,R1
    00000FFA              L682:                             
    00000FFA 4121                   SHAR        R1
    00000FFC 5002                   MOV.L       @(8,R0),R0
    00000FFE 4121                   SHAR        R1
    00001000 4121                   SHAR        R1
    00001002 331C                   ADD         R1,R3
    00001004 003C                   MOV.B       @(R0,R3),R0
    00001006 8801                   CMP/EQ      #1,R0
    00001008 8B12                   BF          L677
    0000100A              L678:                             
          game.c   212                            {
          game.c   213                                    orton.can_jump = 1;
    0000100A E201                   MOV         #1,R2
    0000100C 9018                   MOV.W       L959+8,R0  ; H'04DC
          game.c   214                                    orton.counter_jump = 0;
    0000100E E300                   MOV         #0,R3
    00001010 0F24                   MOV.B       R2,@(R0,R15)
          game.c   215                                    orton.dy = 0;
    00001012 6233                   MOV         R3,R2
    00001014 9015                   MOV.W       L959+10,R0 ; H'04DD
    00001016 0F34                   MOV.B       R3,@(R0,R15)
    00001018 900E                   MOV.W       L959,R0    ; H'04D0
    0000101A 0F26                   MOV.L       R2,@(R0,R15)
          game.c   216                                    orton.y = orton.y>>3<<3;
    0000101C 900E                   MOV.W       L959+4,R0  ; H'04C8
    0000101E 03FE                   MOV.L       @(R0,R15),R3
    00001020 900C                   MOV.W       L959+4,R0  ; H'04C8
    00001022 4321                   SHAR        R3
    00001024 4321                   SHAR        R3
    00001026 4321                   SHAR        R3
    00001028 4308                   SHLL2       R3
    0000102A 4300                   SHLL        R3
    0000102C A1D8                   BRA         L676
    0000102E 0F36                   MOV.L       R3,@(R0,R15)
    00001030              L677:                             
          game.c   217                            }
          game.c   218    
          game.c   219                            /** Orton & moving lines **/
          game.c   220                            else
          game.c   221                            {
          game.c   222                                    for(i=0 ; i<level->nb_lines ; i++)
    00001030 9008                   MOV.W       L959+12,R0 ; H'04EC
    00001032 E100                   MOV         #0,R1
    00001034 A1CB                   BRA         L684
    00001036 0F16                   MOV.L       R1,@(R0,R15)
    00001038              L959:                             
    00001038 04D0                   .DATA.W     H'04D0
    0000103A 04F0                   .DATA.W     H'04F0
    0000103C 04C8                   .DATA.W     H'04C8
    0000103E 04C4                   .DATA.W     H'04C4
    00001040 04DC                   .DATA.W     H'04DC
    00001042 04DD                   .DATA.W     H'04DD
    00001044 04EC                   .DATA.W     H'04EC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001046              L685:                             
          game.c   223                                    {
          game.c   224                                            if(orton.dy >= 0 &&
          game.c   225                                               orton.x+6>=level->line[i].x && orton.x+1<=level->line[i].x+leve
                         +l->line[i].width-1 &&
          game.c   226                                               orton.y+8 - level->line[i].y>=0 && orton.y+8 - level->line[i].y
                         + <= orton.dy/2-
          game.c   227                                               (moving_line_sleep%(TIME_LINE_SLEEP/level->line[i].dy) ? 0 : sn
                         +g(level->line[i].dy)))
    00001046 908C                   MOV.W       L960,R0    ; H'04D0
    00001048 02FE                   MOV.L       @(R0,R15),R2
    0000104A 4211                   CMP/PZ      R2
    0000104C 8901                   BT          L961
    0000104E A1B9                   BRA         L686
    00001050 0009                   NOP
    00001052              L961:                             
    00001052 9087                   MOV.W       L960+2,R0  ; H'04C4
    00001054 01FE                   MOV.L       @(R0,R15),R1
    00001056 7106                   ADD         #6,R1
    00001058 9085                   MOV.W       L960+4,R0  ; H'04F0
    0000105A 03FE                   MOV.L       @(R0,R15),R3
    0000105C 9084                   MOV.W       L960+6,R0  ; H'04EC
    0000105E 02FE                   MOV.L       @(R0,R15),R2
    00001060 5335                   MOV.L       @(20,R3),R3
    00001062 6023                   MOV         R2,R0
    00001064 4208                   SHLL2       R2
    00001066 4200                   SHLL        R2
    00001068 320C                   ADD         R0,R2
    0000106A 4208                   SHLL2       R2
    0000106C 323C                   ADD         R3,R2
    0000106E 6022                   MOV.L       @R2,R0
    00001070 3103                   CMP/GE      R0,R1
    00001072 8901                   BT          L962
    00001074 A1A6                   BRA         L686
    00001076 0009                   NOP
    00001078              L962:                             
    00001078 9074                   MOV.W       L960+2,R0  ; H'04C4
    0000107A 02FE                   MOV.L       @(R0,R15),R2
    0000107C 9073                   MOV.W       L960+4,R0  ; H'04F0
    0000107E 7201                   ADD         #1,R2
    00001080 03FE                   MOV.L       @(R0,R15),R3
    00001082 9071                   MOV.W       L960+6,R0  ; H'04EC
    00001084 5335                   MOV.L       @(20,R3),R3
    00001086 01FE                   MOV.L       @(R0,R15),R1
    00001088 6013                   MOV         R1,R0
    0000108A 4108                   SHLL2       R1
    0000108C 4100                   SHLL        R1
    0000108E 310C                   ADD         R0,R1
    00001090 9069                   MOV.W       L960+4,R0  ; H'04F0
    00001092 4108                   SHLL2       R1
    00001094 00FE                   MOV.L       @(R0,R15),R0
    00001096 313C                   ADD         R3,R1
    00001098 5005                   MOV.L       @(20,R0),R0
    0000109A 9365                   MOV.W       L960+6,R3  ; H'04EC
    0000109C 6112                   MOV.L       @R1,R1
    0000109E 33FC                   ADD         R15,R3
    000010A0 6332                   MOV.L       @R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010A2 6833                   MOV         R3,R8
    000010A4 4308                   SHLL2       R3
    000010A6 4300                   SHLL        R3
    000010A8 338C                   ADD         R8,R3
    000010AA 4308                   SHLL2       R3
    000010AC 330C                   ADD         R0,R3
    000010AE 5332                   MOV.L       @(8,R3),R3
    000010B0 313C                   ADD         R3,R1
    000010B2 71FF                   ADD         #-1,R1
    000010B4 3217                   CMP/GT      R1,R2
    000010B6 8B01                   BF          L963
    000010B8 A184                   BRA         L686
    000010BA 0009                   NOP
    000010BC              L963:                             
    000010BC 9053                   MOV.W       L960+4,R0  ; H'04F0
    000010BE 02FE                   MOV.L       @(R0,R15),R2
    000010C0 9052                   MOV.W       L960+6,R0  ; H'04EC
    000010C2 03FE                   MOV.L       @(R0,R15),R3
    000010C4 5225                   MOV.L       @(20,R2),R2
    000010C6 6133                   MOV         R3,R1
    000010C8 904F                   MOV.W       L960+8,R0  ; H'04C8
    000010CA 4308                   SHLL2       R3
    000010CC 4300                   SHLL        R3
    000010CE 331C                   ADD         R1,R3
    000010D0 01FE                   MOV.L       @(R0,R15),R1
    000010D2 4308                   SHLL2       R3
    000010D4 332C                   ADD         R2,R3
    000010D6 5331                   MOV.L       @(4,R3),R3
    000010D8 3138                   SUB         R3,R1
    000010DA 7108                   ADD         #8,R1
    000010DC 4111                   CMP/PZ      R1
    000010DE 8901                   BT          L964
    000010E0 A170                   BRA         L686
    000010E2 0009                   NOP
    000010E4              L964:                             
    000010E4 903F                   MOV.W       L960+4,R0  ; H'04F0
    000010E6 02FE                   MOV.L       @(R0,R15),R2
    000010E8 903E                   MOV.W       L960+6,R0  ; H'04EC
    000010EA 03FE                   MOV.L       @(R0,R15),R3
    000010EC 5225                   MOV.L       @(20,R2),R2
    000010EE 6133                   MOV         R3,R1
    000010F0 903B                   MOV.W       L960+8,R0  ; H'04C8
    000010F2 4308                   SHLL2       R3
    000010F4 4300                   SHLL        R3
    000010F6 331C                   ADD         R1,R3
    000010F8 01FE                   MOV.L       @(R0,R15),R1
    000010FA 4308                   SHLL2       R3
    000010FC 9031                   MOV.W       L960,R0    ; H'04D0
    000010FE 332C                   ADD         R2,R3
    00001100 5331                   MOV.L       @(4,R3),R3
    00001102 E200                   MOV         #0,R2
    00001104 3138                   SUB         R3,R1
    00001106 7108                   ADD         #8,R1
    00001108 03FE                   MOV.L       @(R0,R15),R3
    0000110A 6913                   MOV         R1,R9
    0000110C 902B                   MOV.W       L960+4,R0  ; H'04F0
    0000110E 3237                   CMP/GT      R3,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001110 912A                   MOV.W       L960+6,R1  ; H'04EC
    00001112 332E                   ADDC        R2,R3
    00001114 00FE                   MOV.L       @(R0,R15),R0
    00001116 31FC                   ADD         R15,R1
    00001118 6212                   MOV.L       @R1,R2
    0000111A 4321                   SHAR        R3
    0000111C 6123                   MOV         R2,R1
    0000111E 4208                   SHLL2       R2
    00001120 4200                   SHLL        R2
    00001122 321C                   ADD         R1,R2
    00001124 5005                   MOV.L       @(20,R0),R0
    00001126 4208                   SHLL2       R2
    00001128 302C                   ADD         R2,R0
    0000112A E104                   MOV         #4,R1
    0000112C D20F                   MOV.L       L960+10,R2 ; __divls
    0000112E 420B                   JSR         @R2
    00001130 5004                   MOV.L       @(16,R0),R0
    00001132 D20F                   MOV.L       L960+14,R2 ; __modls
    00001134 420B                   JSR         @R2
    00001136 51F2                   MOV.L       @(8,R15),R1
    00001138 2008                   TST         R0,R0
    0000113A 8901                   BT          L687
    0000113C A028                   BRA         L690
    0000113E E200                   MOV         #0,R2
    00001140              L687:                             
    00001140 9011                   MOV.W       L960+4,R0  ; H'04F0
    00001142 00FE                   MOV.L       @(R0,R15),R0
    00001144 9210                   MOV.W       L960+6,R2  ; H'04EC
    00001146 32FC                   ADD         R15,R2
    00001148 6222                   MOV.L       @R2,R2
    0000114A 6823                   MOV         R2,R8
    0000114C 5005                   MOV.L       @(20,R0),R0
    0000114E 4208                   SHLL2       R2
    00001150 4200                   SHLL        R2
    00001152 328C                   ADD         R8,R2
    00001154 4208                   SHLL2       R2
    00001156 320C                   ADD         R0,R2
    00001158 5224                   MOV.L       @(16,R2),R2
    0000115A 4211                   CMP/PZ      R2
    0000115C 890A                   BT          L688
    0000115E A017                   BRA         L690
    00001160 E2FF                   MOV         #-1,R2
    00001162              L960:                             
    00001162 04D0                   .DATA.W     H'04D0
    00001164 04C4                   .DATA.W     H'04C4
    00001166 04F0                   .DATA.W     H'04F0
    00001168 04EC                   .DATA.W     H'04EC
    0000116A 04C8                   .DATA.W     H'04C8
    0000116C <00000000>             .DATA.L     __divls
    00001170 <00000000>             .DATA.L     __modls
    00001174              L688:                             
    00001174 90B7                   MOV.W       L965,R0    ; H'04F0
    00001176 02FE                   MOV.L       @(R0,R15),R2
    00001178 90B6                   MOV.W       L965+2,R0  ; H'04EC
    0000117A 00FE                   MOV.L       @(R0,R15),R0
    0000117C 5225                   MOV.L       @(20,R2),R2
    0000117E 6803                   MOV         R0,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001180 4008                   SHLL2       R0
    00001182 4000                   SHLL        R0
    00001184 308C                   ADD         R8,R0
    00001186 4008                   SHLL2       R0
    00001188 302C                   ADD         R2,R0
    0000118A 5204                   MOV.L       @(16,R0),R2
    0000118C 4215                   CMP/PL      R2
    0000118E 0229                   MOVT        R2
    00001190              L690:                             
    00001190 3328                   SUB         R2,R3
    00001192 3937                   CMP/GT      R3,R9
    00001194 8B01                   BF          L966
    00001196 A115                   BRA         L686
    00001198 0009                   NOP
    0000119A              L966:                             
          game.c   228                                            {
          game.c   229                                                    orton.can_jump = 1;
    0000119A E201                   MOV         #1,R2
    0000119C 90A5                   MOV.W       L965+4,R0  ; H'04DC
          game.c   230                                                    orton.counter_jump = 0;
    0000119E E300                   MOV         #0,R3
    000011A0 0F24                   MOV.B       R2,@(R0,R15)
    000011A2 90A3                   MOV.W       L965+6,R0  ; H'04DD
    000011A4 0F34                   MOV.B       R3,@(R0,R15)
          game.c   231                                                    orton.y = level->line[i].y-8;
    000011A6 909E                   MOV.W       L965,R0    ; H'04F0
    000011A8 02FE                   MOV.L       @(R0,R15),R2
    000011AA 909D                   MOV.W       L965+2,R0  ; H'04EC
    000011AC 5225                   MOV.L       @(20,R2),R2
    000011AE 03FE                   MOV.L       @(R0,R15),R3
    000011B0 909D                   MOV.W       L965+8,R0  ; H'04C8
    000011B2 6133                   MOV         R3,R1
    000011B4 4308                   SHLL2       R3
    000011B6 4300                   SHLL        R3
    000011B8 331C                   ADD         R1,R3
    000011BA 4308                   SHLL2       R3
    000011BC 332C                   ADD         R2,R3
    000011BE 5131                   MOV.L       @(4,R3),R1
    000011C0 71F8                   ADD         #-8,R1
          game.c   232                                                    if(level->map[orton.y/8*level->width + (orton.x+1+level->l
                         +ine[i].dx)/8]!=WALL &&
          game.c   233                                                       level->map[orton.y/8*level->width + (orton.x+6+level->l
                         +ine[i].dx)/8]!=WALL &&
          game.c   234                                                       level->map[(orton.y+7)/8*level->width + (orton.x+1+leve
                         +l->line[i].dx)/8]!=WALL &&
          game.c   235                                                       level->map[(orton.y+7)/8*level->width + (orton.x+6+leve
                         +l->line[i].dx)/8]!=WALL &&
          game.c   236                                                       moving_line_sleep%(TIME_LINE_SLEEP/level->line[i].dx)==
                         +0)
    000011C2 6313                   MOV         R1,R3
    000011C4 0F16                   MOV.L       R1,@(R0,R15)
    000011C6 4311                   CMP/PZ      R3
    000011C8 908D                   MOV.W       L965,R0    ; H'04F0
    000011CA 8D01                   BT/S        L694
    000011CC 00FE                   MOV.L       @(R0,R15),R0
    000011CE 7307                   ADD         #7,R3
    000011D0              L694:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011D0 9189                   MOV.W       L965,R1    ; H'04F0
    000011D2 4321                   SHAR        R3
    000011D4 4321                   SHAR        R3
    000011D6 4321                   SHAR        R3
    000011D8 31FC                   ADD         R15,R1
    000011DA 6212                   MOV.L       @R1,R2
    000011DC 9183                   MOV.W       L965,R1    ; H'04F0
    000011DE 5223                   MOV.L       @(12,R2),R2
    000011E0 0327                   MUL.L       R2,R3
    000011E2 31FC                   ADD         R15,R1
    000011E4 9280                   MOV.W       L965+2,R2  ; H'04EC
    000011E6 6112                   MOV.L       @R1,R1
    000011E8 32FC                   ADD         R15,R2
    000011EA 6222                   MOV.L       @R2,R2
    000011EC 5115                   MOV.L       @(20,R1),R1
    000011EE 6823                   MOV         R2,R8
    000011F0 4208                   SHLL2       R2
    000011F2 4200                   SHLL        R2
    000011F4 328C                   ADD         R8,R2
    000011F6 4208                   SHLL2       R2
    000011F8 321C                   ADD         R1,R2
    000011FA 5223                   MOV.L       @(12,R2),R2
    000011FC 9178                   MOV.W       L965+10,R1 ; H'04C4
    000011FE 31FC                   ADD         R15,R1
    00001200 6112                   MOV.L       @R1,R1
    00001202 312C                   ADD         R2,R1
    00001204 7101                   ADD         #1,R1
    00001206 4111                   CMP/PZ      R1
    00001208 8D01                   BT/S        L695
    0000120A 031A                   STS         MACL,R3
    0000120C 7107                   ADD         #7,R1
    0000120E              L695:                             
    0000120E 4121                   SHAR        R1
    00001210 5002                   MOV.L       @(8,R0),R0
    00001212 4121                   SHAR        R1
    00001214 4121                   SHAR        R1
    00001216 331C                   ADD         R1,R3
    00001218 003C                   MOV.B       @(R0,R3),R0
    0000121A 8801                   CMP/EQ      #1,R0
    0000121C 8B01                   BF          L967
    0000121E A0D1                   BRA         L686
    00001220 0009                   NOP
    00001222              L967:                             
    00001222 9060                   MOV.W       L965,R0    ; H'04F0
    00001224 9163                   MOV.W       L965+8,R1  ; H'04C8
    00001226 31FC                   ADD         R15,R1
    00001228 6312                   MOV.L       @R1,R3
    0000122A 4311                   CMP/PZ      R3
    0000122C 8D01                   BT/S        L696
    0000122E 00FE                   MOV.L       @(R0,R15),R0
    00001230 7307                   ADD         #7,R3
    00001232              L696:                             
    00001232 4321                   SHAR        R3
    00001234 9157                   MOV.W       L965,R1    ; H'04F0
    00001236 4321                   SHAR        R3
    00001238 4321                   SHAR        R3
    0000123A 31FC                   ADD         R15,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000123C 6212                   MOV.L       @R1,R2
    0000123E 5223                   MOV.L       @(12,R2),R2
    00001240 9151                   MOV.W       L965,R1    ; H'04F0
    00001242 0327                   MUL.L       R2,R3
    00001244 9250                   MOV.W       L965+2,R2  ; H'04EC
    00001246 31FC                   ADD         R15,R1
    00001248 6112                   MOV.L       @R1,R1
    0000124A 32FC                   ADD         R15,R2
    0000124C 5115                   MOV.L       @(20,R1),R1
    0000124E 6222                   MOV.L       @R2,R2
    00001250 6823                   MOV         R2,R8
    00001252 4208                   SHLL2       R2
    00001254 4200                   SHLL        R2
    00001256 328C                   ADD         R8,R2
    00001258 4208                   SHLL2       R2
    0000125A 321C                   ADD         R1,R2
    0000125C 5223                   MOV.L       @(12,R2),R2
    0000125E 9147                   MOV.W       L965+10,R1 ; H'04C4
    00001260 31FC                   ADD         R15,R1
    00001262 6112                   MOV.L       @R1,R1
    00001264 312C                   ADD         R2,R1
    00001266 7106                   ADD         #6,R1
    00001268 4111                   CMP/PZ      R1
    0000126A 8D01                   BT/S        L697
    0000126C 031A                   STS         MACL,R3
    0000126E 7107                   ADD         #7,R1
    00001270              L697:                             
    00001270 5002                   MOV.L       @(8,R0),R0
    00001272 4121                   SHAR        R1
    00001274 4121                   SHAR        R1
    00001276 4121                   SHAR        R1
    00001278 331C                   ADD         R1,R3
    0000127A 003C                   MOV.B       @(R0,R3),R0
    0000127C 8801                   CMP/EQ      #1,R0
    0000127E 8B01                   BF          L968
    00001280 A0A0                   BRA         L686
    00001282 0009                   NOP
    00001284              L968:                             
    00001284 902F                   MOV.W       L965,R0    ; H'04F0
    00001286 9132                   MOV.W       L965+8,R1  ; H'04C8
    00001288 31FC                   ADD         R15,R1
    0000128A 6312                   MOV.L       @R1,R3
    0000128C 7307                   ADD         #7,R3
    0000128E 4311                   CMP/PZ      R3
    00001290 8D01                   BT/S        L698
    00001292 00FE                   MOV.L       @(R0,R15),R0
    00001294 7307                   ADD         #7,R3
    00001296              L698:                             
    00001296 4321                   SHAR        R3
    00001298 9125                   MOV.W       L965,R1    ; H'04F0
    0000129A 4321                   SHAR        R3
    0000129C 4321                   SHAR        R3
    0000129E 31FC                   ADD         R15,R1
    000012A0 6112                   MOV.L       @R1,R1
    000012A2 5213                   MOV.L       @(12,R1),R2
    000012A4 911F                   MOV.W       L965,R1    ; H'04F0
    000012A6 0327                   MUL.L       R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012A8 921E                   MOV.W       L965+2,R2  ; H'04EC
    000012AA 31FC                   ADD         R15,R1
    000012AC 6112                   MOV.L       @R1,R1
    000012AE 32FC                   ADD         R15,R2
    000012B0 5115                   MOV.L       @(20,R1),R1
    000012B2 6222                   MOV.L       @R2,R2
    000012B4 6823                   MOV         R2,R8
    000012B6 4208                   SHLL2       R2
    000012B8 4200                   SHLL        R2
    000012BA 328C                   ADD         R8,R2
    000012BC 4208                   SHLL2       R2
    000012BE 321C                   ADD         R1,R2
    000012C0 5223                   MOV.L       @(12,R2),R2
    000012C2 9115                   MOV.W       L965+10,R1 ; H'04C4
    000012C4 31FC                   ADD         R15,R1
    000012C6 6112                   MOV.L       @R1,R1
    000012C8 312C                   ADD         R2,R1
    000012CA 7101                   ADD         #1,R1
    000012CC 4111                   CMP/PZ      R1
    000012CE 8D01                   BT/S        L699
    000012D0 031A                   STS         MACL,R3
    000012D2 7107                   ADD         #7,R1
    000012D4              L699:                             
    000012D4 5002                   MOV.L       @(8,R0),R0
    000012D6 4121                   SHAR        R1
    000012D8 4121                   SHAR        R1
    000012DA 4121                   SHAR        R1
    000012DC 331C                   ADD         R1,R3
    000012DE 003C                   MOV.B       @(R0,R3),R0
    000012E0 8801                   CMP/EQ      #1,R0
    000012E2 A006                   BRA         L929
    000012E4 0009                   NOP
    000012E6              L965:                             
    000012E6 04F0                   .DATA.W     H'04F0
    000012E8 04EC                   .DATA.W     H'04EC
    000012EA 04DC                   .DATA.W     H'04DC
    000012EC 04DD                   .DATA.W     H'04DD
    000012EE 04C8                   .DATA.W     H'04C8
    000012F0 04C4                   .DATA.W     H'04C4
    000012F2              L929:                             
    000012F2 8967                   BT          L686
    000012F4 9092                   MOV.W       L969,R0    ; H'04F0
    000012F6 9192                   MOV.W       L969+2,R1  ; H'04C8
    000012F8 31FC                   ADD         R15,R1
    000012FA 6312                   MOV.L       @R1,R3
    000012FC 7307                   ADD         #7,R3
    000012FE 4311                   CMP/PZ      R3
    00001300 8D01                   BT/S        L700
    00001302 00FE                   MOV.L       @(R0,R15),R0
    00001304 7307                   ADD         #7,R3
    00001306              L700:                             
    00001306 4321                   SHAR        R3
    00001308 9188                   MOV.W       L969,R1    ; H'04F0
    0000130A 4321                   SHAR        R3
    0000130C 4321                   SHAR        R3
    0000130E 31FC                   ADD         R15,R1
    00001310 6112                   MOV.L       @R1,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001312 5213                   MOV.L       @(12,R1),R2
    00001314 9182                   MOV.W       L969,R1    ; H'04F0
    00001316 0327                   MUL.L       R2,R3
    00001318 9282                   MOV.W       L969+4,R2  ; H'04EC
    0000131A 31FC                   ADD         R15,R1
    0000131C 6112                   MOV.L       @R1,R1
    0000131E 32FC                   ADD         R15,R2
    00001320 5115                   MOV.L       @(20,R1),R1
    00001322 6222                   MOV.L       @R2,R2
    00001324 6823                   MOV         R2,R8
    00001326 4208                   SHLL2       R2
    00001328 4200                   SHLL        R2
    0000132A 328C                   ADD         R8,R2
    0000132C 4208                   SHLL2       R2
    0000132E 321C                   ADD         R1,R2
    00001330 5223                   MOV.L       @(12,R2),R2
    00001332 9176                   MOV.W       L969+6,R1  ; H'04C4
    00001334 31FC                   ADD         R15,R1
    00001336 6112                   MOV.L       @R1,R1
    00001338 312C                   ADD         R2,R1
    0000133A 7106                   ADD         #6,R1
    0000133C 4111                   CMP/PZ      R1
    0000133E 8D01                   BT/S        L701
    00001340 031A                   STS         MACL,R3
    00001342 7107                   ADD         #7,R1
    00001344              L701:                             
    00001344 5002                   MOV.L       @(8,R0),R0
    00001346 4121                   SHAR        R1
    00001348 4121                   SHAR        R1
    0000134A 4121                   SHAR        R1
    0000134C 331C                   ADD         R1,R3
    0000134E 003C                   MOV.B       @(R0,R3),R0
    00001350 8801                   CMP/EQ      #1,R0
    00001352 8937                   BT          L686
    00001354 9062                   MOV.W       L969,R0    ; H'04F0
    00001356 00FE                   MOV.L       @(R0,R15),R0
    00001358 9162                   MOV.W       L969+4,R1  ; H'04EC
    0000135A 31FC                   ADD         R15,R1
    0000135C 6312                   MOV.L       @R1,R3
    0000135E E104                   MOV         #4,R1
    00001360 5005                   MOV.L       @(20,R0),R0
    00001362 6233                   MOV         R3,R2
    00001364 4308                   SHLL2       R3
    00001366 4300                   SHLL        R3
    00001368 332C                   ADD         R2,R3
    0000136A 4308                   SHLL2       R3
    0000136C 303C                   ADD         R3,R0
    0000136E D32D                   MOV.L       L969+8,R3  ; __divls
    00001370 430B                   JSR         @R3
    00001372 5003                   MOV.L       @(12,R0),R0
    00001374 D22C                   MOV.L       L969+12,R2 ; __modls
    00001376 420B                   JSR         @R2
    00001378 51F2                   MOV.L       @(8,R15),R1
    0000137A 2008                   TST         R0,R0
    0000137C 8B22                   BF          L686
          game.c   237                                                            orton.x += sng(level->line[i].dx);
    0000137E 904D                   MOV.W       L969,R0    ; H'04F0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001380 03FE                   MOV.L       @(R0,R15),R3
    00001382 904D                   MOV.W       L969+4,R0  ; H'04EC
    00001384 5335                   MOV.L       @(20,R3),R3
    00001386 02FE                   MOV.L       @(R0,R15),R2
    00001388 6123                   MOV         R2,R1
    0000138A 4208                   SHLL2       R2
    0000138C 4200                   SHLL        R2
    0000138E 321C                   ADD         R1,R2
    00001390 4208                   SHLL2       R2
    00001392 323C                   ADD         R3,R2
    00001394 5123                   MOV.L       @(12,R2),R1
    00001396 4111                   CMP/PZ      R1
    00001398 8901                   BT          L702
    0000139A A00E                   BRA         L704
    0000139C E3FF                   MOV         #-1,R3
    0000139E              L702:                             
    0000139E 903D                   MOV.W       L969,R0    ; H'04F0
    000013A0 02FE                   MOV.L       @(R0,R15),R2
    000013A2 903D                   MOV.W       L969+4,R0  ; H'04EC
    000013A4 5225                   MOV.L       @(20,R2),R2
    000013A6 03FE                   MOV.L       @(R0,R15),R3
    000013A8 6133                   MOV         R3,R1
    000013AA 4308                   SHLL2       R3
    000013AC 4300                   SHLL        R3
    000013AE 331C                   ADD         R1,R3
    000013B0 4308                   SHLL2       R3
    000013B2 332C                   ADD         R2,R3
    000013B4 5133                   MOV.L       @(12,R3),R1
    000013B6 4115                   CMP/PL      R1
    000013B8 0329                   MOVT        R3
    000013BA              L704:                             
    000013BA 9032                   MOV.W       L969+6,R0  ; H'04C4
    000013BC 02FE                   MOV.L       @(R0,R15),R2
    000013BE 323C                   ADD         R3,R2
    000013C0 902F                   MOV.W       L969+6,R0  ; H'04C4
    000013C2 0F26                   MOV.L       R2,@(R0,R15)
    000013C4              L686:                             
    000013C4 902C                   MOV.W       L969+4,R0  ; H'04EC
    000013C6 03FE                   MOV.L       @(R0,R15),R3
    000013C8 902A                   MOV.W       L969+4,R0  ; H'04EC
    000013CA 7301                   ADD         #1,R3
    000013CC 0F36                   MOV.L       R3,@(R0,R15)
    000013CE              L684:                             
    000013CE 9025                   MOV.W       L969,R0    ; H'04F0
    000013D0 02FE                   MOV.L       @(R0,R15),R2
    000013D2 5326                   MOV.L       @(24,R2),R3
    000013D4 9024                   MOV.W       L969+4,R0  ; H'04EC
    000013D6 01FE                   MOV.L       @(R0,R15),R1
    000013D8 3133                   CMP/GE      R3,R1
    000013DA 8901                   BT          L970
    000013DC AE33                   BRA         L685
    000013DE 0009                   NOP
    000013E0              L970:                             
    000013E0              L676:                             
          game.c   238                                            }
          game.c   239                                    }
          game.c   240                            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   241    
          game.c   242                            /** Orton & moving walls **/
          game.c   243                            for(i=0 ; i<level->nb_walls ; i++)
    000013E0 901E                   MOV.W       L969+4,R0  ; H'04EC
    000013E2 E300                   MOV         #0,R3
    000013E4 A161                   BRA         L706
    000013E6 0F36                   MOV.L       R3,@(R0,R15)
    000013E8              L707:                             
          game.c   244                            {
          game.c   245                                    switch(level->wall[i].direction)
    000013E8 9018                   MOV.W       L969,R0    ; H'04F0
    000013EA 00FE                   MOV.L       @(R0,R15),R0
    000013EC 9118                   MOV.W       L969+4,R1  ; H'04EC
    000013EE 31FC                   ADD         R15,R1
    000013F0 6312                   MOV.L       @R1,R3
    000013F2 6233                   MOV         R3,R2
    000013F4 5007                   MOV.L       @(28,R0),R0
    000013F6 4300                   SHLL        R3
    000013F8 332C                   ADD         R2,R3
    000013FA 4308                   SHLL2       R3
    000013FC 4300                   SHLL        R3
    000013FE 003E                   MOV.L       @(R0,R3),R0
    00001400 8800                   CMP/EQ      #0,R0
    00001402 8913                   BT          L526
    00001404 8801                   CMP/EQ      #1,R0
    00001406 8960                   BT          L527
    00001408 8802                   CMP/EQ      #2,R0
    0000140A 8B01                   BF          L971
    0000140C A0B1                   BRA         L528
    0000140E 0009                   NOP
    00001410              L971:                             
    00001410 8803                   CMP/EQ      #3,R0
    00001412 8B01                   BF          L972
    00001414 A0FD                   BRA         L529
    00001416 0009                   NOP
    00001418              L972:                             
    00001418 A142                   BRA         L708
    0000141A 0009                   NOP
    0000141C              L969:                             
    0000141C 04F0                   .DATA.W     H'04F0
    0000141E 04C8                   .DATA.W     H'04C8
    00001420 04EC                   .DATA.W     H'04EC
    00001422 04C4                   .DATA.W     H'04C4
    00001424 <00000000>             .DATA.L     __divls
    00001428 <00000000>             .DATA.L     __modls
    0000142C              L526:                            ; case label 
          game.c   246                                    {
          game.c   247                                            case W_LEFT:
          game.c   248                                                    if(orton.y+7>=level->wall[i].y && orton.y+1<=level->wall[i
                         +].y+level->wall[i].size*8-1 && orton.x+6>=level->wall[i].x-2)
    0000142C 909C                   MOV.W       L973,R0    ; H'04C8
    0000142E 03FE                   MOV.L       @(R0,R15),R3
    00001430 909B                   MOV.W       L973+2,R0  ; H'04F0
    00001432 7307                   ADD         #7,R3
    00001434 02FE                   MOV.L       @(R0,R15),R2
    00001436 9099                   MOV.W       L973+4,R0  ; H'04EC
    00001438 5227                   MOV.L       @(28,R2),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000143A 01FE                   MOV.L       @(R0,R15),R1
    0000143C 6013                   MOV         R1,R0
    0000143E 4100                   SHLL        R1
    00001440 310C                   ADD         R0,R1
    00001442 4108                   SHLL2       R1
    00001444 4100                   SHLL        R1
    00001446 312C                   ADD         R2,R1
    00001448 5014                   MOV.L       @(16,R1),R0
    0000144A 3303                   CMP/GE      R0,R3
    0000144C 8901                   BT          L974
    0000144E A127                   BRA         L708
    00001450 0009                   NOP
    00001452              L974:                             
    00001452 9089                   MOV.W       L973,R0    ; H'04C8
    00001454 02FE                   MOV.L       @(R0,R15),R2
    00001456 7201                   ADD         #1,R2
    00001458 9087                   MOV.W       L973+2,R0  ; H'04F0
    0000145A 03FE                   MOV.L       @(R0,R15),R3
    0000145C 9086                   MOV.W       L973+4,R0  ; H'04EC
    0000145E 01FE                   MOV.L       @(R0,R15),R1
    00001460 5337                   MOV.L       @(28,R3),R3
    00001462 6013                   MOV         R1,R0
    00001464 4100                   SHLL        R1
    00001466 310C                   ADD         R0,R1
    00001468 907F                   MOV.W       L973+2,R0  ; H'04F0
    0000146A 4108                   SHLL2       R1
    0000146C 00FE                   MOV.L       @(R0,R15),R0
    0000146E 4100                   SHLL        R1
    00001470 5007                   MOV.L       @(28,R0),R0
    00001472 313C                   ADD         R3,R1
    00001474 937A                   MOV.W       L973+4,R3  ; H'04EC
    00001476 33FC                   ADD         R15,R3
    00001478 6332                   MOV.L       @R3,R3
    0000147A 6833                   MOV         R3,R8
    0000147C 5114                   MOV.L       @(16,R1),R1
    0000147E 4300                   SHLL        R3
    00001480 338C                   ADD         R8,R3
    00001482 4308                   SHLL2       R3
    00001484 4300                   SHLL        R3
    00001486 330C                   ADD         R0,R3
    00001488 5335                   MOV.L       @(20,R3),R3
    0000148A 4308                   SHLL2       R3
    0000148C 4300                   SHLL        R3
    0000148E 331C                   ADD         R1,R3
    00001490 73FF                   ADD         #-1,R3
    00001492 3237                   CMP/GT      R3,R2
    00001494 8B01                   BF          L975
    00001496 A103                   BRA         L708
    00001498 0009                   NOP
    0000149A              L975:                             
    0000149A 9068                   MOV.W       L973+6,R0  ; H'04C4
    0000149C 02FE                   MOV.L       @(R0,R15),R2
    0000149E 7206                   ADD         #6,R2
    000014A0 9063                   MOV.W       L973+2,R0  ; H'04F0
    000014A2 03FE                   MOV.L       @(R0,R15),R3
    000014A4 9062                   MOV.W       L973+4,R0  ; H'04EC
    000014A6 01FE                   MOV.L       @(R0,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014A8 5337                   MOV.L       @(28,R3),R3
    000014AA 6013                   MOV         R1,R0
    000014AC 4100                   SHLL        R1
    000014AE 310C                   ADD         R0,R1
    000014B0 4108                   SHLL2       R1
    000014B2 4100                   SHLL        R1
    000014B4 313C                   ADD         R3,R1
    000014B6 5013                   MOV.L       @(12,R1),R0
    000014B8 70FE                   ADD         #-2,R0
    000014BA 3203                   CMP/GE      R0,R2
    000014BC 8901                   BT          L976
    000014BE A0EF                   BRA         L708
    000014C0 0009                   NOP
    000014C2              L976:                             
          game.c   249                                                            dead = 1;
    000014C2 E201                   MOV         #1,R2
    000014C4 9054                   MOV.W       L973+8,R0  ; H'04E2
          game.c   250                                                    break;
    000014C6 A0EB                   BRA         L708
    000014C8 0F24                   MOV.B       R2,@(R0,R15)
    000014CA              L527:                            ; case label 
          game.c   251                                            case W_RIGHT:
          game.c   252                                                    if(orton.y+7>=level->wall[i].y && orton.y+1<=level->wall[i
                         +].y+level->wall[i].size*8-1 && orton.x+1<=level->wall[i].x+9)
    000014CA 904D                   MOV.W       L973,R0    ; H'04C8
    000014CC 01FE                   MOV.L       @(R0,R15),R1
    000014CE 7107                   ADD         #7,R1
    000014D0 904B                   MOV.W       L973+2,R0  ; H'04F0
    000014D2 03FE                   MOV.L       @(R0,R15),R3
    000014D4 904A                   MOV.W       L973+4,R0  ; H'04EC
    000014D6 02FE                   MOV.L       @(R0,R15),R2
    000014D8 5337                   MOV.L       @(28,R3),R3
    000014DA 6023                   MOV         R2,R0
    000014DC 4200                   SHLL        R2
    000014DE 320C                   ADD         R0,R2
    000014E0 4208                   SHLL2       R2
    000014E2 4200                   SHLL        R2
    000014E4 323C                   ADD         R3,R2
    000014E6 5024                   MOV.L       @(16,R2),R0
    000014E8 3103                   CMP/GE      R0,R1
    000014EA 8901                   BT          L977
    000014EC A0D8                   BRA         L708
    000014EE 0009                   NOP
    000014F0              L977:                             
    000014F0 903A                   MOV.W       L973,R0    ; H'04C8
    000014F2 02FE                   MOV.L       @(R0,R15),R2
    000014F4 9039                   MOV.W       L973+2,R0  ; H'04F0
    000014F6 7201                   ADD         #1,R2
    000014F8 03FE                   MOV.L       @(R0,R15),R3
    000014FA 9037                   MOV.W       L973+4,R0  ; H'04EC
    000014FC 5337                   MOV.L       @(28,R3),R3
    000014FE 01FE                   MOV.L       @(R0,R15),R1
    00001500 6013                   MOV         R1,R0
    00001502 4100                   SHLL        R1
    00001504 310C                   ADD         R0,R1
    00001506 4108                   SHLL2       R1
    00001508 902F                   MOV.W       L973+2,R0  ; H'04F0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000150A 4100                   SHLL        R1
    0000150C 00FE                   MOV.L       @(R0,R15),R0
    0000150E 313C                   ADD         R3,R1
    00001510 5007                   MOV.L       @(28,R0),R0
    00001512 932B                   MOV.W       L973+4,R3  ; H'04EC
    00001514 5114                   MOV.L       @(16,R1),R1
    00001516 33FC                   ADD         R15,R3
    00001518 6332                   MOV.L       @R3,R3
    0000151A 6833                   MOV         R3,R8
    0000151C 4300                   SHLL        R3
    0000151E 338C                   ADD         R8,R3
    00001520 4308                   SHLL2       R3
    00001522 4300                   SHLL        R3
    00001524 330C                   ADD         R0,R3
    00001526 5335                   MOV.L       @(20,R3),R3
    00001528 4308                   SHLL2       R3
    0000152A 4300                   SHLL        R3
    0000152C 331C                   ADD         R1,R3
    0000152E 73FF                   ADD         #-1,R3
    00001530 3237                   CMP/GT      R3,R2
    00001532 8B01                   BF          L978
    00001534 A0B4                   BRA         L708
    00001536 0009                   NOP
    00001538              L978:                             
    00001538 9019                   MOV.W       L973+6,R0  ; H'04C4
    0000153A 02FE                   MOV.L       @(R0,R15),R2
    0000153C 9015                   MOV.W       L973+2,R0  ; H'04F0
    0000153E 7201                   ADD         #1,R2
    00001540 03FE                   MOV.L       @(R0,R15),R3
    00001542 9013                   MOV.W       L973+4,R0  ; H'04EC
    00001544 5337                   MOV.L       @(28,R3),R3
    00001546 01FE                   MOV.L       @(R0,R15),R1
    00001548 6013                   MOV         R1,R0
    0000154A 4100                   SHLL        R1
    0000154C 310C                   ADD         R0,R1
    0000154E 4108                   SHLL2       R1
    00001550 4100                   SHLL        R1
    00001552 313C                   ADD         R3,R1
    00001554 5013                   MOV.L       @(12,R1),R0
    00001556 7009                   ADD         #9,R0
    00001558 3207                   CMP/GT      R0,R2
    0000155A 8B01                   BF          L979
    0000155C A0A0                   BRA         L708
    0000155E 0009                   NOP
    00001560              L979:                             
          game.c   253                                                            dead = 1;
    00001560 9006                   MOV.W       L973+8,R0  ; H'04E2
    00001562 E201                   MOV         #1,R2
          game.c   254                                                    break;
    00001564 A09C                   BRA         L708
    00001566 0F24                   MOV.B       R2,@(R0,R15)
    00001568              L973:                             
    00001568 04C8                   .DATA.W     H'04C8
    0000156A 04F0                   .DATA.W     H'04F0
    0000156C 04EC                   .DATA.W     H'04EC
    0000156E 04C4                   .DATA.W     H'04C4
    00001570 04E2                   .DATA.W     H'04E2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001572              L528:                            ; case label 
          game.c   255                                            case W_UP:
          game.c   256                                                    if(orton.x+6>=level->wall[i].x && orton.x+1<=level->wall[i
                         +].x+level->wall[i].size*8-1 && orton.y+6<=level->wall[i].y-2)
    00001572 9049                   MOV.W       L980,R0    ; H'04C4
    00001574 01FE                   MOV.L       @(R0,R15),R1
    00001576 7106                   ADD         #6,R1
    00001578 9047                   MOV.W       L980+2,R0  ; H'04F0
    0000157A 03FE                   MOV.L       @(R0,R15),R3
    0000157C 9046                   MOV.W       L980+4,R0  ; H'04EC
    0000157E 02FE                   MOV.L       @(R0,R15),R2
    00001580 5337                   MOV.L       @(28,R3),R3
    00001582 6023                   MOV         R2,R0
    00001584 4200                   SHLL        R2
    00001586 320C                   ADD         R0,R2
    00001588 4208                   SHLL2       R2
    0000158A 4200                   SHLL        R2
    0000158C 323C                   ADD         R3,R2
    0000158E 5023                   MOV.L       @(12,R2),R0
    00001590 3103                   CMP/GE      R0,R1
    00001592 8901                   BT          L981
    00001594 A084                   BRA         L708
    00001596 0009                   NOP
    00001598              L981:                             
    00001598 9036                   MOV.W       L980,R0    ; H'04C4
    0000159A 02FE                   MOV.L       @(R0,R15),R2
    0000159C 9035                   MOV.W       L980+2,R0  ; H'04F0
    0000159E 7201                   ADD         #1,R2
    000015A0 03FE                   MOV.L       @(R0,R15),R3
    000015A2 9033                   MOV.W       L980+4,R0  ; H'04EC
    000015A4 5337                   MOV.L       @(28,R3),R3
    000015A6 01FE                   MOV.L       @(R0,R15),R1
    000015A8 6013                   MOV         R1,R0
    000015AA 4100                   SHLL        R1
    000015AC 310C                   ADD         R0,R1
    000015AE 4108                   SHLL2       R1
    000015B0 902B                   MOV.W       L980+2,R0  ; H'04F0
    000015B2 4100                   SHLL        R1
    000015B4 00FE                   MOV.L       @(R0,R15),R0
    000015B6 313C                   ADD         R3,R1
    000015B8 5007                   MOV.L       @(28,R0),R0
    000015BA 9327                   MOV.W       L980+4,R3  ; H'04EC
    000015BC 5113                   MOV.L       @(12,R1),R1
    000015BE 33FC                   ADD         R15,R3
    000015C0 6332                   MOV.L       @R3,R3
    000015C2 6833                   MOV         R3,R8
    000015C4 4300                   SHLL        R3
    000015C6 338C                   ADD         R8,R3
    000015C8 4308                   SHLL2       R3
    000015CA 4300                   SHLL        R3
    000015CC 330C                   ADD         R0,R3
    000015CE 5335                   MOV.L       @(20,R3),R3
    000015D0 4308                   SHLL2       R3
    000015D2 4300                   SHLL        R3
    000015D4 331C                   ADD         R1,R3
    000015D6 73FF                   ADD         #-1,R3
    000015D8 3237                   CMP/GT      R3,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015DA 8961                   BT          L708
    000015DC 9017                   MOV.W       L980+6,R0  ; H'04C8
    000015DE 02FE                   MOV.L       @(R0,R15),R2
    000015E0 9013                   MOV.W       L980+2,R0  ; H'04F0
    000015E2 7206                   ADD         #6,R2
    000015E4 03FE                   MOV.L       @(R0,R15),R3
    000015E6 9011                   MOV.W       L980+4,R0  ; H'04EC
    000015E8 5337                   MOV.L       @(28,R3),R3
    000015EA 01FE                   MOV.L       @(R0,R15),R1
    000015EC 6013                   MOV         R1,R0
    000015EE 4100                   SHLL        R1
    000015F0 310C                   ADD         R0,R1
    000015F2 4108                   SHLL2       R1
    000015F4 4100                   SHLL        R1
    000015F6 313C                   ADD         R3,R1
    000015F8 5014                   MOV.L       @(16,R1),R0
    000015FA 70FE                   ADD         #-2,R0
    000015FC 3207                   CMP/GT      R0,R2
    000015FE 894F                   BT          L708
          game.c   257                                                            dead = 1;
    00001600 9006                   MOV.W       L980+8,R0  ; H'04E2
    00001602 E201                   MOV         #1,R2
          game.c   258                                                    break;
    00001604 A04C                   BRA         L708
    00001606 0F24                   MOV.B       R2,@(R0,R15)
    00001608              L980:                             
    00001608 04C4                   .DATA.W     H'04C4
    0000160A 04F0                   .DATA.W     H'04F0
    0000160C 04EC                   .DATA.W     H'04EC
    0000160E 04C8                   .DATA.W     H'04C8
    00001610 04E2                   .DATA.W     H'04E2
    00001612              L529:                            ; case label 
          game.c   259                                            case W_DOWN:
          game.c   260                                                    if(orton.x+6>=level->wall[i].x && orton.x+1<=level->wall[i
                         +].x+level->wall[i].size*8-1 && orton.y<=level->wall[i].y+9)
    00001612 90AD                   MOV.W       L982,R0    ; H'04C4
    00001614 01FE                   MOV.L       @(R0,R15),R1
    00001616 7106                   ADD         #6,R1
    00001618 90AB                   MOV.W       L982+2,R0  ; H'04F0
    0000161A 03FE                   MOV.L       @(R0,R15),R3
    0000161C 90AA                   MOV.W       L982+4,R0  ; H'04EC
    0000161E 02FE                   MOV.L       @(R0,R15),R2
    00001620 5337                   MOV.L       @(28,R3),R3
    00001622 6023                   MOV         R2,R0
    00001624 4200                   SHLL        R2
    00001626 320C                   ADD         R0,R2
    00001628 4208                   SHLL2       R2
    0000162A 4200                   SHLL        R2
    0000162C 323C                   ADD         R3,R2
    0000162E 5023                   MOV.L       @(12,R2),R0
    00001630 3103                   CMP/GE      R0,R1
    00001632 8B35                   BF          L708
    00001634 909C                   MOV.W       L982,R0    ; H'04C4
    00001636 02FE                   MOV.L       @(R0,R15),R2
    00001638 909B                   MOV.W       L982+2,R0  ; H'04F0
    0000163A 7201                   ADD         #1,R2
    0000163C 03FE                   MOV.L       @(R0,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000163E 9099                   MOV.W       L982+4,R0  ; H'04EC
    00001640 5337                   MOV.L       @(28,R3),R3
    00001642 01FE                   MOV.L       @(R0,R15),R1
    00001644 6013                   MOV         R1,R0
    00001646 4100                   SHLL        R1
    00001648 310C                   ADD         R0,R1
    0000164A 4108                   SHLL2       R1
    0000164C 9091                   MOV.W       L982+2,R0  ; H'04F0
    0000164E 4100                   SHLL        R1
    00001650 00FE                   MOV.L       @(R0,R15),R0
    00001652 313C                   ADD         R3,R1
    00001654 5007                   MOV.L       @(28,R0),R0
    00001656 938D                   MOV.W       L982+4,R3  ; H'04EC
    00001658 5113                   MOV.L       @(12,R1),R1
    0000165A 33FC                   ADD         R15,R3
    0000165C 6332                   MOV.L       @R3,R3
    0000165E 6833                   MOV         R3,R8
    00001660 4300                   SHLL        R3
    00001662 338C                   ADD         R8,R3
    00001664 4308                   SHLL2       R3
    00001666 4300                   SHLL        R3
    00001668 330C                   ADD         R0,R3
    0000166A 5335                   MOV.L       @(20,R3),R3
    0000166C 4308                   SHLL2       R3
    0000166E 4300                   SHLL        R3
    00001670 331C                   ADD         R1,R3
    00001672 73FF                   ADD         #-1,R3
    00001674 3237                   CMP/GT      R3,R2
    00001676 8913                   BT          L708
    00001678 907B                   MOV.W       L982+2,R0  ; H'04F0
    0000167A 02FE                   MOV.L       @(R0,R15),R2
    0000167C 907A                   MOV.W       L982+4,R0  ; H'04EC
    0000167E 03FE                   MOV.L       @(R0,R15),R3
    00001680 5227                   MOV.L       @(28,R2),R2
    00001682 6133                   MOV         R3,R1
    00001684 9077                   MOV.W       L982+6,R0  ; H'04C8
    00001686 4300                   SHLL        R3
    00001688 331C                   ADD         R1,R3
    0000168A 4308                   SHLL2       R3
    0000168C 4300                   SHLL        R3
    0000168E 332C                   ADD         R2,R3
    00001690 5134                   MOV.L       @(16,R3),R1
    00001692 7109                   ADD         #9,R1
    00001694 03FE                   MOV.L       @(R0,R15),R3
    00001696 3317                   CMP/GT      R1,R3
    00001698 8902                   BT          L708
          game.c   261                                                            dead = 1;
    0000169A E101                   MOV         #1,R1
    0000169C 906C                   MOV.W       L982+8,R0  ; H'04E2
    0000169E 0F14                   MOV.B       R1,@(R0,R15)
          game.c   262                                                    break;
    000016A0              L708:                             
    000016A0 9068                   MOV.W       L982+4,R0  ; H'04EC
    000016A2 02FE                   MOV.L       @(R0,R15),R2
    000016A4 9066                   MOV.W       L982+4,R0  ; H'04EC
    000016A6 7201                   ADD         #1,R2
    000016A8 0F26                   MOV.L       R2,@(R0,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016AA              L706:                             
    000016AA 9062                   MOV.W       L982+2,R0  ; H'04F0
    000016AC 03FE                   MOV.L       @(R0,R15),R3
    000016AE 5238                   MOV.L       @(32,R3),R2
    000016B0 9060                   MOV.W       L982+4,R0  ; H'04EC
    000016B2 01FE                   MOV.L       @(R0,R15),R1
    000016B4 3123                   CMP/GE      R2,R1
    000016B6 8901                   BT          L983
    000016B8 AE96                   BRA         L707
    000016BA 0009                   NOP
    000016BC              L983:                             
          game.c   263                                    }
          game.c   264                            }
          game.c   265    
          game.c   266                            /** Orton & fake princesses **/
          game.c   267                            if(level->map[(orton.y+1)/8*level->width+(orton.x+1)/8] == FAKE_PRINCESS ||
          game.c   268                               level->map[(orton.y+1)/8*level->width+(orton.x+6)/8] == FAKE_PRINCESS ||
          game.c   269                               level->map[(orton.y+6)/8*level->width+(orton.x+1)/8] == FAKE_PRINCESS ||
          game.c   270                               level->map[(orton.y+6)/8*level->width+(orton.x+6)/8] == FAKE_PRINCESS)
    000016BC 9059                   MOV.W       L982+2,R0  ; H'04F0
    000016BE 915A                   MOV.W       L982+6,R1  ; H'04C8
    000016C0 31FC                   ADD         R15,R1
    000016C2 6312                   MOV.L       @R1,R3
    000016C4 7301                   ADD         #1,R3
    000016C6 4311                   CMP/PZ      R3
    000016C8 8D01                   BT/S        L715
    000016CA 00FE                   MOV.L       @(R0,R15),R0
    000016CC 7307                   ADD         #7,R3
    000016CE              L715:                             
    000016CE 4321                   SHAR        R3
    000016D0 914F                   MOV.W       L982+2,R1  ; H'04F0
    000016D2 4321                   SHAR        R3
    000016D4 4321                   SHAR        R3
    000016D6 31FC                   ADD         R15,R1
    000016D8 6112                   MOV.L       @R1,R1
    000016DA 5213                   MOV.L       @(12,R1),R2
    000016DC 9148                   MOV.W       L982,R1    ; H'04C4
    000016DE 0327                   MUL.L       R2,R3
    000016E0 31FC                   ADD         R15,R1
    000016E2 6112                   MOV.L       @R1,R1
    000016E4 7101                   ADD         #1,R1
    000016E6 4111                   CMP/PZ      R1
    000016E8 8D01                   BT/S        L716
    000016EA 031A                   STS         MACL,R3
    000016EC 7107                   ADD         #7,R1
    000016EE              L716:                             
    000016EE 4121                   SHAR        R1
    000016F0 5002                   MOV.L       @(8,R0),R0
    000016F2 4121                   SHAR        R1
    000016F4 4121                   SHAR        R1
    000016F6 331C                   ADD         R1,R3
    000016F8 003C                   MOV.B       @(R0,R3),R0
    000016FA 880F                   CMP/EQ      #15,R0
    000016FC 896B                   BT          L714
    000016FE 9038                   MOV.W       L982+2,R0  ; H'04F0
    00001700 9139                   MOV.W       L982+6,R1  ; H'04C8
    00001702 31FC                   ADD         R15,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001704 6312                   MOV.L       @R1,R3
    00001706 7301                   ADD         #1,R3
    00001708 4311                   CMP/PZ      R3
    0000170A 8D01                   BT/S        L717
    0000170C 00FE                   MOV.L       @(R0,R15),R0
    0000170E 7307                   ADD         #7,R3
    00001710              L717:                             
    00001710 912F                   MOV.W       L982+2,R1  ; H'04F0
    00001712 4321                   SHAR        R3
    00001714 4321                   SHAR        R3
    00001716 4321                   SHAR        R3
    00001718 31FC                   ADD         R15,R1
    0000171A 6112                   MOV.L       @R1,R1
    0000171C 5213                   MOV.L       @(12,R1),R2
    0000171E 0327                   MUL.L       R2,R3
    00001720 9126                   MOV.W       L982,R1    ; H'04C4
    00001722 31FC                   ADD         R15,R1
    00001724 6112                   MOV.L       @R1,R1
    00001726 7106                   ADD         #6,R1
    00001728 4111                   CMP/PZ      R1
    0000172A 8D01                   BT/S        L718
    0000172C 031A                   STS         MACL,R3
    0000172E 7107                   ADD         #7,R1
    00001730              L718:                             
    00001730 5002                   MOV.L       @(8,R0),R0
    00001732 4121                   SHAR        R1
    00001734 4121                   SHAR        R1
    00001736 4121                   SHAR        R1
    00001738 331C                   ADD         R1,R3
    0000173A 003C                   MOV.B       @(R0,R3),R0
    0000173C 880F                   CMP/EQ      #15,R0
    0000173E 894A                   BT          L714
    00001740 9017                   MOV.W       L982+2,R0  ; H'04F0
    00001742 9118                   MOV.W       L982+6,R1  ; H'04C8
    00001744 31FC                   ADD         R15,R1
    00001746 6312                   MOV.L       @R1,R3
    00001748 7306                   ADD         #6,R3
    0000174A 4311                   CMP/PZ      R3
    0000174C 8D01                   BT/S        L719
    0000174E 00FE                   MOV.L       @(R0,R15),R0
    00001750 7307                   ADD         #7,R3
    00001752              L719:                             
    00001752 4321                   SHAR        R3
    00001754 910D                   MOV.W       L982+2,R1  ; H'04F0
    00001756 4321                   SHAR        R3
    00001758 4321                   SHAR        R3
    0000175A 31FC                   ADD         R15,R1
    0000175C 6112                   MOV.L       @R1,R1
    0000175E 5213                   MOV.L       @(12,R1),R2
    00001760 9106                   MOV.W       L982,R1    ; H'04C4
    00001762 0327                   MUL.L       R2,R3
    00001764 31FC                   ADD         R15,R1
    00001766 6112                   MOV.L       @R1,R1
    00001768 7101                   ADD         #1,R1
    0000176A 4111                   CMP/PZ      R1
    0000176C A005                   BRA         L930
    0000176E 031A                   STS         MACL,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001770              L982:                             
    00001770 04C4                   .DATA.W     H'04C4
    00001772 04F0                   .DATA.W     H'04F0
    00001774 04EC                   .DATA.W     H'04EC
    00001776 04C8                   .DATA.W     H'04C8
    00001778 04E2                   .DATA.W     H'04E2
    0000177A              L930:                             
    0000177A 8D01                   BT/S        L720
    0000177C 0009                   NOP
    0000177E 7107                   ADD         #7,R1
    00001780              L720:                             
    00001780 5002                   MOV.L       @(8,R0),R0
    00001782 4121                   SHAR        R1
    00001784 4121                   SHAR        R1
    00001786 4121                   SHAR        R1
    00001788 331C                   ADD         R1,R3
    0000178A 003C                   MOV.B       @(R0,R3),R0
    0000178C 880F                   CMP/EQ      #15,R0
    0000178E 8922                   BT          L714
    00001790 908E                   MOV.W       L984,R0    ; H'04F0
    00001792 918E                   MOV.W       L984+2,R1  ; H'04C8
    00001794 31FC                   ADD         R15,R1
    00001796 6312                   MOV.L       @R1,R3
    00001798 7306                   ADD         #6,R3
    0000179A 4311                   CMP/PZ      R3
    0000179C 8D01                   BT/S        L721
    0000179E 00FE                   MOV.L       @(R0,R15),R0
    000017A0 7307                   ADD         #7,R3
    000017A2              L721:                             
    000017A2 4321                   SHAR        R3
    000017A4 9184                   MOV.W       L984,R1    ; H'04F0
    000017A6 4321                   SHAR        R3
    000017A8 4321                   SHAR        R3
    000017AA 31FC                   ADD         R15,R1
    000017AC 6112                   MOV.L       @R1,R1
    000017AE 5213                   MOV.L       @(12,R1),R2
    000017B0 9180                   MOV.W       L984+4,R1  ; H'04C4
    000017B2 0327                   MUL.L       R2,R3
    000017B4 31FC                   ADD         R15,R1
    000017B6 6112                   MOV.L       @R1,R1
    000017B8 7106                   ADD         #6,R1
    000017BA 4111                   CMP/PZ      R1
    000017BC 8D01                   BT/S        L722
    000017BE 031A                   STS         MACL,R3
    000017C0 7107                   ADD         #7,R1
    000017C2              L722:                             
    000017C2 4121                   SHAR        R1
    000017C4 5002                   MOV.L       @(8,R0),R0
    000017C6 4121                   SHAR        R1
    000017C8 4121                   SHAR        R1
    000017CA 331C                   ADD         R1,R3
    000017CC 003C                   MOV.B       @(R0,R3),R0
    000017CE 880F                   CMP/EQ      #15,R0
    000017D0 8901                   BT          L985
    000017D2 A101                   BRA         L713
    000017D4 0009                   NOP
    000017D6              L985:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017D6              L714:                             
          game.c   271                            {
          game.c   272                                    dead = 1;
    000017D6 E201                   MOV         #1,R2
    000017D8 906D                   MOV.W       L984+6,R0  ; H'04E2
    000017DA 0F24                   MOV.B       R2,@(R0,R15)
          game.c   273                                    if(level->map[(orton.y+1)/8*level->width+(orton.x+1)/8] == FAKE_PRINCESS) 
                         +level->map[(orton.y+1)/8*level->width+(orton.x+1)/8] = EMPTY;
    000017DC 9068                   MOV.W       L984,R0    ; H'04F0
    000017DE 9168                   MOV.W       L984+2,R1  ; H'04C8
    000017E0 31FC                   ADD         R15,R1
    000017E2 6312                   MOV.L       @R1,R3
    000017E4 7301                   ADD         #1,R3
    000017E6 4311                   CMP/PZ      R3
    000017E8 8D01                   BT/S        L724
    000017EA 00FE                   MOV.L       @(R0,R15),R0
    000017EC 7307                   ADD         #7,R3
    000017EE              L724:                             
    000017EE 4321                   SHAR        R3
    000017F0 915E                   MOV.W       L984,R1    ; H'04F0
    000017F2 4321                   SHAR        R3
    000017F4 4321                   SHAR        R3
    000017F6 31FC                   ADD         R15,R1
    000017F8 6112                   MOV.L       @R1,R1
    000017FA 5213                   MOV.L       @(12,R1),R2
    000017FC 915A                   MOV.W       L984+4,R1  ; H'04C4
    000017FE 0327                   MUL.L       R2,R3
    00001800 31FC                   ADD         R15,R1
    00001802 6112                   MOV.L       @R1,R1
    00001804 7101                   ADD         #1,R1
    00001806 4111                   CMP/PZ      R1
    00001808 8D01                   BT/S        L725
    0000180A 031A                   STS         MACL,R3
    0000180C 7107                   ADD         #7,R1
    0000180E              L725:                             
    0000180E 4121                   SHAR        R1
    00001810 5002                   MOV.L       @(8,R0),R0
    00001812 4121                   SHAR        R1
    00001814 4121                   SHAR        R1
    00001816 331C                   ADD         R1,R3
    00001818 003C                   MOV.B       @(R0,R3),R0
    0000181A 880F                   CMP/EQ      #15,R0
    0000181C 8B1C                   BF          L723
    0000181E 9047                   MOV.W       L984,R0    ; H'04F0
    00001820 02FE                   MOV.L       @(R0,R15),R2
    00001822 9046                   MOV.W       L984+2,R0  ; H'04C8
    00001824 03FE                   MOV.L       @(R0,R15),R3
    00001826 7301                   ADD         #1,R3
    00001828 4311                   CMP/PZ      R3
    0000182A 8900                   BT          L726
    0000182C 7307                   ADD         #7,R3
    0000182E              L726:                             
    0000182E 4321                   SHAR        R3
    00001830 903E                   MOV.W       L984,R0    ; H'04F0
    00001832 4321                   SHAR        R3
    00001834 00FE                   MOV.L       @(R0,R15),R0
    00001836 4321                   SHAR        R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001838 5103                   MOV.L       @(12,R0),R1
    0000183A 0317                   MUL.L       R1,R3
    0000183C 903A                   MOV.W       L984+4,R0  ; H'04C4
    0000183E 00FE                   MOV.L       @(R0,R15),R0
    00001840 7001                   ADD         #1,R0
    00001842 4011                   CMP/PZ      R0
    00001844 8D01                   BT/S        L727
    00001846 031A                   STS         MACL,R3
    00001848 7007                   ADD         #7,R0
    0000184A              L727:                             
    0000184A 4021                   SHAR        R0
    0000184C 4021                   SHAR        R0
    0000184E 4021                   SHAR        R0
    00001850 330C                   ADD         R0,R3
    00001852 5022                   MOV.L       @(8,R2),R0
    00001854 E200                   MOV         #0,R2
    00001856 0324                   MOV.B       R2,@(R0,R3)
    00001858              L723:                             
          game.c   274                                    if(level->map[(orton.y+1)/8*level->width+(orton.x+6)/8] == FAKE_PRINCESS) 
                         +level->map[(orton.y+1)/8*level->width+(orton.x+6)/8] = EMPTY;
    00001858 902A                   MOV.W       L984,R0    ; H'04F0
    0000185A 912A                   MOV.W       L984+2,R1  ; H'04C8
    0000185C 31FC                   ADD         R15,R1
    0000185E 6312                   MOV.L       @R1,R3
    00001860 7301                   ADD         #1,R3
    00001862 4311                   CMP/PZ      R3
    00001864 8D01                   BT/S        L729
    00001866 00FE                   MOV.L       @(R0,R15),R0
    00001868 7307                   ADD         #7,R3
    0000186A              L729:                             
    0000186A 4321                   SHAR        R3
    0000186C 9120                   MOV.W       L984,R1    ; H'04F0
    0000186E 4321                   SHAR        R3
    00001870 4321                   SHAR        R3
    00001872 31FC                   ADD         R15,R1
    00001874 6112                   MOV.L       @R1,R1
    00001876 5213                   MOV.L       @(12,R1),R2
    00001878 911C                   MOV.W       L984+4,R1  ; H'04C4
    0000187A 0327                   MUL.L       R2,R3
    0000187C 31FC                   ADD         R15,R1
    0000187E 6112                   MOV.L       @R1,R1
    00001880 7106                   ADD         #6,R1
    00001882 4111                   CMP/PZ      R1
    00001884 8D01                   BT/S        L730
    00001886 031A                   STS         MACL,R3
    00001888 7107                   ADD         #7,R1
    0000188A              L730:                             
    0000188A 4121                   SHAR        R1
    0000188C 5002                   MOV.L       @(8,R0),R0
    0000188E 4121                   SHAR        R1
    00001890 4121                   SHAR        R1
    00001892 331C                   ADD         R1,R3
    00001894 003C                   MOV.B       @(R0,R3),R0
    00001896 880F                   CMP/EQ      #15,R0
    00001898 8B22                   BF          L728
    0000189A 9009                   MOV.W       L984,R0    ; H'04F0
    0000189C 02FE                   MOV.L       @(R0,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000189E 9008                   MOV.W       L984+2,R0  ; H'04C8
    000018A0 03FE                   MOV.L       @(R0,R15),R3
    000018A2 7301                   ADD         #1,R3
    000018A4 4311                   CMP/PZ      R3
    000018A6 8900                   BT          L731
    000018A8 7307                   ADD         #7,R3
    000018AA              L731:                             
    000018AA 4321                   SHAR        R3
    000018AC A004                   BRA         L931
    000018AE 0009                   NOP
    000018B0              L984:                             
    000018B0 04F0                   .DATA.W     H'04F0
    000018B2 04C8                   .DATA.W     H'04C8
    000018B4 04C4                   .DATA.W     H'04C4
    000018B6 04E2                   .DATA.W     H'04E2
    000018B8              L931:                             
    000018B8 9095                   MOV.W       L986,R0    ; H'04F0
    000018BA 4321                   SHAR        R3
    000018BC 00FE                   MOV.L       @(R0,R15),R0
    000018BE 4321                   SHAR        R3
    000018C0 5103                   MOV.L       @(12,R0),R1
    000018C2 0317                   MUL.L       R1,R3
    000018C4 9090                   MOV.W       L986+2,R0  ; H'04C4
    000018C6 00FE                   MOV.L       @(R0,R15),R0
    000018C8 7006                   ADD         #6,R0
    000018CA 4011                   CMP/PZ      R0
    000018CC 8D01                   BT/S        L732
    000018CE 031A                   STS         MACL,R3
    000018D0 7007                   ADD         #7,R0
    000018D2              L732:                             
    000018D2 4021                   SHAR        R0
    000018D4 4021                   SHAR        R0
    000018D6 4021                   SHAR        R0
    000018D8 330C                   ADD         R0,R3
    000018DA 5022                   MOV.L       @(8,R2),R0
    000018DC E200                   MOV         #0,R2
    000018DE 0324                   MOV.B       R2,@(R0,R3)
    000018E0              L728:                             
          game.c   275                                    if(level->map[(orton.y+6)/8*level->width+(orton.x+1)/8] == FAKE_PRINCESS) 
                         +level->map[(orton.y+6)/8*level->width+(orton.x+1)/8] = EMPTY;
    000018E0 9081                   MOV.W       L986,R0    ; H'04F0
    000018E2 9182                   MOV.W       L986+4,R1  ; H'04C8
    000018E4 31FC                   ADD         R15,R1
    000018E6 6312                   MOV.L       @R1,R3
    000018E8 7306                   ADD         #6,R3
    000018EA 4311                   CMP/PZ      R3
    000018EC 8D01                   BT/S        L734
    000018EE 00FE                   MOV.L       @(R0,R15),R0
    000018F0 7307                   ADD         #7,R3
    000018F2              L734:                             
    000018F2 4321                   SHAR        R3
    000018F4 9177                   MOV.W       L986,R1    ; H'04F0
    000018F6 4321                   SHAR        R3
    000018F8 4321                   SHAR        R3
    000018FA 31FC                   ADD         R15,R1
    000018FC 6112                   MOV.L       @R1,R1
    000018FE 5213                   MOV.L       @(12,R1),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001900 9172                   MOV.W       L986+2,R1  ; H'04C4
    00001902 0327                   MUL.L       R2,R3
    00001904 31FC                   ADD         R15,R1
    00001906 6112                   MOV.L       @R1,R1
    00001908 7101                   ADD         #1,R1
    0000190A 4111                   CMP/PZ      R1
    0000190C 8D01                   BT/S        L735
    0000190E 031A                   STS         MACL,R3
    00001910 7107                   ADD         #7,R1
    00001912              L735:                             
    00001912 4121                   SHAR        R1
    00001914 5002                   MOV.L       @(8,R0),R0
    00001916 4121                   SHAR        R1
    00001918 4121                   SHAR        R1
    0000191A 331C                   ADD         R1,R3
    0000191C 003C                   MOV.B       @(R0,R3),R0
    0000191E 880F                   CMP/EQ      #15,R0
    00001920 8B1C                   BF          L733
    00001922 9060                   MOV.W       L986,R0    ; H'04F0
    00001924 02FE                   MOV.L       @(R0,R15),R2
    00001926 9060                   MOV.W       L986+4,R0  ; H'04C8
    00001928 03FE                   MOV.L       @(R0,R15),R3
    0000192A 7306                   ADD         #6,R3
    0000192C 4311                   CMP/PZ      R3
    0000192E 8900                   BT          L736
    00001930 7307                   ADD         #7,R3
    00001932              L736:                             
    00001932 4321                   SHAR        R3
    00001934 9057                   MOV.W       L986,R0    ; H'04F0
    00001936 4321                   SHAR        R3
    00001938 00FE                   MOV.L       @(R0,R15),R0
    0000193A 4321                   SHAR        R3
    0000193C 5103                   MOV.L       @(12,R0),R1
    0000193E 0317                   MUL.L       R1,R3
    00001940 9052                   MOV.W       L986+2,R0  ; H'04C4
    00001942 00FE                   MOV.L       @(R0,R15),R0
    00001944 7001                   ADD         #1,R0
    00001946 4011                   CMP/PZ      R0
    00001948 8D01                   BT/S        L737
    0000194A 031A                   STS         MACL,R3
    0000194C 7007                   ADD         #7,R0
    0000194E              L737:                             
    0000194E 4021                   SHAR        R0
    00001950 4021                   SHAR        R0
    00001952 4021                   SHAR        R0
    00001954 330C                   ADD         R0,R3
    00001956 5022                   MOV.L       @(8,R2),R0
    00001958 E200                   MOV         #0,R2
    0000195A 0324                   MOV.B       R2,@(R0,R3)
    0000195C              L733:                             
          game.c   276                                    if(level->map[(orton.y+6)/8*level->width+(orton.x+6)/8] == FAKE_PRINCESS) 
                         +level->map[(orton.y+6)/8*level->width+(orton.x+6)/8] = EMPTY;
    0000195C 9043                   MOV.W       L986,R0    ; H'04F0
    0000195E 9144                   MOV.W       L986+4,R1  ; H'04C8
    00001960 31FC                   ADD         R15,R1
    00001962 6312                   MOV.L       @R1,R3
    00001964 7306                   ADD         #6,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001966 4311                   CMP/PZ      R3
    00001968 8D01                   BT/S        L739
    0000196A 00FE                   MOV.L       @(R0,R15),R0
    0000196C 7307                   ADD         #7,R3
    0000196E              L739:                             
    0000196E 4321                   SHAR        R3
    00001970 9139                   MOV.W       L986,R1    ; H'04F0
    00001972 4321                   SHAR        R3
    00001974 4321                   SHAR        R3
    00001976 31FC                   ADD         R15,R1
    00001978 6112                   MOV.L       @R1,R1
    0000197A 5213                   MOV.L       @(12,R1),R2
    0000197C 9134                   MOV.W       L986+2,R1  ; H'04C4
    0000197E 0327                   MUL.L       R2,R3
    00001980 31FC                   ADD         R15,R1
    00001982 6112                   MOV.L       @R1,R1
    00001984 7106                   ADD         #6,R1
    00001986 4111                   CMP/PZ      R1
    00001988 8D01                   BT/S        L740
    0000198A 031A                   STS         MACL,R3
    0000198C 7107                   ADD         #7,R1
    0000198E              L740:                             
    0000198E 4121                   SHAR        R1
    00001990 5002                   MOV.L       @(8,R0),R0
    00001992 4121                   SHAR        R1
    00001994 4121                   SHAR        R1
    00001996 331C                   ADD         R1,R3
    00001998 003C                   MOV.B       @(R0,R3),R0
    0000199A 880F                   CMP/EQ      #15,R0
    0000199C 8B1C                   BF          L713
    0000199E 9022                   MOV.W       L986,R0    ; H'04F0
    000019A0 02FE                   MOV.L       @(R0,R15),R2
    000019A2 9022                   MOV.W       L986+4,R0  ; H'04C8
    000019A4 03FE                   MOV.L       @(R0,R15),R3
    000019A6 7306                   ADD         #6,R3
    000019A8 4311                   CMP/PZ      R3
    000019AA 8900                   BT          L741
    000019AC 7307                   ADD         #7,R3
    000019AE              L741:                             
    000019AE 4321                   SHAR        R3
    000019B0 9019                   MOV.W       L986,R0    ; H'04F0
    000019B2 4321                   SHAR        R3
    000019B4 00FE                   MOV.L       @(R0,R15),R0
    000019B6 4321                   SHAR        R3
    000019B8 5103                   MOV.L       @(12,R0),R1
    000019BA 0317                   MUL.L       R1,R3
    000019BC 9014                   MOV.W       L986+2,R0  ; H'04C4
    000019BE 00FE                   MOV.L       @(R0,R15),R0
    000019C0 7006                   ADD         #6,R0
    000019C2 4011                   CMP/PZ      R0
    000019C4 8D01                   BT/S        L742
    000019C6 031A                   STS         MACL,R3
    000019C8 7007                   ADD         #7,R0
    000019CA              L742:                             
    000019CA 4021                   SHAR        R0
    000019CC 4021                   SHAR        R0
    000019CE 4021                   SHAR        R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019D0 330C                   ADD         R0,R3
    000019D2 5022                   MOV.L       @(8,R2),R0
    000019D4 E200                   MOV         #0,R2
    000019D6 0324                   MOV.B       R2,@(R0,R3)
    000019D8              L713:                             
          game.c   277                            }
          game.c   278    
          game.c   279                            /** Orton & spikes **/
          game.c   280                            if(orton.x%8<2 && (
          game.c   281                               level->map[orton.y/8*level->width+orton.x/8] == SPIKE_LEFT ||
          game.c   282                               level->map[(orton.y+7)/8*level->width+orton.x/8] == SPIKE_LEFT))
    000019D8 9006                   MOV.W       L986+2,R0  ; H'04C4
    000019DA 00FE                   MOV.L       @(R0,R15),R0
    000019DC 4011                   CMP/PZ      R0
    000019DE 8F05                   BF/S        L744
    000019E0 E202                   MOV         #2,R2
    000019E2 A008                   BRA         L745
    000019E4 C907                   AND         #7,R0
    000019E6              L986:                             
    000019E6 04F0                   .DATA.W     H'04F0
    000019E8 04C4                   .DATA.W     H'04C4
    000019EA 04C8                   .DATA.W     H'04C8
    000019EC              L744:                             
    000019EC 6007                   NOT         R0,R0
    000019EE 7001                   ADD         #1,R0
    000019F0 C907                   AND         #7,R0
    000019F2 6007                   NOT         R0,R0
    000019F4 7001                   ADD         #1,R0
    000019F6              L745:                             
    000019F6 3023                   CMP/GE      R2,R0
    000019F8 8941                   BT          L743
    000019FA 9048                   MOV.W       L987,R0    ; H'04F0
    000019FC 9148                   MOV.W       L987+2,R1  ; H'04C8
    000019FE 31FC                   ADD         R15,R1
    00001A00 6312                   MOV.L       @R1,R3
    00001A02 4311                   CMP/PZ      R3
    00001A04 8D01                   BT/S        L747
    00001A06 00FE                   MOV.L       @(R0,R15),R0
    00001A08 7307                   ADD         #7,R3
    00001A0A              L747:                             
    00001A0A 4321                   SHAR        R3
    00001A0C 913F                   MOV.W       L987,R1    ; H'04F0
    00001A0E 4321                   SHAR        R3
    00001A10 923F                   MOV.W       L987+4,R2  ; H'04C4
    00001A12 31FC                   ADD         R15,R1
    00001A14 6112                   MOV.L       @R1,R1
    00001A16 32FC                   ADD         R15,R2
    00001A18 5113                   MOV.L       @(12,R1),R1
    00001A1A 4321                   SHAR        R3
    00001A1C 0317                   MUL.L       R1,R3
    00001A1E 6122                   MOV.L       @R2,R1
    00001A20 4111                   CMP/PZ      R1
    00001A22 8D01                   BT/S        L748
    00001A24 031A                   STS         MACL,R3
    00001A26 7107                   ADD         #7,R1
    00001A28              L748:                             
    00001A28 5002                   MOV.L       @(8,R0),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A2A 4121                   SHAR        R1
    00001A2C 4121                   SHAR        R1
    00001A2E 4121                   SHAR        R1
    00001A30 331C                   ADD         R1,R3
    00001A32 003C                   MOV.B       @(R0,R3),R0
    00001A34 8803                   CMP/EQ      #3,R0
    00001A36 891F                   BT          L746
    00001A38 9029                   MOV.W       L987,R0    ; H'04F0
    00001A3A 9129                   MOV.W       L987+2,R1  ; H'04C8
    00001A3C 31FC                   ADD         R15,R1
    00001A3E 6312                   MOV.L       @R1,R3
    00001A40 7307                   ADD         #7,R3
    00001A42 4311                   CMP/PZ      R3
    00001A44 8D01                   BT/S        L749
    00001A46 00FE                   MOV.L       @(R0,R15),R0
    00001A48 7307                   ADD         #7,R3
    00001A4A              L749:                             
    00001A4A 4321                   SHAR        R3
    00001A4C 911F                   MOV.W       L987,R1    ; H'04F0
    00001A4E 4321                   SHAR        R3
    00001A50 4321                   SHAR        R3
    00001A52 31FC                   ADD         R15,R1
    00001A54 6112                   MOV.L       @R1,R1
    00001A56 5213                   MOV.L       @(12,R1),R2
    00001A58 911B                   MOV.W       L987+4,R1  ; H'04C4
    00001A5A 0327                   MUL.L       R2,R3
    00001A5C 31FC                   ADD         R15,R1
    00001A5E 6112                   MOV.L       @R1,R1
    00001A60 4111                   CMP/PZ      R1
    00001A62 8D01                   BT/S        L750
    00001A64 031A                   STS         MACL,R3
    00001A66 7107                   ADD         #7,R1
    00001A68              L750:                             
    00001A68 5002                   MOV.L       @(8,R0),R0
    00001A6A 4121                   SHAR        R1
    00001A6C 4121                   SHAR        R1
    00001A6E 4121                   SHAR        R1
    00001A70 331C                   ADD         R1,R3
    00001A72 003C                   MOV.B       @(R0,R3),R0
    00001A74 8803                   CMP/EQ      #3,R0
    00001A76 8B02                   BF          L743
    00001A78              L746:                             
          game.c   283                                    dead = 1;
    00001A78 900C                   MOV.W       L987+6,R0  ; H'04E2
    00001A7A E201                   MOV         #1,R2
    00001A7C 0F24                   MOV.B       R2,@(R0,R15)
    00001A7E              L743:                             
          game.c   284                            if((orton.x+1)%8<2 && (
          game.c   285                               level->map[orton.y/8*level->width+(orton.x+1)/8] == SPIKE_RIGHT ||
          game.c   286                               level->map[(orton.y+7)/8*level->width+(orton.x+1)/8] == SPIKE_RIGHT))
    00001A7E 9008                   MOV.W       L987+4,R0  ; H'04C4
    00001A80 00FE                   MOV.L       @(R0,R15),R0
    00001A82 7001                   ADD         #1,R0
    00001A84 4011                   CMP/PZ      R0
    00001A86 8F06                   BF/S        L752
    00001A88 E202                   MOV         #2,R2
    00001A8A A009                   BRA         L753




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A8C C907                   AND         #7,R0
    00001A8E              L987:                             
    00001A8E 04F0                   .DATA.W     H'04F0
    00001A90 04C8                   .DATA.W     H'04C8
    00001A92 04C4                   .DATA.W     H'04C4
    00001A94 04E2                   .DATA.W     H'04E2
    00001A96              L752:                             
    00001A96 6007                   NOT         R0,R0
    00001A98 7001                   ADD         #1,R0
    00001A9A C907                   AND         #7,R0
    00001A9C 6007                   NOT         R0,R0
    00001A9E 7001                   ADD         #1,R0
    00001AA0              L753:                             
    00001AA0 3023                   CMP/GE      R2,R0
    00001AA2 8943                   BT          L751
    00001AA4 9049                   MOV.W       L988,R0    ; H'04F0
    00001AA6 9149                   MOV.W       L988+2,R1  ; H'04C8
    00001AA8 31FC                   ADD         R15,R1
    00001AAA 6312                   MOV.L       @R1,R3
    00001AAC 4311                   CMP/PZ      R3
    00001AAE 8D01                   BT/S        L755
    00001AB0 00FE                   MOV.L       @(R0,R15),R0
    00001AB2 7307                   ADD         #7,R3
    00001AB4              L755:                             
    00001AB4 9141                   MOV.W       L988,R1    ; H'04F0
    00001AB6 4321                   SHAR        R3
    00001AB8 4321                   SHAR        R3
    00001ABA 4321                   SHAR        R3
    00001ABC 31FC                   ADD         R15,R1
    00001ABE 6112                   MOV.L       @R1,R1
    00001AC0 5113                   MOV.L       @(12,R1),R1
    00001AC2 0317                   MUL.L       R1,R3
    00001AC4 913B                   MOV.W       L988+4,R1  ; H'04C4
    00001AC6 31FC                   ADD         R15,R1
    00001AC8 6112                   MOV.L       @R1,R1
    00001ACA 7101                   ADD         #1,R1
    00001ACC 4111                   CMP/PZ      R1
    00001ACE 8D01                   BT/S        L756
    00001AD0 031A                   STS         MACL,R3
    00001AD2 7107                   ADD         #7,R1
    00001AD4              L756:                             
    00001AD4 5002                   MOV.L       @(8,R0),R0
    00001AD6 4121                   SHAR        R1
    00001AD8 4121                   SHAR        R1
    00001ADA 4121                   SHAR        R1
    00001ADC 331C                   ADD         R1,R3
    00001ADE 003C                   MOV.B       @(R0,R3),R0
    00001AE0 8804                   CMP/EQ      #4,R0
    00001AE2 8920                   BT          L754
    00001AE4 9029                   MOV.W       L988,R0    ; H'04F0
    00001AE6 9129                   MOV.W       L988+2,R1  ; H'04C8
    00001AE8 31FC                   ADD         R15,R1
    00001AEA 6312                   MOV.L       @R1,R3
    00001AEC 7307                   ADD         #7,R3
    00001AEE 4311                   CMP/PZ      R3
    00001AF0 8D01                   BT/S        L757
    00001AF2 00FE                   MOV.L       @(R0,R15),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001AF4 7307                   ADD         #7,R3
    00001AF6              L757:                             
    00001AF6 4321                   SHAR        R3
    00001AF8 911F                   MOV.W       L988,R1    ; H'04F0
    00001AFA 4321                   SHAR        R3
    00001AFC 4321                   SHAR        R3
    00001AFE 31FC                   ADD         R15,R1
    00001B00 6112                   MOV.L       @R1,R1
    00001B02 5213                   MOV.L       @(12,R1),R2
    00001B04 911B                   MOV.W       L988+4,R1  ; H'04C4
    00001B06 0327                   MUL.L       R2,R3
    00001B08 31FC                   ADD         R15,R1
    00001B0A 6112                   MOV.L       @R1,R1
    00001B0C 7101                   ADD         #1,R1
    00001B0E 4111                   CMP/PZ      R1
    00001B10 8D01                   BT/S        L758
    00001B12 031A                   STS         MACL,R3
    00001B14 7107                   ADD         #7,R1
    00001B16              L758:                             
    00001B16 4121                   SHAR        R1
    00001B18 5002                   MOV.L       @(8,R0),R0
    00001B1A 4121                   SHAR        R1
    00001B1C 4121                   SHAR        R1
    00001B1E 331C                   ADD         R1,R3
    00001B20 003C                   MOV.B       @(R0,R3),R0
    00001B22 8804                   CMP/EQ      #4,R0
    00001B24 8B02                   BF          L751
    00001B26              L754:                             
          game.c   287                                    dead = 1;
    00001B26 E201                   MOV         #1,R2
    00001B28 900A                   MOV.W       L988+6,R0  ; H'04E2
    00001B2A 0F24                   MOV.B       R2,@(R0,R15)
    00001B2C              L751:                             
          game.c   288                            if(orton.y%8<2 && (
          game.c   289                               level->map[orton.y/8*level->width+(orton.x+1)/8] == SPIKE_UP ||
          game.c   290                               level->map[orton.y/8*level->width+(orton.x+6)/8] == SPIKE_UP))
    00001B2C 9006                   MOV.W       L988+2,R0  ; H'04C8
    00001B2E 00FE                   MOV.L       @(R0,R15),R0
    00001B30 4011                   CMP/PZ      R0
    00001B32 8F06                   BF/S        L760
    00001B34 E202                   MOV         #2,R2
    00001B36 A009                   BRA         L761
    00001B38 C907                   AND         #7,R0
    00001B3A              L988:                             
    00001B3A 04F0                   .DATA.W     H'04F0
    00001B3C 04C8                   .DATA.W     H'04C8
    00001B3E 04C4                   .DATA.W     H'04C4
    00001B40 04E2                   .DATA.W     H'04E2
    00001B42              L760:                             
    00001B42 6007                   NOT         R0,R0
    00001B44 7001                   ADD         #1,R0
    00001B46 C907                   AND         #7,R0
    00001B48 6007                   NOT         R0,R0
    00001B4A 7001                   ADD         #1,R0
    00001B4C              L761:                             
    00001B4C 3023                   CMP/GE      R2,R0
    00001B4E 8942                   BT          L759




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B50 9048                   MOV.W       L989,R0    ; H'04F0
    00001B52 9148                   MOV.W       L989+2,R1  ; H'04C8
    00001B54 31FC                   ADD         R15,R1
    00001B56 6312                   MOV.L       @R1,R3
    00001B58 4311                   CMP/PZ      R3
    00001B5A 8D01                   BT/S        L763
    00001B5C 00FE                   MOV.L       @(R0,R15),R0
    00001B5E 7307                   ADD         #7,R3
    00001B60              L763:                             
    00001B60 9140                   MOV.W       L989,R1    ; H'04F0
    00001B62 4321                   SHAR        R3
    00001B64 4321                   SHAR        R3
    00001B66 4321                   SHAR        R3
    00001B68 31FC                   ADD         R15,R1
    00001B6A 6112                   MOV.L       @R1,R1
    00001B6C 5113                   MOV.L       @(12,R1),R1
    00001B6E 0317                   MUL.L       R1,R3
    00001B70 913A                   MOV.W       L989+4,R1  ; H'04C4
    00001B72 31FC                   ADD         R15,R1
    00001B74 6112                   MOV.L       @R1,R1
    00001B76 7101                   ADD         #1,R1
    00001B78 4111                   CMP/PZ      R1
    00001B7A 8D01                   BT/S        L764
    00001B7C 031A                   STS         MACL,R3
    00001B7E 7107                   ADD         #7,R1
    00001B80              L764:                             
    00001B80 5002                   MOV.L       @(8,R0),R0
    00001B82 4121                   SHAR        R1
    00001B84 4121                   SHAR        R1
    00001B86 4121                   SHAR        R1
    00001B88 331C                   ADD         R1,R3
    00001B8A 003C                   MOV.B       @(R0,R3),R0
    00001B8C 8805                   CMP/EQ      #5,R0
    00001B8E 891F                   BT          L762
    00001B90 9028                   MOV.W       L989,R0    ; H'04F0
    00001B92 9128                   MOV.W       L989+2,R1  ; H'04C8
    00001B94 31FC                   ADD         R15,R1
    00001B96 6312                   MOV.L       @R1,R3
    00001B98 4311                   CMP/PZ      R3
    00001B9A 8D01                   BT/S        L765
    00001B9C 00FE                   MOV.L       @(R0,R15),R0
    00001B9E 7307                   ADD         #7,R3
    00001BA0              L765:                             
    00001BA0 9120                   MOV.W       L989,R1    ; H'04F0
    00001BA2 4321                   SHAR        R3
    00001BA4 4321                   SHAR        R3
    00001BA6 4321                   SHAR        R3
    00001BA8 31FC                   ADD         R15,R1
    00001BAA 6212                   MOV.L       @R1,R2
    00001BAC 911C                   MOV.W       L989+4,R1  ; H'04C4
    00001BAE 5223                   MOV.L       @(12,R2),R2
    00001BB0 0327                   MUL.L       R2,R3
    00001BB2 31FC                   ADD         R15,R1
    00001BB4 6112                   MOV.L       @R1,R1
    00001BB6 7106                   ADD         #6,R1
    00001BB8 4111                   CMP/PZ      R1
    00001BBA 8D01                   BT/S        L766




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001BBC 031A                   STS         MACL,R3
    00001BBE 7107                   ADD         #7,R1
    00001BC0              L766:                             
    00001BC0 5002                   MOV.L       @(8,R0),R0
    00001BC2 4121                   SHAR        R1
    00001BC4 4121                   SHAR        R1
    00001BC6 4121                   SHAR        R1
    00001BC8 331C                   ADD         R1,R3
    00001BCA 003C                   MOV.B       @(R0,R3),R0
    00001BCC 8805                   CMP/EQ      #5,R0
    00001BCE 8B02                   BF          L759
    00001BD0              L762:                             
          game.c   291                                    dead = 1;
    00001BD0 900B                   MOV.W       L989+6,R0  ; H'04E2
    00001BD2 E201                   MOV         #1,R2
    00001BD4 0F24                   MOV.B       R2,@(R0,R15)
    00001BD6              L759:                             
          game.c   292                            if(orton.y%8<2 && (
          game.c   293                               level->map[orton.y/8*level->width+(orton.x+1)/8] == SPIKE_DOWN ||
          game.c   294                               level->map[orton.y/8*level->width+(orton.x+6)/8] == SPIKE_DOWN))
    00001BD6 9006                   MOV.W       L989+2,R0  ; H'04C8
    00001BD8 00FE                   MOV.L       @(R0,R15),R0
    00001BDA 4011                   CMP/PZ      R0
    00001BDC 8F06                   BF/S        L768
    00001BDE E202                   MOV         #2,R2
    00001BE0 A009                   BRA         L769
    00001BE2 C907                   AND         #7,R0
    00001BE4              L989:                             
    00001BE4 04F0                   .DATA.W     H'04F0
    00001BE6 04C8                   .DATA.W     H'04C8
    00001BE8 04C4                   .DATA.W     H'04C4
    00001BEA 04E2                   .DATA.W     H'04E2
    00001BEC              L768:                             
    00001BEC 6007                   NOT         R0,R0
    00001BEE 7001                   ADD         #1,R0
    00001BF0 C907                   AND         #7,R0
    00001BF2 6007                   NOT         R0,R0
    00001BF4 7001                   ADD         #1,R0
    00001BF6              L769:                             
    00001BF6 3023                   CMP/GE      R2,R0
    00001BF8 8942                   BT          L767
    00001BFA 9079                   MOV.W       L990,R0    ; H'04F0
    00001BFC 9179                   MOV.W       L990+2,R1  ; H'04C8
    00001BFE 31FC                   ADD         R15,R1
    00001C00 6312                   MOV.L       @R1,R3
    00001C02 4311                   CMP/PZ      R3
    00001C04 8D01                   BT/S        L771
    00001C06 00FE                   MOV.L       @(R0,R15),R0
    00001C08 7307                   ADD         #7,R3
    00001C0A              L771:                             
    00001C0A 4321                   SHAR        R3
    00001C0C 9170                   MOV.W       L990,R1    ; H'04F0
    00001C0E 4321                   SHAR        R3
    00001C10 4321                   SHAR        R3
    00001C12 31FC                   ADD         R15,R1
    00001C14 6112                   MOV.L       @R1,R1
    00001C16 5113                   MOV.L       @(12,R1),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C18 0317                   MUL.L       R1,R3
    00001C1A 916B                   MOV.W       L990+4,R1  ; H'04C4
    00001C1C 31FC                   ADD         R15,R1
    00001C1E 6112                   MOV.L       @R1,R1
    00001C20 7101                   ADD         #1,R1
    00001C22 4111                   CMP/PZ      R1
    00001C24 8D01                   BT/S        L772
    00001C26 031A                   STS         MACL,R3
    00001C28 7107                   ADD         #7,R1
    00001C2A              L772:                             
    00001C2A 4121                   SHAR        R1
    00001C2C 5002                   MOV.L       @(8,R0),R0
    00001C2E 4121                   SHAR        R1
    00001C30 4121                   SHAR        R1
    00001C32 331C                   ADD         R1,R3
    00001C34 003C                   MOV.B       @(R0,R3),R0
    00001C36 8806                   CMP/EQ      #6,R0
    00001C38 891F                   BT          L770
    00001C3A 9059                   MOV.W       L990,R0    ; H'04F0
    00001C3C 9159                   MOV.W       L990+2,R1  ; H'04C8
    00001C3E 31FC                   ADD         R15,R1
    00001C40 6312                   MOV.L       @R1,R3
    00001C42 4311                   CMP/PZ      R3
    00001C44 8D01                   BT/S        L773
    00001C46 00FE                   MOV.L       @(R0,R15),R0
    00001C48 7307                   ADD         #7,R3
    00001C4A              L773:                             
    00001C4A 4321                   SHAR        R3
    00001C4C 9150                   MOV.W       L990,R1    ; H'04F0
    00001C4E 4321                   SHAR        R3
    00001C50 4321                   SHAR        R3
    00001C52 31FC                   ADD         R15,R1
    00001C54 6212                   MOV.L       @R1,R2
    00001C56 5223                   MOV.L       @(12,R2),R2
    00001C58 914C                   MOV.W       L990+4,R1  ; H'04C4
    00001C5A 0327                   MUL.L       R2,R3
    00001C5C 31FC                   ADD         R15,R1
    00001C5E 6112                   MOV.L       @R1,R1
    00001C60 7106                   ADD         #6,R1
    00001C62 4111                   CMP/PZ      R1
    00001C64 8D01                   BT/S        L774
    00001C66 031A                   STS         MACL,R3
    00001C68 7107                   ADD         #7,R1
    00001C6A              L774:                             
    00001C6A 4121                   SHAR        R1
    00001C6C 5002                   MOV.L       @(8,R0),R0
    00001C6E 4121                   SHAR        R1
    00001C70 4121                   SHAR        R1
    00001C72 331C                   ADD         R1,R3
    00001C74 003C                   MOV.B       @(R0,R3),R0
    00001C76 8806                   CMP/EQ      #6,R0
    00001C78 8B02                   BF          L767
    00001C7A              L770:                             
          game.c   295                                    dead = 1;
    00001C7A E201                   MOV         #1,R2
    00001C7C 903B                   MOV.W       L990+6,R0  ; H'04E2
    00001C7E 0F24                   MOV.B       R2,@(R0,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C80              L767:                             
          game.c   296    
          game.c   297                            /** Orton & bullets **/
          game.c   298                            for(i=0 ; i<nb_bullets ; i++)
    00001C80 A02C                   BRA         L916
    00001C82 E300                   MOV         #0,R3
    00001C84              L776:                             
          game.c   299                            {
          game.c   300                                    if(abs(orton.x-bullet[i].x+3)<=4 && abs(orton.y-bullet[i].y+3)<=4)
    00001C84 9038                   MOV.W       L990+8,R0  ; H'04EC
    00001C86 01FE                   MOV.L       @(R0,R15),R1
    00001C88 9237                   MOV.W       L990+10,R2 ; H'0220
    00001C8A 6313                   MOV         R1,R3
    00001C8C 9032                   MOV.W       L990+4,R0  ; H'04C4
    00001C8E 32FC                   ADD         R15,R2
    00001C90 04FE                   MOV.L       @(R0,R15),R4
    00001C92 4108                   SHLL2       R1
    00001C94 313C                   ADD         R3,R1
    00001C96 4108                   SHLL2       R1
    00001C98 312C                   ADD         R2,R1
    00001C9A 6312                   MOV.L       @R1,R3
    00001C9C 3438                   SUB         R3,R4
    00001C9E D317                   MOV.L       L990+12,R3 ; _abs
    00001CA0 430B                   JSR         @R3
    00001CA2 7403                   ADD         #3,R4
    00001CA4 E204                   MOV         #4,R2
    00001CA6 3027                   CMP/GT      R2,R0
    00001CA8 8915                   BT          L777
    00001CAA 9025                   MOV.W       L990+8,R0  ; H'04EC
    00001CAC 01FE                   MOV.L       @(R0,R15),R1
    00001CAE 6313                   MOV         R1,R3
    00001CB0 901F                   MOV.W       L990+2,R0  ; H'04C8
    00001CB2 4108                   SHLL2       R1
    00001CB4 04FE                   MOV.L       @(R0,R15),R4
    00001CB6 313C                   ADD         R3,R1
    00001CB8 931F                   MOV.W       L990+10,R3 ; H'0220
    00001CBA 4108                   SHLL2       R1
    00001CBC 33FC                   ADD         R15,R3
    00001CBE 313C                   ADD         R3,R1
    00001CC0 5111                   MOV.L       @(4,R1),R1
    00001CC2 3418                   SUB         R1,R4
    00001CC4 D10D                   MOV.L       L990+12,R1 ; _abs
    00001CC6 410B                   JSR         @R1
    00001CC8 7403                   ADD         #3,R4
    00001CCA E304                   MOV         #4,R3
    00001CCC 3037                   CMP/GT      R3,R0
    00001CCE 8902                   BT          L777
          game.c   301                                            dead = 1;
    00001CD0 9011                   MOV.W       L990+6,R0  ; H'04E2
    00001CD2 E101                   MOV         #1,R1
    00001CD4 0F14                   MOV.B       R1,@(R0,R15)
    00001CD6              L777:                             
    00001CD6 900F                   MOV.W       L990+8,R0  ; H'04EC
    00001CD8 03FE                   MOV.L       @(R0,R15),R3
    00001CDA 7301                   ADD         #1,R3
    00001CDC              L916:                             
    00001CDC 900C                   MOV.W       L990+8,R0  ; H'04EC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CDE 6133                   MOV         R3,R1
    00001CE0 0F36                   MOV.L       R3,@(R0,R15)
    00001CE2 52F7                   MOV.L       @(28,R15),R2
    00001CE4 3123                   CMP/GE      R2,R1
    00001CE6 8BCD                   BF          L776
          game.c   302                            }
          game.c   303    
          game.c   304                            /** Orton & stones **/
          game.c   305                            for(i=0 ; i<nb_stones ; i++)
    00001CE8 9006                   MOV.W       L990+8,R0  ; H'04EC
    00001CEA E300                   MOV         #0,R3
    00001CEC A0F1                   BRA         L778
    00001CEE 0F36                   MOV.L       R3,@(R0,R15)
    00001CF0              L990:                             
    00001CF0 04F0                   .DATA.W     H'04F0
    00001CF2 04C8                   .DATA.W     H'04C8
    00001CF4 04C4                   .DATA.W     H'04C4
    00001CF6 04E2                   .DATA.W     H'04E2
    00001CF8 04EC                   .DATA.W     H'04EC
    00001CFA 0220                   .DATA.W     H'0220
    00001CFC <00000000>             .DATA.L     _abs
    00001D00              L779:                             
          game.c   306                            {
          game.c   307                                    if(stone[i].dy > 1)
    00001D00 9096                   MOV.W       L991,R0    ; H'04EC
    00001D02 63F3                   MOV         R15,R3
    00001D04 01FE                   MOV.L       @(R0,R15),R1
    00001D06 E201                   MOV         #1,R2
    00001D08 4108                   SHLL2       R1
    00001D0A 4108                   SHLL2       R1
    00001D0C 7320                   ADD         #32,R3
    00001D0E 313C                   ADD         R3,R1
    00001D10 5013                   MOV.L       @(12,R1),R0
    00001D12 3027                   CMP/GT      R2,R0
    00001D14 8B4A                   BF          L780
          game.c   308                                    {
          game.c   309                                            if(stone[i].x+2>=orton.x+1 && stone[i].x<=orton.x+6 && stone[i].y+
                         +2>=orton.y && stone[i].y<=orton.y+7)
    00001D16 908B                   MOV.W       L991,R0    ; H'04EC
    00001D18 01FE                   MOV.L       @(R0,R15),R1
    00001D1A 4108                   SHLL2       R1
    00001D1C 9089                   MOV.W       L991+2,R0  ; H'04C4
    00001D1E 4108                   SHLL2       R1
    00001D20 00FE                   MOV.L       @(R0,R15),R0
    00001D22 313C                   ADD         R3,R1
    00001D24 6112                   MOV.L       @R1,R1
    00001D26 320C                   ADD         R0,R2
    00001D28 7102                   ADD         #2,R1
    00001D2A 3123                   CMP/GE      R2,R1
    00001D2C 8901                   BT          L992
    00001D2E A0CB                   BRA         L782
    00001D30 0009                   NOP
    00001D32              L992:                             
    00001D32 907D                   MOV.W       L991,R0    ; H'04EC
    00001D34 01FE                   MOV.L       @(R0,R15),R1
    00001D36 4108                   SHLL2       R1
    00001D38 907B                   MOV.W       L991+2,R0  ; H'04C4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D3A 4108                   SHLL2       R1
    00001D3C 02FE                   MOV.L       @(R0,R15),R2
    00001D3E 313C                   ADD         R3,R1
    00001D40 6112                   MOV.L       @R1,R1
    00001D42 7206                   ADD         #6,R2
    00001D44 3127                   CMP/GT      R2,R1
    00001D46 8B01                   BF          L993
    00001D48 A0BE                   BRA         L782
    00001D4A 0009                   NOP
    00001D4C              L993:                             
    00001D4C 9070                   MOV.W       L991,R0    ; H'04EC
    00001D4E 00FE                   MOV.L       @(R0,R15),R0
    00001D50 4008                   SHLL2       R0
    00001D52 4008                   SHLL2       R0
    00001D54 303C                   ADD         R3,R0
    00001D56 5201                   MOV.L       @(4,R0),R2
    00001D58 906C                   MOV.W       L991+4,R0  ; H'04C8
    00001D5A 7202                   ADD         #2,R2
    00001D5C 01FE                   MOV.L       @(R0,R15),R1
    00001D5E 3213                   CMP/GE      R1,R2
    00001D60 8901                   BT          L994
    00001D62 A0B1                   BRA         L782
    00001D64 0009                   NOP
    00001D66              L994:                             
    00001D66 9063                   MOV.W       L991,R0    ; H'04EC
    00001D68 02FE                   MOV.L       @(R0,R15),R2
    00001D6A 4208                   SHLL2       R2
    00001D6C 9062                   MOV.W       L991+4,R0  ; H'04C8
    00001D6E 4208                   SHLL2       R2
    00001D70 01FE                   MOV.L       @(R0,R15),R1
    00001D72 323C                   ADD         R3,R2
    00001D74 5221                   MOV.L       @(4,R2),R2
    00001D76 7107                   ADD         #7,R1
    00001D78 3217                   CMP/GT      R1,R2
    00001D7A 8B01                   BF          L995
    00001D7C A0A4                   BRA         L782
    00001D7E 0009                   NOP
    00001D80              L995:                             
          game.c   310                                            {
          game.c   311                                                    orton.dy = 2;
    00001D80 9059                   MOV.W       L991+6,R0  ; H'04D0
          game.c   312                                                    stone[i].dy = -1;
    00001D82 E1FF                   MOV         #-1,R1
    00001D84 E302                   MOV         #2,R3
    00001D86 0F36                   MOV.L       R3,@(R0,R15)
    00001D88 9052                   MOV.W       L991,R0    ; H'04EC
    00001D8A 63F3                   MOV         R15,R3
    00001D8C 02FE                   MOV.L       @(R0,R15),R2
    00001D8E 7320                   ADD         #32,R3
          game.c   313                                                    stone[i].y = orton.y-2;
    00001D90 904E                   MOV.W       L991,R0    ; H'04EC
    00001D92 4208                   SHLL2       R2
    00001D94 4208                   SHLL2       R2
    00001D96 323C                   ADD         R3,R2
    00001D98 1213                   MOV.L       R1,@(12,R2)
    00001D9A 02FE                   MOV.L       @(R0,R15),R2
    00001D9C 904A                   MOV.W       L991+4,R0  ; H'04C8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D9E 4208                   SHLL2       R2
    00001DA0 01FE                   MOV.L       @(R0,R15),R1
    00001DA2 4208                   SHLL2       R2
    00001DA4 323C                   ADD         R3,R2
    00001DA6 71FE                   ADD         #-2,R1
    00001DA8 A08E                   BRA         L782
    00001DAA 1211                   MOV.L       R1,@(4,R2)
    00001DAC              L780:                             
          game.c   314                                            }
          game.c   315                                    }
          game.c   316                                    else if(stone[i].x+2>=orton.x+2 && stone[i].x<=orton.x+5 && stone[i].y>=or
                         +ton.y+5 && stone[i].y<=orton.y+8)
    00001DAC 9040                   MOV.W       L991,R0    ; H'04EC
    00001DAE 00FE                   MOV.L       @(R0,R15),R0
    00001DB0 4008                   SHLL2       R0
    00001DB2 4008                   SHLL2       R0
    00001DB4 303C                   ADD         R3,R0
    00001DB6 6102                   MOV.L       @R0,R1
    00001DB8 903B                   MOV.W       L991+2,R0  ; H'04C4
    00001DBA 7102                   ADD         #2,R1
    00001DBC 00FE                   MOV.L       @(R0,R15),R0
    00001DBE 7002                   ADD         #2,R0
    00001DC0 3103                   CMP/GE      R0,R1
    00001DC2 8B3B                   BF          L783
    00001DC4 9034                   MOV.W       L991,R0    ; H'04EC
    00001DC6 00FE                   MOV.L       @(R0,R15),R0
    00001DC8 9133                   MOV.W       L991+2,R1  ; H'04C4
    00001DCA 4008                   SHLL2       R0
    00001DCC 4008                   SHLL2       R0
    00001DCE 31FC                   ADD         R15,R1
    00001DD0 003E                   MOV.L       @(R0,R3),R0
    00001DD2 6112                   MOV.L       @R1,R1
    00001DD4 7105                   ADD         #5,R1
    00001DD6 3017                   CMP/GT      R1,R0
    00001DD8 8930                   BT          L783
    00001DDA 9029                   MOV.W       L991,R0    ; H'04EC
    00001DDC 01FE                   MOV.L       @(R0,R15),R1
    00001DDE 4108                   SHLL2       R1
    00001DE0 9028                   MOV.W       L991+4,R0  ; H'04C8
    00001DE2 4108                   SHLL2       R1
    00001DE4 00FE                   MOV.L       @(R0,R15),R0
    00001DE6 313C                   ADD         R3,R1
    00001DE8 5111                   MOV.L       @(4,R1),R1
    00001DEA 7005                   ADD         #5,R0
    00001DEC 3103                   CMP/GE      R0,R1
    00001DEE 8B25                   BF          L783
    00001DF0 901E                   MOV.W       L991,R0    ; H'04EC
    00001DF2 01FE                   MOV.L       @(R0,R15),R1
    00001DF4 901E                   MOV.W       L991+4,R0  ; H'04C8
    00001DF6 4108                   SHLL2       R1
    00001DF8 00FE                   MOV.L       @(R0,R15),R0
    00001DFA 4108                   SHLL2       R1
    00001DFC 313C                   ADD         R3,R1
    00001DFE 7008                   ADD         #8,R0
    00001E00 5111                   MOV.L       @(4,R1),R1
    00001E02 3107                   CMP/GT      R0,R1
    00001E04 891A                   BT          L783




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   317                                    {
          game.c   318                                            orton.y = stone[i].y-8;
    00001E06 62F3                   MOV         R15,R2
    00001E08 9012                   MOV.W       L991,R0    ; H'04EC
    00001E0A 7220                   ADD         #32,R2
    00001E0C 03FE                   MOV.L       @(R0,R15),R3
    00001E0E 4308                   SHLL2       R3
    00001E10 9010                   MOV.W       L991+4,R0  ; H'04C8
    00001E12 4308                   SHLL2       R3
    00001E14 332C                   ADD         R2,R3
    00001E16 5131                   MOV.L       @(4,R3),R1
    00001E18 71F8                   ADD         #-8,R1
          game.c   319                                            orton.can_jump = 1;
    00001E1A E301                   MOV         #1,R3
    00001E1C 0F16                   MOV.L       R1,@(R0,R15)
          game.c   320                                            orton.counter_jump = 0;
    00001E1E E100                   MOV         #0,R1
    00001E20 900A                   MOV.W       L991+8,R0  ; H'04DC
    00001E22 0F34                   MOV.B       R3,@(R0,R15)
    00001E24 9009                   MOV.W       L991+10,R0 ; H'04DD
          game.c   321                                            orton.dy = 0;
    00001E26 6313                   MOV         R1,R3
    00001E28 0F14                   MOV.B       R1,@(R0,R15)
    00001E2A 9004                   MOV.W       L991+6,R0  ; H'04D0
    00001E2C A04C                   BRA         L782
    00001E2E 0F36                   MOV.L       R3,@(R0,R15)
    00001E30              L991:                             
    00001E30 04EC                   .DATA.W     H'04EC
    00001E32 04C4                   .DATA.W     H'04C4
    00001E34 04C8                   .DATA.W     H'04C8
    00001E36 04D0                   .DATA.W     H'04D0
    00001E38 04DC                   .DATA.W     H'04DC
    00001E3A 04DD                   .DATA.W     H'04DD
    00001E3C              L783:                             
          game.c   322                                    }
          game.c   323                                    else if(stone[i].x+2>=orton.x && stone[i].x<=orton.x+7 && stone[i].y>=orto
                         +n.y && stone[i].y<=orton.y+5)
    00001E3C 905E                   MOV.W       L996,R0    ; H'04EC
    00001E3E 63F3                   MOV         R15,R3
    00001E40 02FE                   MOV.L       @(R0,R15),R2
    00001E42 7320                   ADD         #32,R3
    00001E44 905B                   MOV.W       L996+2,R0  ; H'04C4
    00001E46 4208                   SHLL2       R2
    00001E48 4208                   SHLL2       R2
    00001E4A 323C                   ADD         R3,R2
    00001E4C 6122                   MOV.L       @R2,R1
    00001E4E 7102                   ADD         #2,R1
    00001E50 02FE                   MOV.L       @(R0,R15),R2
    00001E52 3123                   CMP/GE      R2,R1
    00001E54 8B38                   BF          L782
    00001E56 9051                   MOV.W       L996,R0    ; H'04EC
    00001E58 02FE                   MOV.L       @(R0,R15),R2
    00001E5A 4208                   SHLL2       R2
    00001E5C 904F                   MOV.W       L996+2,R0  ; H'04C4
    00001E5E 4208                   SHLL2       R2
    00001E60 01FE                   MOV.L       @(R0,R15),R1
    00001E62 323C                   ADD         R3,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E64 6222                   MOV.L       @R2,R2
    00001E66 7107                   ADD         #7,R1
    00001E68 3217                   CMP/GT      R1,R2
    00001E6A 892D                   BT          L782
    00001E6C 9046                   MOV.W       L996,R0    ; H'04EC
    00001E6E 00FE                   MOV.L       @(R0,R15),R0
    00001E70 9146                   MOV.W       L996+4,R1  ; H'04C8
    00001E72 4008                   SHLL2       R0
    00001E74 4008                   SHLL2       R0
    00001E76 303C                   ADD         R3,R0
    00001E78 31FC                   ADD         R15,R1
    00001E7A 6212                   MOV.L       @R1,R2
    00001E7C 5101                   MOV.L       @(4,R0),R1
    00001E7E 3123                   CMP/GE      R2,R1
    00001E80 8B22                   BF          L782
    00001E82 903B                   MOV.W       L996,R0    ; H'04EC
    00001E84 02FE                   MOV.L       @(R0,R15),R2
    00001E86 4208                   SHLL2       R2
    00001E88 903A                   MOV.W       L996+4,R0  ; H'04C8
    00001E8A 4208                   SHLL2       R2
    00001E8C 01FE                   MOV.L       @(R0,R15),R1
    00001E8E 323C                   ADD         R3,R2
    00001E90 5221                   MOV.L       @(4,R2),R2
    00001E92 7105                   ADD         #5,R1
    00001E94 3217                   CMP/GT      R1,R2
    00001E96 8917                   BT          L782
          game.c   324                                    {
          game.c   325                                            stone[i].dx += orton.dx*TIME_STONE_DX_SLEEP;
    00001E98 9030                   MOV.W       L996,R0    ; H'04EC
    00001E9A 62F3                   MOV         R15,R2
    00001E9C 03FE                   MOV.L       @(R0,R15),R3
    00001E9E 7220                   ADD         #32,R2
    00001EA0 902F                   MOV.W       L996+6,R0  ; H'04CC
    00001EA2 4308                   SHLL2       R3
    00001EA4 01FE                   MOV.L       @(R0,R15),R1
    00001EA6 4308                   SHLL2       R3
    00001EA8 332C                   ADD         R2,R3
    00001EAA 6013                   MOV         R1,R0
    00001EAC 4108                   SHLL2       R1
    00001EAE 310C                   ADD         R0,R1
    00001EB0 5032                   MOV.L       @(8,R3),R0
    00001EB2 4108                   SHLL2       R1
    00001EB4 301C                   ADD         R1,R0
          game.c   326                                            orton.dx /= 2;
    00001EB6 E100                   MOV         #0,R1
    00001EB8 1302                   MOV.L       R0,@(8,R3)
    00001EBA 9022                   MOV.W       L996+6,R0  ; H'04CC
    00001EBC 03FE                   MOV.L       @(R0,R15),R3
    00001EBE 3137                   CMP/GT      R3,R1
    00001EC0 901F                   MOV.W       L996+6,R0  ; H'04CC
    00001EC2 331E                   ADDC        R1,R3
    00001EC4 4321                   SHAR        R3
    00001EC6 0F36                   MOV.L       R3,@(R0,R15)
    00001EC8              L782:                             
    00001EC8 9018                   MOV.W       L996,R0    ; H'04EC
    00001ECA 02FE                   MOV.L       @(R0,R15),R2
    00001ECC 9016                   MOV.W       L996,R0    ; H'04EC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001ECE 7201                   ADD         #1,R2
    00001ED0 0F26                   MOV.L       R2,@(R0,R15)
    00001ED2              L778:                             
    00001ED2 53F6                   MOV.L       @(24,R15),R3
    00001ED4 9012                   MOV.W       L996,R0    ; H'04EC
    00001ED6 01FE                   MOV.L       @(R0,R15),R1
    00001ED8 3133                   CMP/GE      R3,R1
    00001EDA 8901                   BT          L997
    00001EDC AF10                   BRA         L779
    00001EDE 0009                   NOP
    00001EE0              L997:                             
          game.c   327                                    }
          game.c   328                            }
          game.c   329    
          game.c   330                            if(!orton.can_jump) orton.position = JUMP;
    00001EE0 9010                   MOV.W       L996+8,R0  ; H'04DC
    00001EE2 03FC                   MOV.B       @(R0,R15),R3
    00001EE4 2338                   TST         R3,R3
    00001EE6 8B02                   BF          L658
    00001EE8 900D                   MOV.W       L996+10,R0 ; H'04D8
    00001EEA E205                   MOV         #5,R2
    00001EEC 0F26                   MOV.L       R2,@(R0,R15)
    00001EEE              L658:                             
          game.c   331                    }
          game.c   332    
          game.c   333                    /** Moving lines **/
          game.c   334                    if(moving_line_sleep == 0)
    00001EEE 53F2                   MOV.L       @(8,R15),R3
    00001EF0 2338                   TST         R3,R3
    00001EF2 8901                   BT          L998
    00001EF4 A0D1                   BRA         L787
    00001EF6 0009                   NOP
    00001EF8              L998:                             
          game.c   335                    {
          game.c   336                            for(i=0 ; i<level->nb_lines ; i++)
    00001EF8 A0BB                   BRA         L917
    00001EFA E300                   MOV         #0,R3
    00001EFC              L996:                             
    00001EFC 04EC                   .DATA.W     H'04EC
    00001EFE 04C4                   .DATA.W     H'04C4
    00001F00 04C8                   .DATA.W     H'04C8
    00001F02 04CC                   .DATA.W     H'04CC
    00001F04 04DC                   .DATA.W     H'04DC
    00001F06 04D8                   .DATA.W     H'04D8
    00001F08              L789:                             
          game.c   337                            {
          game.c   338                                    if(moving_line_sleep%(TIME_LINE_SLEEP/level->line[i].dx)==0 && (level->lin
                         +e[i].x <= level->line[i].x1 || level->line[i].x >= level->line[i].x2)) level->line[i].dx *= -1;
    00001F08 90BD                   MOV.W       L999,R0    ; H'04F0
    00001F0A 00FE                   MOV.L       @(R0,R15),R0
    00001F0C 91BC                   MOV.W       L999+2,R1  ; H'04EC
    00001F0E 31FC                   ADD         R15,R1
    00001F10 6312                   MOV.L       @R1,R3
    00001F12 E104                   MOV         #4,R1
    00001F14 5005                   MOV.L       @(20,R0),R0
    00001F16 6233                   MOV         R3,R2
    00001F18 4308                   SHLL2       R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F1A 4300                   SHLL        R3
    00001F1C 332C                   ADD         R2,R3
    00001F1E 4308                   SHLL2       R3
    00001F20 303C                   ADD         R3,R0
    00001F22 D35A                   MOV.L       L999+6,R3  ; __divls
    00001F24 430B                   JSR         @R3
    00001F26 5003                   MOV.L       @(12,R0),R0
    00001F28 D259                   MOV.L       L999+10,R2 ; __modls
    00001F2A 420B                   JSR         @R2
    00001F2C 51F2                   MOV.L       @(8,R15),R1
    00001F2E 2008                   TST         R0,R0
    00001F30 8B43                   BF          L790
    00001F32 90A8                   MOV.W       L999,R0    ; H'04F0
    00001F34 03FE                   MOV.L       @(R0,R15),R3
    00001F36 90A7                   MOV.W       L999+2,R0  ; H'04EC
    00001F38 5335                   MOV.L       @(20,R3),R3
    00001F3A 02FE                   MOV.L       @(R0,R15),R2
    00001F3C 90A3                   MOV.W       L999,R0    ; H'04F0
    00001F3E 6123                   MOV         R2,R1
    00001F40 4208                   SHLL2       R2
    00001F42 4200                   SHLL        R2
    00001F44 321C                   ADD         R1,R2
    00001F46 4208                   SHLL2       R2
    00001F48 01FE                   MOV.L       @(R0,R15),R1
    00001F4A 323C                   ADD         R3,R2
    00001F4C 909C                   MOV.W       L999+2,R0  ; H'04EC
    00001F4E 03FE                   MOV.L       @(R0,R15),R3
    00001F50 5115                   MOV.L       @(20,R1),R1
    00001F52 6033                   MOV         R3,R0
    00001F54 6222                   MOV.L       @R2,R2
    00001F56 4308                   SHLL2       R3
    00001F58 4300                   SHLL        R3
    00001F5A 330C                   ADD         R0,R3
    00001F5C 4308                   SHLL2       R3
    00001F5E 331C                   ADD         R1,R3
    00001F60 5035                   MOV.L       @(20,R3),R0
    00001F62 3207                   CMP/GT      R0,R2
    00001F64 8B19                   BF          L791
    00001F66 908E                   MOV.W       L999,R0    ; H'04F0
    00001F68 01FE                   MOV.L       @(R0,R15),R1
    00001F6A 908D                   MOV.W       L999+2,R0  ; H'04EC
    00001F6C 5115                   MOV.L       @(20,R1),R1
    00001F6E 03FE                   MOV.L       @(R0,R15),R3
    00001F70 9089                   MOV.W       L999,R0    ; H'04F0
    00001F72 6233                   MOV         R3,R2
    00001F74 4308                   SHLL2       R3
    00001F76 4300                   SHLL        R3
    00001F78 332C                   ADD         R2,R3
    00001F7A 4308                   SHLL2       R3
    00001F7C 02FE                   MOV.L       @(R0,R15),R2
    00001F7E 331C                   ADD         R1,R3
    00001F80 9082                   MOV.W       L999+2,R0  ; H'04EC
    00001F82 01FE                   MOV.L       @(R0,R15),R1
    00001F84 5225                   MOV.L       @(20,R2),R2
    00001F86 6013                   MOV         R1,R0
    00001F88 6332                   MOV.L       @R3,R3
    00001F8A 4108                   SHLL2       R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F8C 4100                   SHLL        R1
    00001F8E 310C                   ADD         R0,R1
    00001F90 4108                   SHLL2       R1
    00001F92 312C                   ADD         R2,R1
    00001F94 5017                   MOV.L       @(28,R1),R0
    00001F96 3303                   CMP/GE      R0,R3
    00001F98 8B0F                   BF          L790
    00001F9A              L791:                             
    00001F9A 9074                   MOV.W       L999,R0    ; H'04F0
    00001F9C 01FE                   MOV.L       @(R0,R15),R1
    00001F9E 9073                   MOV.W       L999+2,R0  ; H'04EC
    00001FA0 5115                   MOV.L       @(20,R1),R1
    00001FA2 03FE                   MOV.L       @(R0,R15),R3
    00001FA4 6233                   MOV         R3,R2
    00001FA6 4308                   SHLL2       R3
    00001FA8 4300                   SHLL        R3
    00001FAA 332C                   ADD         R2,R3
    00001FAC 4308                   SHLL2       R3
    00001FAE 331C                   ADD         R1,R3
    00001FB0 5033                   MOV.L       @(12,R3),R0
    00001FB2 E2FF                   MOV         #-1,R2
    00001FB4 0027                   MUL.L       R2,R0
    00001FB6 001A                   STS         MACL,R0
    00001FB8 1303                   MOV.L       R0,@(12,R3)
    00001FBA              L790:                             
          game.c   339                                    if(moving_line_sleep%(TIME_LINE_SLEEP/level->line[i].dy)==0 && (level->lin
                         +e[i].y <= level->line[i].y1 || level->line[i].y >= level->line[i].y2)) level->line[i].dy *= -1;
    00001FBA 9064                   MOV.W       L999,R0    ; H'04F0
    00001FBC 9164                   MOV.W       L999+2,R1  ; H'04EC
    00001FBE 00FE                   MOV.L       @(R0,R15),R0
    00001FC0 31FC                   ADD         R15,R1
    00001FC2 6312                   MOV.L       @R1,R3
    00001FC4 5005                   MOV.L       @(20,R0),R0
    00001FC6 E104                   MOV         #4,R1
    00001FC8 6233                   MOV         R3,R2
    00001FCA 4308                   SHLL2       R3
    00001FCC 4300                   SHLL        R3
    00001FCE 332C                   ADD         R2,R3
    00001FD0 4308                   SHLL2       R3
    00001FD2 303C                   ADD         R3,R0
    00001FD4 D32D                   MOV.L       L999+6,R3  ; __divls
    00001FD6 430B                   JSR         @R3
    00001FD8 5004                   MOV.L       @(16,R0),R0
    00001FDA D22D                   MOV.L       L999+10,R2 ; __modls
    00001FDC 420B                   JSR         @R2
    00001FDE 51F2                   MOV.L       @(8,R15),R1
    00001FE0 2008                   TST         R0,R0
    00001FE2 8B43                   BF          L792
    00001FE4 904F                   MOV.W       L999,R0    ; H'04F0
    00001FE6 03FE                   MOV.L       @(R0,R15),R3
    00001FE8 904E                   MOV.W       L999+2,R0  ; H'04EC
    00001FEA 02FE                   MOV.L       @(R0,R15),R2
    00001FEC 5335                   MOV.L       @(20,R3),R3
    00001FEE 6123                   MOV         R2,R1
    00001FF0 9049                   MOV.W       L999,R0    ; H'04F0
    00001FF2 4208                   SHLL2       R2
    00001FF4 4200                   SHLL        R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001FF6 321C                   ADD         R1,R2
    00001FF8 01FE                   MOV.L       @(R0,R15),R1
    00001FFA 4208                   SHLL2       R2
    00001FFC 9044                   MOV.W       L999+2,R0  ; H'04EC
    00001FFE 323C                   ADD         R3,R2
    00002000 5115                   MOV.L       @(20,R1),R1
    00002002 03FE                   MOV.L       @(R0,R15),R3
    00002004 5221                   MOV.L       @(4,R2),R2
    00002006 6033                   MOV         R3,R0
    00002008 4308                   SHLL2       R3
    0000200A 4300                   SHLL        R3
    0000200C 330C                   ADD         R0,R3
    0000200E 4308                   SHLL2       R3
    00002010 331C                   ADD         R1,R3
    00002012 5036                   MOV.L       @(24,R3),R0
    00002014 3207                   CMP/GT      R0,R2
    00002016 8B19                   BF          L793
    00002018 9035                   MOV.W       L999,R0    ; H'04F0
    0000201A 01FE                   MOV.L       @(R0,R15),R1
    0000201C 9034                   MOV.W       L999+2,R0  ; H'04EC
    0000201E 03FE                   MOV.L       @(R0,R15),R3
    00002020 5115                   MOV.L       @(20,R1),R1
    00002022 6233                   MOV         R3,R2
    00002024 902F                   MOV.W       L999,R0    ; H'04F0
    00002026 4308                   SHLL2       R3
    00002028 4300                   SHLL        R3
    0000202A 332C                   ADD         R2,R3
    0000202C 02FE                   MOV.L       @(R0,R15),R2
    0000202E 4308                   SHLL2       R3
    00002030 902A                   MOV.W       L999+2,R0  ; H'04EC
    00002032 331C                   ADD         R1,R3
    00002034 5225                   MOV.L       @(20,R2),R2
    00002036 01FE                   MOV.L       @(R0,R15),R1
    00002038 5331                   MOV.L       @(4,R3),R3
    0000203A 6013                   MOV         R1,R0
    0000203C 4108                   SHLL2       R1
    0000203E 4100                   SHLL        R1
    00002040 310C                   ADD         R0,R1
    00002042 4108                   SHLL2       R1
    00002044 312C                   ADD         R2,R1
    00002046 5018                   MOV.L       @(32,R1),R0
    00002048 3303                   CMP/GE      R0,R3
    0000204A 8B0F                   BF          L792
    0000204C              L793:                             
    0000204C 901B                   MOV.W       L999,R0    ; H'04F0
    0000204E 01FE                   MOV.L       @(R0,R15),R1
    00002050 901A                   MOV.W       L999+2,R0  ; H'04EC
    00002052 03FE                   MOV.L       @(R0,R15),R3
    00002054 5115                   MOV.L       @(20,R1),R1
    00002056 6233                   MOV         R3,R2
    00002058 4308                   SHLL2       R3
    0000205A 4300                   SHLL        R3
    0000205C 332C                   ADD         R2,R3
    0000205E 4308                   SHLL2       R3
    00002060 331C                   ADD         R1,R3
    00002062 E2FF                   MOV         #-1,R2
    00002064 5034                   MOV.L       @(16,R3),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002066 0027                   MUL.L       R2,R0
    00002068 001A                   STS         MACL,R0
    0000206A 1304                   MOV.L       R0,@(16,R3)
    0000206C              L792:                             
    0000206C 900C                   MOV.W       L999+2,R0  ; H'04EC
    0000206E 03FE                   MOV.L       @(R0,R15),R3
    00002070 7301                   ADD         #1,R3
    00002072              L917:                             
    00002072 9009                   MOV.W       L999+2,R0  ; H'04EC
    00002074 0F36                   MOV.L       R3,@(R0,R15)
    00002076 9006                   MOV.W       L999,R0    ; H'04F0
    00002078 02FE                   MOV.L       @(R0,R15),R2
    0000207A 5326                   MOV.L       @(24,R2),R3
    0000207C 9004                   MOV.W       L999+2,R0  ; H'04EC
    0000207E 01FE                   MOV.L       @(R0,R15),R1
    00002080 3133                   CMP/GE      R3,R1
    00002082 A007                   BRA         L932
    00002084 0009                   NOP
    00002086              L999:                             
    00002086 04F0                   .DATA.W     H'04F0
    00002088 04EC                   .DATA.W     H'04EC
    0000208A 0000                   .DATA.W     0
    0000208C <00000000>             .DATA.L     __divls
    00002090 <00000000>             .DATA.L     __modls
    00002094              L932:                             
    00002094 8901                   BT          L1000
    00002096 AF37                   BRA         L789
    00002098 0009                   NOP
    0000209A              L1000:                            
    0000209A              L787:                             
          game.c   340                            }
          game.c   341                    }
          game.c   342    
          game.c   343                    /** Bullets **/
          game.c   344                    for(i=0 ; i<nb_bullets ; i++)
    0000209A E300                   MOV         #0,R3
    0000209C 906B                   MOV.W       L1001,R0   ; H'04EC
    0000209E A063                   BRA         L794
    000020A0 0F36                   MOV.L       R3,@(R0,R15)
    000020A2              L795:                             
          game.c   345                    {
          game.c   346                            if(level->map[bullet[i].y/8*level->width+bullet[i].x/8] == WALL)
    000020A2 9069                   MOV.W       L1001+2,R0 ; H'04F0
    000020A4 9167                   MOV.W       L1001,R1   ; H'04EC
    000020A6 31FC                   ADD         R15,R1
    000020A8 6312                   MOV.L       @R1,R3
    000020AA 6233                   MOV         R3,R2
    000020AC 4308                   SHLL2       R3
    000020AE 332C                   ADD         R2,R3
    000020B0 9263                   MOV.W       L1001+4,R2 ; H'0220
    000020B2 4308                   SHLL2       R3
    000020B4 32FC                   ADD         R15,R2
    000020B6 332C                   ADD         R2,R3
    000020B8 5331                   MOV.L       @(4,R3),R3
    000020BA 4311                   CMP/PZ      R3
    000020BC 8D01                   BT/S        L797
    000020BE 00FE                   MOV.L       @(R0,R15),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000020C0 7307                   ADD         #7,R3
    000020C2              L797:                             
    000020C2 4321                   SHAR        R3
    000020C4 9158                   MOV.W       L1001+2,R1 ; H'04F0
    000020C6 4321                   SHAR        R3
    000020C8 9255                   MOV.W       L1001,R2   ; H'04EC
    000020CA 31FC                   ADD         R15,R1
    000020CC 6112                   MOV.L       @R1,R1
    000020CE 32FC                   ADD         R15,R2
    000020D0 5113                   MOV.L       @(12,R1),R1
    000020D2 4321                   SHAR        R3
    000020D4 0317                   MUL.L       R1,R3
    000020D6 6122                   MOV.L       @R2,R1
    000020D8 6213                   MOV         R1,R2
    000020DA 4108                   SHLL2       R1
    000020DC 312C                   ADD         R2,R1
    000020DE 4108                   SHLL2       R1
    000020E0 924B                   MOV.W       L1001+4,R2 ; H'0220
    000020E2 32FC                   ADD         R15,R2
    000020E4 312C                   ADD         R2,R1
    000020E6 6112                   MOV.L       @R1,R1
    000020E8 4111                   CMP/PZ      R1
    000020EA 8D01                   BT/S        L798
    000020EC 031A                   STS         MACL,R3
    000020EE 7107                   ADD         #7,R1
    000020F0              L798:                             
    000020F0 5002                   MOV.L       @(8,R0),R0
    000020F2 4121                   SHAR        R1
    000020F4 4121                   SHAR        R1
    000020F6 4121                   SHAR        R1
    000020F8 331C                   ADD         R1,R3
    000020FA 003C                   MOV.B       @(R0,R3),R0
    000020FC 8801                   CMP/EQ      #1,R0
    000020FE 8B2E                   BF          L796
          game.c   347                            {
          game.c   348                                    for(j=i ; j<nb_bullets-1 ; j++)
    00002100 9039                   MOV.W       L1001,R0   ; H'04EC
    00002102 02FE                   MOV.L       @(R0,R15),R2
    00002104 903A                   MOV.W       L1001+6,R0 ; H'04E8
    00002106 A01C                   BRA         L799
    00002108 0F26                   MOV.L       R2,@(R0,R15)
    0000210A              L800:                             
          game.c   349                                            bullet[j] = bullet[j+1];
    0000210A 9037                   MOV.W       L1001+6,R0 ; H'04E8
    0000210C 9235                   MOV.W       L1001+4,R2 ; H'0220
    0000210E 01FE                   MOV.L       @(R0,R15),R1
    00002110 9034                   MOV.W       L1001+6,R0 ; H'04E8
    00002112 6313                   MOV         R1,R3
    00002114 4108                   SHLL2       R1
    00002116 313C                   ADD         R3,R1
    00002118 4108                   SHLL2       R1
    0000211A 32FC                   ADD         R15,R2
    0000211C 312C                   ADD         R2,R1
    0000211E 02FE                   MOV.L       @(R0,R15),R2
    00002120 6323                   MOV         R2,R3
    00002122 4208                   SHLL2       R2
    00002124 323C                   ADD         R3,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002126 4208                   SHLL2       R2
    00002128 9327                   MOV.W       L1001+4,R3 ; H'0220
    0000212A 33FC                   ADD         R15,R3
    0000212C 323C                   ADD         R3,R2
    0000212E 7214                   ADD         #20,R2
    00002130 D313                   MOV.L       L1001+10,R3; __quick_odd_mvn
    00002132 430B                   JSR         @R3
    00002134 E014                   MOV         #20,R0
    00002136 9021                   MOV.W       L1001+6,R0 ; H'04E8
    00002138 9120                   MOV.W       L1001+6,R1 ; H'04E8
    0000213A 00FE                   MOV.L       @(R0,R15),R0
    0000213C 7001                   ADD         #1,R0
    0000213E 31FC                   ADD         R15,R1
    00002140 2102                   MOV.L       R0,@R1
    00002142              L799:                             
    00002142 53F7                   MOV.L       @(28,R15),R3
    00002144 901A                   MOV.W       L1001+6,R0 ; H'04E8
    00002146 73FF                   ADD         #-1,R3
    00002148 02FE                   MOV.L       @(R0,R15),R2
    0000214A 3233                   CMP/GE      R3,R2
    0000214C 8BDD                   BF          L800
          game.c   350                                    nb_bullets--;
    0000214E 51F7                   MOV.L       @(28,R15),R1
          game.c   351                                    i--;
    00002150 9011                   MOV.W       L1001,R0   ; H'04EC
    00002152 71FF                   ADD         #-1,R1
    00002154 1F17                   MOV.L       R1,@(28,R15)
    00002156 03FE                   MOV.L       @(R0,R15),R3
    00002158 900D                   MOV.W       L1001,R0   ; H'04EC
    0000215A 73FF                   ADD         #-1,R3
    0000215C 0F36                   MOV.L       R3,@(R0,R15)
    0000215E              L796:                             
    0000215E 900A                   MOV.W       L1001,R0   ; H'04EC
    00002160 02FE                   MOV.L       @(R0,R15),R2
    00002162 7201                   ADD         #1,R2
    00002164 9007                   MOV.W       L1001,R0   ; H'04EC
    00002166 0F26                   MOV.L       R2,@(R0,R15)
    00002168              L794:                             
    00002168 53F7                   MOV.L       @(28,R15),R3
    0000216A 9004                   MOV.W       L1001,R0   ; H'04EC
    0000216C 01FE                   MOV.L       @(R0,R15),R1
    0000216E 3133                   CMP/GE      R3,R1
    00002170 8B97                   BF          L795
          game.c   352                            }
          game.c   353                    }
          game.c   354    
          game.c   355                    /** Stones **/
          game.c   356                    for(i=0 ; i<nb_stones ; i++)
    00002172 A0A6                   BRA         L918
    00002174 E300                   MOV         #0,R3
    00002176              L1001:                            
    00002176 04EC                   .DATA.W     H'04EC
    00002178 04F0                   .DATA.W     H'04F0
    0000217A 0220                   .DATA.W     H'0220
    0000217C 04E8                   .DATA.W     H'04E8
    0000217E 0000                   .DATA.W     0
    00002180 <00000000>             .DATA.L     __quick_odd_mvn




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002184              L802:                             
          game.c   357                    {
          game.c   358                            if(level->map[(stone[i].y+3)/8*level->width+stone[i].x/8] == WALL)
    00002184 908B                   MOV.W       L1002,R0   ; H'04F0
    00002186 62F3                   MOV         R15,R2
    00002188 918A                   MOV.W       L1002+2,R1 ; H'04EC
    0000218A 7220                   ADD         #32,R2
    0000218C 31FC                   ADD         R15,R1
    0000218E 6312                   MOV.L       @R1,R3
    00002190 4308                   SHLL2       R3
    00002192 4308                   SHLL2       R3
    00002194 332C                   ADD         R2,R3
    00002196 5131                   MOV.L       @(4,R3),R1
    00002198 7103                   ADD         #3,R1
    0000219A 4111                   CMP/PZ      R1
    0000219C 8D01                   BT/S        L804
    0000219E 00FE                   MOV.L       @(R0,R15),R0
    000021A0 7107                   ADD         #7,R1
    000021A2              L804:                             
    000021A2 4121                   SHAR        R1
    000021A4 937B                   MOV.W       L1002,R3   ; H'04F0
    000021A6 4121                   SHAR        R1
    000021A8 4121                   SHAR        R1
    000021AA 33FC                   ADD         R15,R3
    000021AC 6332                   MOV.L       @R3,R3
    000021AE 5333                   MOV.L       @(12,R3),R3
    000021B0 0137                   MUL.L       R3,R1
    000021B2 9375                   MOV.W       L1002+2,R3 ; H'04EC
    000021B4 33FC                   ADD         R15,R3
    000021B6 6332                   MOV.L       @R3,R3
    000021B8 4308                   SHLL2       R3
    000021BA 4308                   SHLL2       R3
    000021BC 332C                   ADD         R2,R3
    000021BE 6332                   MOV.L       @R3,R3
    000021C0 4311                   CMP/PZ      R3
    000021C2 8D01                   BT/S        L805
    000021C4 011A                   STS         MACL,R1
    000021C6 7307                   ADD         #7,R3
    000021C8              L805:                             
    000021C8 5002                   MOV.L       @(8,R0),R0
    000021CA 4321                   SHAR        R3
    000021CC 4321                   SHAR        R3
    000021CE 4321                   SHAR        R3
    000021D0 313C                   ADD         R3,R1
    000021D2 001C                   MOV.B       @(R0,R1),R0
    000021D4 8801                   CMP/EQ      #1,R0
    000021D6 8B71                   BF          L803
          game.c   359                            {
          game.c   360                                    if(level->map[stone[i].y/8*level->width+stone[i].x/8] == WALL)
    000021D8 9061                   MOV.W       L1002,R0   ; H'04F0
    000021DA 62F3                   MOV         R15,R2
    000021DC 9160                   MOV.W       L1002+2,R1 ; H'04EC
    000021DE 7220                   ADD         #32,R2
    000021E0 31FC                   ADD         R15,R1
    000021E2 6312                   MOV.L       @R1,R3
    000021E4 4308                   SHLL2       R3
    000021E6 4308                   SHLL2       R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000021E8 332C                   ADD         R2,R3
    000021EA 5331                   MOV.L       @(4,R3),R3
    000021EC 4311                   CMP/PZ      R3
    000021EE 8D01                   BT/S        L807
    000021F0 00FE                   MOV.L       @(R0,R15),R0
    000021F2 7307                   ADD         #7,R3
    000021F4              L807:                             
    000021F4 9153                   MOV.W       L1002,R1   ; H'04F0
    000021F6 4321                   SHAR        R3
    000021F8 4321                   SHAR        R3
    000021FA 4321                   SHAR        R3
    000021FC 31FC                   ADD         R15,R1
    000021FE 6112                   MOV.L       @R1,R1
    00002200 5113                   MOV.L       @(12,R1),R1
    00002202 0317                   MUL.L       R1,R3
    00002204 914C                   MOV.W       L1002+2,R1 ; H'04EC
    00002206 31FC                   ADD         R15,R1
    00002208 6112                   MOV.L       @R1,R1
    0000220A 4108                   SHLL2       R1
    0000220C 4108                   SHLL2       R1
    0000220E 312C                   ADD         R2,R1
    00002210 6112                   MOV.L       @R1,R1
    00002212 4111                   CMP/PZ      R1
    00002214 8D01                   BT/S        L808
    00002216 031A                   STS         MACL,R3
    00002218 7107                   ADD         #7,R1
    0000221A              L808:                             
    0000221A 4121                   SHAR        R1
    0000221C 5002                   MOV.L       @(8,R0),R0
    0000221E 4121                   SHAR        R1
    00002220 4121                   SHAR        R1
    00002222 331C                   ADD         R1,R3
    00002224 003C                   MOV.B       @(R0,R3),R0
    00002226 8801                   CMP/EQ      #1,R0
    00002228 8B12                   BF          L806
          game.c   361                                            stone[i].y = (stone[i].y&(~7))+-3;
    0000222A 63F3                   MOV         R15,R3
    0000222C 9038                   MOV.W       L1002+2,R0 ; H'04EC
    0000222E 7320                   ADD         #32,R3
    00002230 02FE                   MOV.L       @(R0,R15),R2
    00002232 4208                   SHLL2       R2
    00002234 9034                   MOV.W       L1002+2,R0 ; H'04EC
    00002236 4208                   SHLL2       R2
    00002238 01FE                   MOV.L       @(R0,R15),R1
    0000223A 323C                   ADD         R3,R2
    0000223C 4108                   SHLL2       R1
    0000223E 4108                   SHLL2       R1
    00002240 313C                   ADD         R3,R1
    00002242 E0F8                   MOV         #-8,R0
    00002244 5111                   MOV.L       @(4,R1),R1
    00002246 2109                   AND         R0,R1
    00002248 71FD                   ADD         #-3,R1
    0000224A 1211                   MOV.L       R1,@(4,R2)
    0000224C A011                   BRA         L809
    0000224E 0009                   NOP
    00002250              L806:                             
          game.c   362                                    else 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   363                                            stone[i].y = (stone[i].y&(~7))+5;
    00002250 9026                   MOV.W       L1002+2,R0 ; H'04EC
    00002252 62F3                   MOV         R15,R2
    00002254 03FE                   MOV.L       @(R0,R15),R3
    00002256 7220                   ADD         #32,R2
    00002258 9022                   MOV.W       L1002+2,R0 ; H'04EC
    0000225A 4308                   SHLL2       R3
    0000225C 01FE                   MOV.L       @(R0,R15),R1
    0000225E 4308                   SHLL2       R3
    00002260 332C                   ADD         R2,R3
    00002262 4108                   SHLL2       R1
    00002264 4108                   SHLL2       R1
    00002266 312C                   ADD         R2,R1
    00002268 5111                   MOV.L       @(4,R1),R1
    0000226A E0F8                   MOV         #-8,R0
    0000226C 2109                   AND         R0,R1
    0000226E 7105                   ADD         #5,R1
    00002270 1311                   MOV.L       R1,@(4,R3)
    00002272              L809:                             
          game.c   364                                    stone[i].dy = 0;
    00002272 62F3                   MOV         R15,R2
    00002274 9014                   MOV.W       L1002+2,R0 ; H'04EC
    00002276 E100                   MOV         #0,R1
    00002278 03FE                   MOV.L       @(R0,R15),R3
    0000227A 7220                   ADD         #32,R2
          game.c   365                                    stone[i].dx /= rand()%2+1;
    0000227C 9010                   MOV.W       L1002+2,R0 ; H'04EC
    0000227E 4308                   SHLL2       R3
    00002280 4308                   SHLL2       R3
    00002282 332C                   ADD         R2,R3
    00002284 1313                   MOV.L       R1,@(12,R3)
    00002286 03FE                   MOV.L       @(R0,R15),R3
    00002288 D106                   MOV.L       L1002+6,R1 ; _rand
    0000228A 4308                   SHLL2       R3
    0000228C 4308                   SHLL2       R3
    0000228E 332C                   ADD         R2,R3
    00002290 6833                   MOV         R3,R8
    00002292 410B                   JSR         @R1
    00002294 7808                   ADD         #8,R8
    00002296 4011                   CMP/PZ      R0
    00002298 8B06                   BF          L810
    0000229A A00A                   BRA         L811
    0000229C C901                   AND         #1,R0
    0000229E              L1002:                            
    0000229E 04F0                   .DATA.W     H'04F0
    000022A0 04EC                   .DATA.W     H'04EC
    000022A2 0000                   .DATA.W     0
    000022A4 <00000000>             .DATA.L     _rand
    000022A8              L810:                             
    000022A8 6007                   NOT         R0,R0
    000022AA 7001                   ADD         #1,R0
    000022AC C901                   AND         #1,R0
    000022AE 6007                   NOT         R0,R0
    000022B0 7001                   ADD         #1,R0
    000022B2              L811:                             
    000022B2 7001                   ADD         #1,R0
    000022B4 D245                   MOV.L       L1003+14,R2; __divls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000022B6 420B                   JSR         @R2
    000022B8 6182                   MOV.L       @R8,R1
    000022BA 2802                   MOV.L       R0,@R8
    000022BC              L803:                             
    000022BC 907F                   MOV.W       L1003,R0   ; H'04EC
    000022BE 03FE                   MOV.L       @(R0,R15),R3
    000022C0 7301                   ADD         #1,R3
    000022C2              L918:                             
    000022C2 6133                   MOV         R3,R1
    000022C4 907B                   MOV.W       L1003,R0   ; H'04EC
    000022C6 0F36                   MOV.L       R3,@(R0,R15)
    000022C8 52F6                   MOV.L       @(24,R15),R2
    000022CA 3123                   CMP/GE      R2,R1
    000022CC 8901                   BT          L1004
    000022CE AF59                   BRA         L802
    000022D0 0009                   NOP
    000022D2              L1004:                            
          game.c   366                            }
          game.c   367                    }
          game.c   368    
          game.c   369    
          game.c   370    /** Moving camera **/
          game.c   371                    i = orton.x-60-camera.x;
    000022D2 9075                   MOV.W       L1003+2,R0 ; H'04A0
    000022D4 03FE                   MOV.L       @(R0,R15),R3
    000022D6 9074                   MOV.W       L1003+4,R0 ; H'04C4
    000022D8 02FE                   MOV.L       @(R0,R15),R2
    000022DA 3238                   SUB         R3,R2
    000022DC 906F                   MOV.W       L1003,R0   ; H'04EC
    000022DE 72C4                   ADD         #-60,R2
    000022E0 0F26                   MOV.L       R2,@(R0,R15)
          game.c   372                    j = orton.y-28-camera.y;
    000022E2 906F                   MOV.W       L1003+6,R0 ; H'04A4
    000022E4 03FE                   MOV.L       @(R0,R15),R3
    000022E6 906E                   MOV.W       L1003+8,R0 ; H'04C8
    000022E8 01FE                   MOV.L       @(R0,R15),R1
    000022EA 3138                   SUB         R3,R1
    000022EC 906C                   MOV.W       L1003+10,R0; H'04E8
    000022EE 71E4                   ADD         #-28,R1
          game.c   373                    if(abs(i)>FALLING_MAX_SPEED || abs(j)>FALLING_MAX_SPEED)
    000022F0 D337                   MOV.L       L1003+18,R3; _abs
    000022F2 0F16                   MOV.L       R1,@(R0,R15)
    000022F4 430B                   JSR         @R3
    000022F6 6423                   MOV         R2,R4
    000022F8 E105                   MOV         #5,R1
    000022FA 3017                   CMP/GT      R1,R0
    000022FC 8906                   BT          L813
    000022FE 9063                   MOV.W       L1003+10,R0; H'04E8
    00002300 D333                   MOV.L       L1003+18,R3; _abs
    00002302 430B                   JSR         @R3
    00002304 04FE                   MOV.L       @(R0,R15),R4
    00002306 E205                   MOV         #5,R2
    00002308 3027                   CMP/GT      R2,R0
    0000230A 8B63                   BF          L812
    0000230C              L813:                             
          game.c   374                    {
          game.c   375                            if(abs(i) > abs(j))




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000230C 9057                   MOV.W       L1003,R0   ; H'04EC
    0000230E D330                   MOV.L       L1003+18,R3; _abs
    00002310 430B                   JSR         @R3
    00002312 04FE                   MOV.L       @(R0,R15),R4
    00002314 D32E                   MOV.L       L1003+18,R3; _abs
    00002316 6803                   MOV         R0,R8
    00002318 9056                   MOV.W       L1003+10,R0; H'04E8
    0000231A 430B                   JSR         @R3
    0000231C 04FE                   MOV.L       @(R0,R15),R4
    0000231E 3807                   CMP/GT      R0,R8
    00002320 8B23                   BF          L814
          game.c   376                            {
          game.c   377                                    camera.x += 5*sng(i);
    00002322 904C                   MOV.W       L1003,R0   ; H'04EC
    00002324 03FE                   MOV.L       @(R0,R15),R3
    00002326 4311                   CMP/PZ      R3
    00002328 8901                   BT          L815
    0000232A A004                   BRA         L817
    0000232C E2FF                   MOV         #-1,R2
    0000232E              L815:                             
    0000232E 9046                   MOV.W       L1003,R0   ; H'04EC
    00002330 03FE                   MOV.L       @(R0,R15),R3
    00002332 4315                   CMP/PL      R3
    00002334 0229                   MOVT        R2
    00002336              L817:                             
    00002336 6323                   MOV         R2,R3
    00002338 9042                   MOV.W       L1003+2,R0 ; H'04A0
    0000233A 4208                   SHLL2       R2
    0000233C 01FE                   MOV.L       @(R0,R15),R1
    0000233E 323C                   ADD         R3,R2
    00002340 903E                   MOV.W       L1003+2,R0 ; H'04A0
    00002342 312C                   ADD         R2,R1
    00002344 0F16                   MOV.L       R1,@(R0,R15)
          game.c   378                                    camera.y += 5*j/abs(i);
    00002346 903F                   MOV.W       L1003+10,R0; H'04E8
    00002348 01FE                   MOV.L       @(R0,R15),R1
    0000234A 6313                   MOV         R1,R3
    0000234C 9037                   MOV.W       L1003,R0   ; H'04EC
    0000234E 4108                   SHLL2       R1
    00002350 313C                   ADD         R3,R1
    00002352 6813                   MOV         R1,R8
    00002354 D31E                   MOV.L       L1003+18,R3; _abs
    00002356 430B                   JSR         @R3
    00002358 04FE                   MOV.L       @(R0,R15),R4
    0000235A D31C                   MOV.L       L1003+14,R3; __divls
    0000235C 430B                   JSR         @R3
    0000235E 6183                   MOV         R8,R1
    00002360 9130                   MOV.W       L1003+6,R1 ; H'04A4
    00002362 31FC                   ADD         R15,R1
    00002364 6212                   MOV.L       @R1,R2
    00002366 A03D                   BRA         L919
    00002368 320C                   ADD         R0,R2
    0000236A              L814:                             
          game.c   379                            } else {
          game.c   380                                    camera.y += 5*sng(j);
    0000236A 902D                   MOV.W       L1003+10,R0; H'04E8
    0000236C 03FE                   MOV.L       @(R0,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000236E 4311                   CMP/PZ      R3
    00002370 8901                   BT          L820
    00002372 A004                   BRA         L822
    00002374 E3FF                   MOV         #-1,R3
    00002376              L820:                             
    00002376 9027                   MOV.W       L1003+10,R0; H'04E8
    00002378 01FE                   MOV.L       @(R0,R15),R1
    0000237A 4115                   CMP/PL      R1
    0000237C 0329                   MOVT        R3
    0000237E              L822:                             
    0000237E 6233                   MOV         R3,R2
    00002380 9020                   MOV.W       L1003+6,R0 ; H'04A4
    00002382 4308                   SHLL2       R3
    00002384 01FE                   MOV.L       @(R0,R15),R1
    00002386 332C                   ADD         R2,R3
    00002388 901C                   MOV.W       L1003+6,R0 ; H'04A4
    0000238A 313C                   ADD         R3,R1
    0000238C 0F16                   MOV.L       R1,@(R0,R15)
          game.c   381                                    if(j) camera.x += 5*i/abs(j);
    0000238E 901B                   MOV.W       L1003+10,R0; H'04E8
    00002390 03FE                   MOV.L       @(R0,R15),R3
    00002392 2338                   TST         R3,R3
    00002394 8928                   BT          L825
    00002396 9012                   MOV.W       L1003,R0   ; H'04EC
    00002398 01FE                   MOV.L       @(R0,R15),R1
    0000239A 6313                   MOV         R1,R3
    0000239C 9014                   MOV.W       L1003+10,R0; H'04E8
    0000239E 4108                   SHLL2       R1
    000023A0 313C                   ADD         R3,R1
    000023A2 6813                   MOV         R1,R8
    000023A4 D30A                   MOV.L       L1003+18,R3; _abs
    000023A6 430B                   JSR         @R3
    000023A8 04FE                   MOV.L       @(R0,R15),R4
    000023AA D308                   MOV.L       L1003+14,R3; __divls
    000023AC 430B                   JSR         @R3
    000023AE 6183                   MOV         R8,R1
    000023B0 9106                   MOV.W       L1003+2,R1 ; H'04A0
    000023B2 31FC                   ADD         R15,R1
    000023B4 6212                   MOV.L       @R1,R2
    000023B6 320C                   ADD         R0,R2
    000023B8 9002                   MOV.W       L1003+2,R0 ; H'04A0
    000023BA A015                   BRA         L825
    000023BC 0F26                   MOV.L       R2,@(R0,R15)
    000023BE              L1003:                            
    000023BE 04EC                   .DATA.W     H'04EC
    000023C0 04A0                   .DATA.W     H'04A0
    000023C2 04C4                   .DATA.W     H'04C4
    000023C4 04A4                   .DATA.W     H'04A4
    000023C6 04C8                   .DATA.W     H'04C8
    000023C8 04E8                   .DATA.W     H'04E8
    000023CA 0000                   .DATA.W     0
    000023CC <00000000>             .DATA.L     __divls
    000023D0 <00000000>             .DATA.L     _abs
    000023D4              L812:                             
          game.c   382                            }
          game.c   383                    } else {
          game.c   384                            camera.x = orton.x-60;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000023D4 9078                   MOV.W       L1005,R0   ; H'04C4
    000023D6 03FE                   MOV.L       @(R0,R15),R3
    000023D8 9077                   MOV.W       L1005+2,R0 ; H'04A0
    000023DA 73C4                   ADD         #-60,R3
    000023DC 0F36                   MOV.L       R3,@(R0,R15)
          game.c   385                            camera.y = orton.y-28;
    000023DE 9075                   MOV.W       L1005+4,R0 ; H'04C8
    000023E0 02FE                   MOV.L       @(R0,R15),R2
    000023E2 72E4                   ADD         #-28,R2
    000023E4              L919:                             
    000023E4 9073                   MOV.W       L1005+6,R0 ; H'04A4
    000023E6 0F26                   MOV.L       R2,@(R0,R15)
    000023E8              L825:                             
          game.c   386                    }
          game.c   387                    if(camera.x < 8) camera.x = 8;
    000023E8 906F                   MOV.W       L1005+2,R0 ; H'04A0
    000023EA E308                   MOV         #8,R3
    000023EC 01FE                   MOV.L       @(R0,R15),R1
    000023EE 3133                   CMP/GE      R3,R1
    000023F0 8901                   BT          L826
    000023F2 906A                   MOV.W       L1005+2,R0 ; H'04A0
    000023F4 0F36                   MOV.L       R3,@(R0,R15)
    000023F6              L826:                             
          game.c   388                    if(camera.x > level->width*8-136) camera.x = level->width*8-136;
    000023F6 906B                   MOV.W       L1005+8,R0 ; H'04F0
    000023F8 02FE                   MOV.L       @(R0,R15),R2
    000023FA 5323                   MOV.L       @(12,R2),R3
    000023FC 9269                   MOV.W       L1005+10,R2; H'FF78
    000023FE 4308                   SHLL2       R3
    00002400 9063                   MOV.W       L1005+2,R0 ; H'04A0
    00002402 4300                   SHLL        R3
    00002404 01FE                   MOV.L       @(R0,R15),R1
    00002406 332C                   ADD         R2,R3
    00002408 3137                   CMP/GT      R3,R1
    0000240A 8B08                   BF          L827
    0000240C 9060                   MOV.W       L1005+8,R0 ; H'04F0
    0000240E 03FE                   MOV.L       @(R0,R15),R3
    00002410 905B                   MOV.W       L1005+2,R0 ; H'04A0
    00002412 5133                   MOV.L       @(12,R3),R1
    00002414 935D                   MOV.W       L1005+10,R3; H'FF78
    00002416 4108                   SHLL2       R1
    00002418 4100                   SHLL        R1
    0000241A 313C                   ADD         R3,R1
    0000241C 0F16                   MOV.L       R1,@(R0,R15)
    0000241E              L827:                             
          game.c   389                    if(camera.y < 8) camera.y = 8;
    0000241E E308                   MOV         #8,R3
    00002420 9055                   MOV.W       L1005+6,R0 ; H'04A4
    00002422 02FE                   MOV.L       @(R0,R15),R2
    00002424 3233                   CMP/GE      R3,R2
    00002426 8901                   BT          L828
    00002428 9051                   MOV.W       L1005+6,R0 ; H'04A4
    0000242A 0F36                   MOV.L       R3,@(R0,R15)
    0000242C              L828:                             
          game.c   390                    if(camera.y > level->height*8-72) camera.y = level->height*8-72;
    0000242C 9050                   MOV.W       L1005+8,R0 ; H'04F0
    0000242E 02FE                   MOV.L       @(R0,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002430 904D                   MOV.W       L1005+6,R0 ; H'04A4
    00002432 5324                   MOV.L       @(16,R2),R3
    00002434 02FE                   MOV.L       @(R0,R15),R2
    00002436 4308                   SHLL2       R3
    00002438 4300                   SHLL        R3
    0000243A 73B8                   ADD         #-72,R3
    0000243C 3237                   CMP/GT      R3,R2
    0000243E 8B07                   BF          L829
    00002440 9046                   MOV.W       L1005+8,R0 ; H'04F0
    00002442 01FE                   MOV.L       @(R0,R15),R1
    00002444 9043                   MOV.W       L1005+6,R0 ; H'04A4
    00002446 5314                   MOV.L       @(16,R1),R3
    00002448 4308                   SHLL2       R3
    0000244A 4300                   SHLL        R3
    0000244C 73B8                   ADD         #-72,R3
    0000244E 0F36                   MOV.L       R3,@(R0,R15)
    00002450              L829:                             
          game.c   391                    if(dead)
    00002450 9040                   MOV.W       L1005+12,R0; H'04E2
    00002452 02FC                   MOV.B       @(R0,R15),R2
    00002454 2228                   TST         R2,R2
    00002456 8B01                   BF          L1006
    00002458 A089                   BRA         L830
    0000245A 0009                   NOP
    0000245C              L1006:                            
          game.c   392                    {
          game.c   393                            camera.x += rand()%7-3;
    0000245C D21F                   MOV.L       L1005+20,R2; _rand
    0000245E 420B                   JSR         @R2
    00002460 0009                   NOP
    00002462 6103                   MOV         R0,R1
    00002464 D31E                   MOV.L       L1005+24,R3; __modls
    00002466 430B                   JSR         @R3
    00002468 E007                   MOV         #7,R0
    0000246A 70FD                   ADD         #-3,R0
    0000246C 912D                   MOV.W       L1005+2,R1 ; H'04A0
    0000246E 31FC                   ADD         R15,R1
    00002470 6212                   MOV.L       @R1,R2
    00002472 320C                   ADD         R0,R2
    00002474 9029                   MOV.W       L1005+2,R0 ; H'04A0
          game.c   394                            camera.y += rand()%7-3;
    00002476 D319                   MOV.L       L1005+20,R3; _rand
    00002478 430B                   JSR         @R3
    0000247A 0F26                   MOV.L       R2,@(R0,R15)
    0000247C D318                   MOV.L       L1005+24,R3; __modls
    0000247E 6103                   MOV         R0,R1
    00002480 430B                   JSR         @R3
    00002482 E007                   MOV         #7,R0
    00002484 9123                   MOV.W       L1005+6,R1 ; H'04A4
    00002486 70FD                   ADD         #-3,R0
    00002488 31FC                   ADD         R15,R1
    0000248A 6212                   MOV.L       @R1,R2
    0000248C 320C                   ADD         R0,R2
    0000248E 901E                   MOV.W       L1005+6,R0 ; H'04A4
    00002490 0F26                   MOV.L       R2,@(R0,R15)
          game.c   395                            dead++;
    00002492 901F                   MOV.W       L1005+12,R0; H'04E2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002494 03FC                   MOV.B       @(R0,R15),R3
    00002496 7301                   ADD         #1,R3
    00002498 901C                   MOV.W       L1005+12,R0; H'04E2
    0000249A 0F34                   MOV.B       R3,@(R0,R15)
          game.c   396                            if(dead == 12)
    0000249C 603E                   EXTS.B      R3,R0
    0000249E 880C                   CMP/EQ      #12,R0
    000024A0 8B65                   BF          L830
          game.c   397                            {
          game.c   398                                    dead = 0;
    000024A2 E100                   MOV         #0,R1
    000024A4 9016                   MOV.W       L1005+12,R0; H'04E2
    000024A6 0F14                   MOV.B       R1,@(R0,R15)
          game.c   399                                    nb_death++;
    000024A8 9015                   MOV.W       L1005+14,R0; H'04E4
    000024AA 03FE                   MOV.L       @(R0,R15),R3
    000024AC 9013                   MOV.W       L1005+14,R0; H'04E4
    000024AE 7301                   ADD         #1,R3
          game.c   400                                    orton = orton_start;
    000024B0 910A                   MOV.W       L1005,R1   ; H'04C4
    000024B2 0F36                   MOV.L       R3,@(R0,R15)
    000024B4 9210                   MOV.W       L1005+16,R2; H'04A8
    000024B6 31FC                   ADD         R15,R1
    000024B8 D30A                   MOV.L       L1005+28,R3; __quick_odd_mvn
    000024BA 32FC                   ADD         R15,R2
    000024BC 430B                   JSR         @R3
    000024BE E01C                   MOV         #28,R0
          game.c   401                                    moving_wall_sleep = TIME_MOVING_WALL_SLEEP;
    000024C0 E232                   MOV         #50,R2
    000024C2 1F21                   MOV.L       R2,@(4,R15)
          game.c   402                                    for(i=0 ; i<level->nb_walls ; i++)
    000024C4 A043                   BRA         L920
    000024C6 E300                   MOV         #0,R3
    000024C8              L1005:                            
    000024C8 04C4                   .DATA.W     H'04C4
    000024CA 04A0                   .DATA.W     H'04A0
    000024CC 04C8                   .DATA.W     H'04C8
    000024CE 04A4                   .DATA.W     H'04A4
    000024D0 04F0                   .DATA.W     H'04F0
    000024D2 FF78                   .DATA.W     H'FF78
    000024D4 04E2                   .DATA.W     H'04E2
    000024D6 04E4                   .DATA.W     H'04E4
    000024D8 04A8                   .DATA.W     H'04A8
    000024DA 0000                   .DATA.W     0
    000024DC <00000000>             .DATA.L     _rand
    000024E0 <00000000>             .DATA.L     __modls
    000024E4 <00000000>             .DATA.L     __quick_odd_mvn
    000024E8              L833:                             
          game.c   403                                    {
          game.c   404                                            level->wall[i].x = level->wall[i].begin_x;
    000024E8 904F                   MOV.W       L1007,R0   ; H'04F0
    000024EA 01FE                   MOV.L       @(R0,R15),R1
    000024EC 904E                   MOV.W       L1007+2,R0 ; H'04EC
    000024EE 03FE                   MOV.L       @(R0,R15),R3
    000024F0 5117                   MOV.L       @(28,R1),R1
    000024F2 6233                   MOV         R3,R2
    000024F4 9049                   MOV.W       L1007,R0   ; H'04F0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000024F6 4300                   SHLL        R3
    000024F8 332C                   ADD         R2,R3
    000024FA 4308                   SHLL2       R3
    000024FC 02FE                   MOV.L       @(R0,R15),R2
    000024FE 4300                   SHLL        R3
    00002500 9044                   MOV.W       L1007+2,R0 ; H'04EC
    00002502 331C                   ADD         R1,R3
    00002504 5227                   MOV.L       @(28,R2),R2
    00002506 01FE                   MOV.L       @(R0,R15),R1
    00002508 6013                   MOV         R1,R0
    0000250A 4100                   SHLL        R1
    0000250C 310C                   ADD         R0,R1
    0000250E 4108                   SHLL2       R1
    00002510 4100                   SHLL        R1
    00002512 312C                   ADD         R2,R1
    00002514 5011                   MOV.L       @(4,R1),R0
    00002516 1303                   MOV.L       R0,@(12,R3)
          game.c   405                                            level->wall[i].y = level->wall[i].begin_y;
    00002518 9037                   MOV.W       L1007,R0   ; H'04F0
    0000251A 03FE                   MOV.L       @(R0,R15),R3
    0000251C 9036                   MOV.W       L1007+2,R0 ; H'04EC
    0000251E 02FE                   MOV.L       @(R0,R15),R2
    00002520 6123                   MOV         R2,R1
    00002522 4200                   SHLL        R2
    00002524 321C                   ADD         R1,R2
    00002526 4208                   SHLL2       R2
    00002528 5337                   MOV.L       @(28,R3),R3
    0000252A 4200                   SHLL        R2
    0000252C 902D                   MOV.W       L1007,R0   ; H'04F0
    0000252E 323C                   ADD         R3,R2
    00002530 01FE                   MOV.L       @(R0,R15),R1
    00002532 902B                   MOV.W       L1007+2,R0 ; H'04EC
    00002534 5117                   MOV.L       @(28,R1),R1
    00002536 03FE                   MOV.L       @(R0,R15),R3
    00002538 6033                   MOV         R3,R0
    0000253A 4300                   SHLL        R3
    0000253C 330C                   ADD         R0,R3
    0000253E 4308                   SHLL2       R3
    00002540 4300                   SHLL        R3
    00002542 331C                   ADD         R1,R3
    00002544 5032                   MOV.L       @(8,R3),R0
    00002546 1204                   MOV.L       R0,@(16,R2)
    00002548 9020                   MOV.W       L1007+2,R0 ; H'04EC
    0000254A 03FE                   MOV.L       @(R0,R15),R3
    0000254C 7301                   ADD         #1,R3
    0000254E              L920:                             
    0000254E 901D                   MOV.W       L1007+2,R0 ; H'04EC
    00002550 0F36                   MOV.L       R3,@(R0,R15)
    00002552 901A                   MOV.W       L1007,R0   ; H'04F0
    00002554 02FE                   MOV.L       @(R0,R15),R2
    00002556 5328                   MOV.L       @(32,R2),R3
    00002558 9018                   MOV.W       L1007+2,R0 ; H'04EC
    0000255A 01FE                   MOV.L       @(R0,R15),R1
    0000255C 3133                   CMP/GE      R3,R1
    0000255E 8BC3                   BF          L833
          game.c   406                                    }
          game.c   407                                    if(level->id == NB_LEVELS)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002560 9013                   MOV.W       L1007,R0   ; H'04F0
    00002562 00FE                   MOV.L       @(R0,R15),R0
    00002564 6002                   MOV.L       @R0,R0
    00002566 8811                   CMP/EQ      #17,R0
    00002568 8B01                   BF          L830
          game.c   408                                    {
          game.c   409                                            return 1;
    0000256A A3F9                   BRA         L565
    0000256C E001                   MOV         #1,R0
    0000256E              L830:                             
          game.c   410                                    }
          game.c   411                            }
          game.c   412                    }
          game.c   413    
          game.c   414    /** Drawing **/
          game.c   415                    allclr_vbuf();
    0000256E D208                   MOV.L       L1007+6,R2 ; _allclr_vbuf
    00002570 420B                   JSR         @R2
    00002572 0009                   NOP
          game.c   416                    Bdisp_AllClr_VRAM();
    00002574 D307                   MOV.L       L1007+10,R3; _Bdisp_AllClr_VRAM
    00002576 430B                   JSR         @R3
    00002578 0009                   NOP
          game.c   417                    /** Map **/
          game.c   418                    for(i=0 ; i<9 ; i++)
    0000257A E200                   MOV         #0,R2
    0000257C 9006                   MOV.W       L1007+2,R0 ; H'04EC
    0000257E A122                   BRA         L835
    00002580 0F26                   MOV.L       R2,@(R0,R15)
    00002582              L836:                             
          game.c   419                    {
          game.c   420                            for(j=0 ; j<17 ; j++)
    00002582 E100                   MOV         #0,R1
    00002584 9003                   MOV.W       L1007+4,R0 ; H'04E8
    00002586 A112                   BRA         L837
    00002588 0F16                   MOV.L       R1,@(R0,R15)
    0000258A              L1007:                            
    0000258A 04F0                   .DATA.W     H'04F0
    0000258C 04EC                   .DATA.W     H'04EC
    0000258E 04E8                   .DATA.W     H'04E8
    00002590 <00000000>             .DATA.L     _allclr_vbuf
    00002594 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00002598              L838:                             
          game.c   421                            {
          game.c   422                                    if(j+camera.x/8>=0 && j+camera.x/8<level->width && i+camera.y/8>0 && i+cam
                         +era.y/8<level->height)
    00002598 909B                   MOV.W       L1008,R0   ; H'04A0
    0000259A 02FE                   MOV.L       @(R0,R15),R2
    0000259C 4211                   CMP/PZ      R2
    0000259E 8900                   BT          L840
    000025A0 7207                   ADD         #7,R2
    000025A2              L840:                             
    000025A2 4221                   SHAR        R2
    000025A4 9096                   MOV.W       L1008+2,R0 ; H'04E8
    000025A6 4221                   SHAR        R2
    000025A8 01FE                   MOV.L       @(R0,R15),R1
    000025AA 4221                   SHAR        R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000025AC 321C                   ADD         R1,R2
    000025AE 4211                   CMP/PZ      R2
    000025B0 8901                   BT          L1009
    000025B2 A0F7                   BRA         L839
    000025B4 0009                   NOP
    000025B6              L1009:                            
    000025B6 908C                   MOV.W       L1008,R0   ; H'04A0
    000025B8 02FE                   MOV.L       @(R0,R15),R2
    000025BA 4211                   CMP/PZ      R2
    000025BC 8900                   BT          L841
    000025BE 7207                   ADD         #7,R2
    000025C0              L841:                             
    000025C0 9089                   MOV.W       L1008+4,R0 ; H'04F0
    000025C2 4221                   SHAR        R2
    000025C4 03FE                   MOV.L       @(R0,R15),R3
    000025C6 4221                   SHAR        R2
    000025C8 4221                   SHAR        R2
    000025CA 312C                   ADD         R2,R1
    000025CC 5233                   MOV.L       @(12,R3),R2
    000025CE 3123                   CMP/GE      R2,R1
    000025D0 8B01                   BF          L1010
    000025D2 A0E7                   BRA         L839
    000025D4 0009                   NOP
    000025D6              L1010:                            
    000025D6 907F                   MOV.W       L1008+6,R0 ; H'04A4
    000025D8 01FE                   MOV.L       @(R0,R15),R1
    000025DA 4111                   CMP/PZ      R1
    000025DC 8900                   BT          L842
    000025DE 7107                   ADD         #7,R1
    000025E0              L842:                             
    000025E0 907B                   MOV.W       L1008+8,R0 ; H'04EC
    000025E2 4121                   SHAR        R1
    000025E4 02FE                   MOV.L       @(R0,R15),R2
    000025E6 4121                   SHAR        R1
    000025E8 4121                   SHAR        R1
    000025EA 312C                   ADD         R2,R1
    000025EC 4115                   CMP/PL      R1
    000025EE 8901                   BT          L1011
    000025F0 A0D8                   BRA         L839
    000025F2 0009                   NOP
    000025F4              L1011:                            
    000025F4 9070                   MOV.W       L1008+6,R0 ; H'04A4
    000025F6 02FE                   MOV.L       @(R0,R15),R2
    000025F8 4211                   CMP/PZ      R2
    000025FA 8900                   BT          L843
    000025FC 7207                   ADD         #7,R2
    000025FE              L843:                             
    000025FE 4221                   SHAR        R2
    00002600 906B                   MOV.W       L1008+8,R0 ; H'04EC
    00002602 4221                   SHAR        R2
    00002604 01FE                   MOV.L       @(R0,R15),R1
    00002606 4221                   SHAR        R2
    00002608 9065                   MOV.W       L1008+4,R0 ; H'04F0
    0000260A 321C                   ADD         R1,R2
    0000260C 03FE                   MOV.L       @(R0,R15),R3
    0000260E 5134                   MOV.L       @(16,R3),R1
    00002610 3213                   CMP/GE      R1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002612 8B01                   BF          L1012
    00002614 A0C6                   BRA         L839
    00002616 0009                   NOP
    00002618              L1012:                            
          game.c   423                                    {
          game.c   424                                            Bmp b = level->map[(i+camera.y/8)*level->width+j+camera.x/8];
    00002618 905D                   MOV.W       L1008+4,R0 ; H'04F0
    0000261A 915D                   MOV.W       L1008+6,R1 ; H'04A4
    0000261C 31FC                   ADD         R15,R1
    0000261E 6312                   MOV.L       @R1,R3
    00002620 4311                   CMP/PZ      R3
    00002622 8D01                   BT/S        L844
    00002624 00FE                   MOV.L       @(R0,R15),R0
    00002626 7307                   ADD         #7,R3
    00002628              L844:                             
    00002628 9157                   MOV.W       L1008+8,R1 ; H'04EC
    0000262A 4321                   SHAR        R3
    0000262C 4321                   SHAR        R3
    0000262E 4321                   SHAR        R3
    00002630 31FC                   ADD         R15,R1
    00002632 6212                   MOV.L       @R1,R2
    00002634 914F                   MOV.W       L1008+4,R1 ; H'04F0
    00002636 332C                   ADD         R2,R3
    00002638 31FC                   ADD         R15,R1
    0000263A 6112                   MOV.L       @R1,R1
    0000263C 5213                   MOV.L       @(12,R1),R2
    0000263E 0327                   MUL.L       R2,R3
    00002640 9148                   MOV.W       L1008+2,R1 ; H'04E8
    00002642 031A                   STS         MACL,R3
    00002644 9245                   MOV.W       L1008,R2   ; H'04A0
    00002646 31FC                   ADD         R15,R1
    00002648 6112                   MOV.L       @R1,R1
    0000264A 32FC                   ADD         R15,R2
    0000264C 6222                   MOV.L       @R2,R2
    0000264E 331C                   ADD         R1,R3
    00002650 4211                   CMP/PZ      R2
    00002652 8900                   BT          L845
    00002654 7207                   ADD         #7,R2
    00002656              L845:                             
    00002656 4221                   SHAR        R2
    00002658 5002                   MOV.L       @(8,R0),R0
    0000265A 4221                   SHAR        R2
    0000265C 4221                   SHAR        R2
    0000265E 332C                   ADD         R2,R3
    00002660 033C                   MOV.B       @(R0,R3),R3
    00002662 2F32                   MOV.L       R3,@R15
          game.c   425                                            if(b==WALL &&
          game.c   426                                               level->map[(i-1+camera.y/8)*level->width+j+camera.x/8]!=WALL &&
          game.c   427                                               level->map[(i-1+camera.y/8)*level->width+j+camera.x/8]!=FAKE_WA
                         +LL)
    00002664 6033                   MOV         R3,R0
    00002666 8801                   CMP/EQ      #1,R0
    00002668 8B78                   BF          L846
    0000266A 9034                   MOV.W       L1008+4,R0 ; H'04F0
    0000266C 9134                   MOV.W       L1008+6,R1 ; H'04A4
    0000266E 31FC                   ADD         R15,R1
    00002670 6312                   MOV.L       @R1,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002672 4311                   CMP/PZ      R3
    00002674 8D01                   BT/S        L847
    00002676 00FE                   MOV.L       @(R0,R15),R0
    00002678 7307                   ADD         #7,R3
    0000267A              L847:                             
    0000267A 4321                   SHAR        R3
    0000267C 912D                   MOV.W       L1008+8,R1 ; H'04EC
    0000267E 4321                   SHAR        R3
    00002680 4321                   SHAR        R3
    00002682 31FC                   ADD         R15,R1
    00002684 6212                   MOV.L       @R1,R2
    00002686 332C                   ADD         R2,R3
    00002688 9125                   MOV.W       L1008+4,R1 ; H'04F0
    0000268A 73FF                   ADD         #-1,R3
    0000268C 31FC                   ADD         R15,R1
    0000268E 6212                   MOV.L       @R1,R2
    00002690 9120                   MOV.W       L1008+2,R1 ; H'04E8
    00002692 5223                   MOV.L       @(12,R2),R2
    00002694 0327                   MUL.L       R2,R3
    00002696 31FC                   ADD         R15,R1
    00002698 921B                   MOV.W       L1008,R2   ; H'04A0
    0000269A 031A                   STS         MACL,R3
    0000269C 6112                   MOV.L       @R1,R1
    0000269E 32FC                   ADD         R15,R2
    000026A0 6222                   MOV.L       @R2,R2
    000026A2 331C                   ADD         R1,R3
    000026A4 4211                   CMP/PZ      R2
    000026A6 8900                   BT          L848
    000026A8 7207                   ADD         #7,R2
    000026AA              L848:                             
    000026AA 4221                   SHAR        R2
    000026AC 5002                   MOV.L       @(8,R0),R0
    000026AE 4221                   SHAR        R2
    000026B0 4221                   SHAR        R2
    000026B2 332C                   ADD         R2,R3
    000026B4 003C                   MOV.B       @(R0,R3),R0
    000026B6 8801                   CMP/EQ      #1,R0
    000026B8 8950                   BT          L846
    000026BA 900C                   MOV.W       L1008+4,R0 ; H'04F0
    000026BC 910C                   MOV.W       L1008+6,R1 ; H'04A4
    000026BE 31FC                   ADD         R15,R1
    000026C0 6312                   MOV.L       @R1,R3
    000026C2 4311                   CMP/PZ      R3
    000026C4 8D01                   BT/S        L849
    000026C6 00FE                   MOV.L       @(R0,R15),R0
    000026C8 7307                   ADD         #7,R3
    000026CA              L849:                             
    000026CA 4321                   SHAR        R3
    000026CC 4321                   SHAR        R3
    000026CE A005                   BRA         L933
    000026D0 0009                   NOP
    000026D2              L1008:                            
    000026D2 04A0                   .DATA.W     H'04A0
    000026D4 04E8                   .DATA.W     H'04E8
    000026D6 04F0                   .DATA.W     H'04F0
    000026D8 04A4                   .DATA.W     H'04A4
    000026DA 04EC                   .DATA.W     H'04EC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000026DC              L933:                             
    000026DC 917E                   MOV.W       L1013,R1   ; H'04EC
    000026DE 4321                   SHAR        R3
    000026E0 31FC                   ADD         R15,R1
    000026E2 6212                   MOV.L       @R1,R2
    000026E4 917B                   MOV.W       L1013+2,R1 ; H'04F0
    000026E6 332C                   ADD         R2,R3
    000026E8 73FF                   ADD         #-1,R3
    000026EA 31FC                   ADD         R15,R1
    000026EC 6212                   MOV.L       @R1,R2
    000026EE 5223                   MOV.L       @(12,R2),R2
    000026F0 9176                   MOV.W       L1013+4,R1 ; H'04E8
    000026F2 0327                   MUL.L       R2,R3
    000026F4 9275                   MOV.W       L1013+6,R2 ; H'04A0
    000026F6 31FC                   ADD         R15,R1
    000026F8 6112                   MOV.L       @R1,R1
    000026FA 32FC                   ADD         R15,R2
    000026FC 6222                   MOV.L       @R2,R2
    000026FE 031A                   STS         MACL,R3
    00002700 331C                   ADD         R1,R3
    00002702 4211                   CMP/PZ      R2
    00002704 8900                   BT          L850
    00002706 7207                   ADD         #7,R2
    00002708              L850:                             
    00002708 5002                   MOV.L       @(8,R0),R0
    0000270A 4221                   SHAR        R2
    0000270C 4221                   SHAR        R2
    0000270E 4221                   SHAR        R2
    00002710 332C                   ADD         R2,R3
    00002712 003C                   MOV.B       @(R0,R3),R0
    00002714 880D                   CMP/EQ      #13,R0
    00002716 8921                   BT          L846
          game.c   428                                                    draw_bmp(WALL_TOP, 8*j-camera.x%8, 8*i-camera.y%8);
    00002718 9060                   MOV.W       L1013,R0   ; H'04EC
    0000271A 06FE                   MOV.L       @(R0,R15),R6
    0000271C 9062                   MOV.W       L1013+8,R0 ; H'04A4
    0000271E 4608                   SHLL2       R6
    00002720 00FE                   MOV.L       @(R0,R15),R0
    00002722 4600                   SHLL        R6
    00002724 4011                   CMP/PZ      R0
    00002726 8B01                   BF          L851
    00002728 A005                   BRA         L852
    0000272A C907                   AND         #7,R0
    0000272C              L851:                             
    0000272C 6007                   NOT         R0,R0
    0000272E 7001                   ADD         #1,R0
    00002730 C907                   AND         #7,R0
    00002732 6007                   NOT         R0,R0
    00002734 7001                   ADD         #1,R0
    00002736              L852:                             
    00002736 3608                   SUB         R0,R6
    00002738 9052                   MOV.W       L1013+4,R0 ; H'04E8
    0000273A 05FE                   MOV.L       @(R0,R15),R5
    0000273C 9051                   MOV.W       L1013+6,R0 ; H'04A0
    0000273E 4508                   SHLL2       R5
    00002740 00FE                   MOV.L       @(R0,R15),R0
    00002742 4500                   SHLL        R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002744 4011                   CMP/PZ      R0
    00002746 8B01                   BF          L853
    00002748 A005                   BRA         L854
    0000274A C907                   AND         #7,R0
    0000274C              L853:                             
    0000274C 6007                   NOT         R0,R0
    0000274E 7001                   ADD         #1,R0
    00002750 C907                   AND         #7,R0
    00002752 6007                   NOT         R0,R0
    00002754 7001                   ADD         #1,R0
    00002756              L854:                             
    00002756 3508                   SUB         R0,R5
    00002758 A021                   BRA         L921
    0000275A E402                   MOV         #2,R4
    0000275C              L846:                             
          game.c   429                                            else
          game.c   430                                                    draw_bmp(b, 8*j-camera.x%8, 8*i-camera.y%8);
    0000275C 903E                   MOV.W       L1013,R0   ; H'04EC
    0000275E 06FE                   MOV.L       @(R0,R15),R6
    00002760 9040                   MOV.W       L1013+8,R0 ; H'04A4
    00002762 4608                   SHLL2       R6
    00002764 00FE                   MOV.L       @(R0,R15),R0
    00002766 4600                   SHLL        R6
    00002768 4011                   CMP/PZ      R0
    0000276A 8B01                   BF          L856
    0000276C A005                   BRA         L857
    0000276E C907                   AND         #7,R0
    00002770              L856:                             
    00002770 6007                   NOT         R0,R0
    00002772 7001                   ADD         #1,R0
    00002774 C907                   AND         #7,R0
    00002776 6007                   NOT         R0,R0
    00002778 7001                   ADD         #1,R0
    0000277A              L857:                             
    0000277A 3608                   SUB         R0,R6
    0000277C 9030                   MOV.W       L1013+4,R0 ; H'04E8
    0000277E 05FE                   MOV.L       @(R0,R15),R5
    00002780 902F                   MOV.W       L1013+6,R0 ; H'04A0
    00002782 4508                   SHLL2       R5
    00002784 00FE                   MOV.L       @(R0,R15),R0
    00002786 4500                   SHLL        R5
    00002788 4011                   CMP/PZ      R0
    0000278A 8B01                   BF          L858
    0000278C A005                   BRA         L859
    0000278E C907                   AND         #7,R0
    00002790              L858:                             
    00002790 6007                   NOT         R0,R0
    00002792 7001                   ADD         #1,R0
    00002794 C907                   AND         #7,R0
    00002796 6007                   NOT         R0,R0
    00002798 7001                   ADD         #1,R0
    0000279A              L859:                             
    0000279A 3508                   SUB         R0,R5
    0000279C 64F2                   MOV.L       @R15,R4
    0000279E              L921:                             
    0000279E D312                   MOV.L       L1013+12,R3; _draw_bmp
    000027A0 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000027A2 0009                   NOP
    000027A4              L839:                             
    000027A4 901C                   MOV.W       L1013+4,R0 ; H'04E8
    000027A6 02FE                   MOV.L       @(R0,R15),R2
    000027A8 901A                   MOV.W       L1013+4,R0 ; H'04E8
    000027AA 7201                   ADD         #1,R2
    000027AC 0F26                   MOV.L       R2,@(R0,R15)
    000027AE              L837:                             
    000027AE E311                   MOV         #17,R3
    000027B0 9016                   MOV.W       L1013+4,R0 ; H'04E8
    000027B2 01FE                   MOV.L       @(R0,R15),R1
    000027B4 3133                   CMP/GE      R3,R1
    000027B6 8901                   BT          L1014
    000027B8 AEEE                   BRA         L838
    000027BA 0009                   NOP
    000027BC              L1014:                            
    000027BC 900E                   MOV.W       L1013,R0   ; H'04EC
    000027BE 03FE                   MOV.L       @(R0,R15),R3
    000027C0 900C                   MOV.W       L1013,R0   ; H'04EC
    000027C2 7301                   ADD         #1,R3
    000027C4 0F36                   MOV.L       R3,@(R0,R15)
    000027C6              L835:                             
    000027C6 E209                   MOV         #9,R2
    000027C8 9008                   MOV.W       L1013,R0   ; H'04EC
    000027CA 01FE                   MOV.L       @(R0,R15),R1
    000027CC 3123                   CMP/GE      R2,R1
    000027CE 8901                   BT          L1015
    000027D0 AED7                   BRA         L836
    000027D2 0009                   NOP
    000027D4              L1015:                            
          game.c   431                                    }
          game.c   432                            }
          game.c   433                    }
          game.c   434                    /** Moving lines **/
          game.c   435                    for(i=0 ; i<level->nb_lines ; i++)
    000027D4 9002                   MOV.W       L1013,R0   ; H'04EC
    000027D6 E300                   MOV         #0,R3
    000027D8 A04A                   BRA         L860
    000027DA 0F36                   MOV.L       R3,@(R0,R15)
    000027DC              L1013:                            
    000027DC 04EC                   .DATA.W     H'04EC
    000027DE 04F0                   .DATA.W     H'04F0
    000027E0 04E8                   .DATA.W     H'04E8
    000027E2 04A0                   .DATA.W     H'04A0
    000027E4 04A4                   .DATA.W     H'04A4
    000027E6 0000                   .DATA.W     0
    000027E8 <00000000>             .DATA.L     _draw_bmp
    000027EC              L861:                             
          game.c   436                            draw_horizontal_line(level->line[i].y-camera.y, level->line[i].x-camera.x, level->
                         +line[i].x+level->line[i].width-1-camera.x);
    000027EC 9069                   MOV.W       L1016,R0   ; H'04F0
    000027EE 06FE                   MOV.L       @(R0,R15),R6
    000027F0 9068                   MOV.W       L1016+2,R0 ; H'04EC
    000027F2 03FE                   MOV.L       @(R0,R15),R3
    000027F4 5665                   MOV.L       @(20,R6),R6
    000027F6 6233                   MOV         R3,R2
    000027F8 9063                   MOV.W       L1016,R0   ; H'04F0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000027FA 4308                   SHLL2       R3
    000027FC 4300                   SHLL        R3
    000027FE 332C                   ADD         R2,R3
    00002800 4308                   SHLL2       R3
    00002802 363C                   ADD         R3,R6
    00002804 03FE                   MOV.L       @(R0,R15),R3
    00002806 905D                   MOV.W       L1016+2,R0 ; H'04EC
    00002808 5335                   MOV.L       @(20,R3),R3
    0000280A 02FE                   MOV.L       @(R0,R15),R2
    0000280C 6662                   MOV.L       @R6,R6
    0000280E 6123                   MOV         R2,R1
    00002810 9059                   MOV.W       L1016+4,R0 ; H'04A0
    00002812 4208                   SHLL2       R2
    00002814 4200                   SHLL        R2
    00002816 321C                   ADD         R1,R2
    00002818 4208                   SHLL2       R2
    0000281A 323C                   ADD         R3,R2
    0000281C 5322                   MOV.L       @(8,R2),R3
    0000281E 363C                   ADD         R3,R6
    00002820 02FE                   MOV.L       @(R0,R15),R2
    00002822 3628                   SUB         R2,R6
    00002824 904D                   MOV.W       L1016,R0   ; H'04F0
    00002826 05FE                   MOV.L       @(R0,R15),R5
    00002828 904C                   MOV.W       L1016+2,R0 ; H'04EC
    0000282A 03FE                   MOV.L       @(R0,R15),R3
    0000282C 5555                   MOV.L       @(20,R5),R5
    0000282E 6233                   MOV         R3,R2
    00002830 9049                   MOV.W       L1016+4,R0 ; H'04A0
    00002832 4308                   SHLL2       R3
    00002834 4300                   SHLL        R3
    00002836 332C                   ADD         R2,R3
    00002838 4308                   SHLL2       R3
    0000283A 353C                   ADD         R3,R5
    0000283C 03FE                   MOV.L       @(R0,R15),R3
    0000283E 6552                   MOV.L       @R5,R5
    00002840 903F                   MOV.W       L1016,R0   ; H'04F0
    00002842 3538                   SUB         R3,R5
    00002844 04FE                   MOV.L       @(R0,R15),R4
    00002846 903D                   MOV.W       L1016+2,R0 ; H'04EC
    00002848 5445                   MOV.L       @(20,R4),R4
    0000284A 03FE                   MOV.L       @(R0,R15),R3
    0000284C 903C                   MOV.W       L1016+6,R0 ; H'04A4
    0000284E 6233                   MOV         R3,R2
    00002850 4308                   SHLL2       R3
    00002852 4300                   SHLL        R3
    00002854 332C                   ADD         R2,R3
    00002856 4308                   SHLL2       R3
    00002858 343C                   ADD         R3,R4
    0000285A 03FE                   MOV.L       @(R0,R15),R3
    0000285C 5441                   MOV.L       @(4,R4),R4
    0000285E 3438                   SUB         R3,R4
    00002860 D31A                   MOV.L       L1016+10,R3; _draw_horizontal_line
    00002862 430B                   JSR         @R3
    00002864 76FF                   ADD         #-1,R6
    00002866 902D                   MOV.W       L1016+2,R0 ; H'04EC
    00002868 02FE                   MOV.L       @(R0,R15),R2
    0000286A 7201                   ADD         #1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000286C 902A                   MOV.W       L1016+2,R0 ; H'04EC
    0000286E 0F26                   MOV.L       R2,@(R0,R15)
    00002870              L860:                             
    00002870 9027                   MOV.W       L1016,R0   ; H'04F0
    00002872 03FE                   MOV.L       @(R0,R15),R3
    00002874 9026                   MOV.W       L1016+2,R0 ; H'04EC
    00002876 5236                   MOV.L       @(24,R3),R2
    00002878 01FE                   MOV.L       @(R0,R15),R1
    0000287A 3123                   CMP/GE      R2,R1
    0000287C 8BB6                   BF          L861
          game.c   437                    /** Moving walls **/
          game.c   438                    for(i=0 ; i<level->nb_walls ; i++)
    0000287E E300                   MOV         #0,R3
    00002880 9020                   MOV.W       L1016+2,R0 ; H'04EC
    00002882 A17B                   BRA         L862
    00002884 0F36                   MOV.L       R3,@(R0,R15)
    00002886              L863:                             
          game.c   439                    {
          game.c   440                            for(j=0 ; j<level->wall[i].size ; j++)
    00002886 E100                   MOV         #0,R1
    00002888 901F                   MOV.W       L1016+8,R0 ; H'04E8
    0000288A A160                   BRA         L864
    0000288C 0F16                   MOV.L       R1,@(R0,R15)
    0000288E              L865:                             
          game.c   441                            {
          game.c   442                                    switch(level->wall[i].direction)
    0000288E 9018                   MOV.W       L1016,R0   ; H'04F0
    00002890 9118                   MOV.W       L1016+2,R1 ; H'04EC
    00002892 00FE                   MOV.L       @(R0,R15),R0
    00002894 31FC                   ADD         R15,R1
    00002896 6312                   MOV.L       @R1,R3
    00002898 5007                   MOV.L       @(28,R0),R0
    0000289A 6233                   MOV         R3,R2
    0000289C 4300                   SHLL        R3
    0000289E 332C                   ADD         R2,R3
    000028A0 4308                   SHLL2       R3
    000028A2 4300                   SHLL        R3
    000028A4 003E                   MOV.L       @(R0,R3),R0
    000028A6 8800                   CMP/EQ      #0,R0
    000028A8 8912                   BT          L530
    000028AA 8801                   CMP/EQ      #1,R0
    000028AC 895C                   BT          L531
    000028AE 8802                   CMP/EQ      #2,R0
    000028B0 8B01                   BF          L1017
    000028B2 A0AD                   BRA         L532
    000028B4 0009                   NOP
    000028B6              L1017:                            
    000028B6 8803                   CMP/EQ      #3,R0
    000028B8 8B01                   BF          L1018
    000028BA A0F5                   BRA         L533
    000028BC 0009                   NOP
    000028BE              L1018:                            
    000028BE A141                   BRA         L866
    000028C0 0009                   NOP
    000028C2              L1016:                            
    000028C2 04F0                   .DATA.W     H'04F0
    000028C4 04EC                   .DATA.W     H'04EC




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000028C6 04A0                   .DATA.W     H'04A0
    000028C8 04A4                   .DATA.W     H'04A4
    000028CA 04E8                   .DATA.W     H'04E8
    000028CC <00000000>             .DATA.L     _draw_horizontal_line
    000028D0              L530:                            ; case label 
          game.c   443                                    {
          game.c   444                                            case W_LEFT:
          game.c   445                                                    draw_bmp(WALL, level->wall[i].x-camera.x, level->wall[i].y
                         ++j*8-camera.y);
    000028D0 9096                   MOV.W       L1019,R0   ; H'04F0
    000028D2 06FE                   MOV.L       @(R0,R15),R6
    000028D4 9095                   MOV.W       L1019+2,R0 ; H'04EC
    000028D6 03FE                   MOV.L       @(R0,R15),R3
    000028D8 5667                   MOV.L       @(28,R6),R6
    000028DA 6233                   MOV         R3,R2
    000028DC 9092                   MOV.W       L1019+4,R0 ; H'04E8
    000028DE 4300                   SHLL        R3
    000028E0 332C                   ADD         R2,R3
    000028E2 4308                   SHLL2       R3
    000028E4 4300                   SHLL        R3
    000028E6 363C                   ADD         R3,R6
    000028E8 03FE                   MOV.L       @(R0,R15),R3
    000028EA 4308                   SHLL2       R3
    000028EC 5664                   MOV.L       @(16,R6),R6
    000028EE 4300                   SHLL        R3
    000028F0 9089                   MOV.W       L1019+6,R0 ; H'04A4
    000028F2 363C                   ADD         R3,R6
    000028F4 03FE                   MOV.L       @(R0,R15),R3
    000028F6 3638                   SUB         R3,R6
    000028F8 9082                   MOV.W       L1019,R0   ; H'04F0
    000028FA 05FE                   MOV.L       @(R0,R15),R5
    000028FC 9081                   MOV.W       L1019+2,R0 ; H'04EC
    000028FE 03FE                   MOV.L       @(R0,R15),R3
    00002900 5557                   MOV.L       @(28,R5),R5
    00002902 6233                   MOV         R3,R2
    00002904 4300                   SHLL        R3
    00002906 332C                   ADD         R2,R3
    00002908 4308                   SHLL2       R3
    0000290A 4300                   SHLL        R3
    0000290C 353C                   ADD         R3,R5
    0000290E 907B                   MOV.W       L1019+8,R0 ; H'04A0
    00002910 5553                   MOV.L       @(12,R5),R5
    00002912 03FE                   MOV.L       @(R0,R15),R3
    00002914 3538                   SUB         R3,R5
    00002916 D33D                   MOV.L       L1019+12,R3; _draw_bmp
    00002918 430B                   JSR         @R3
    0000291A E401                   MOV         #1,R4
          game.c   446                                                    draw_bmp(SPIKE_LEFT, level->wall[i].x-8-camera.x, level->w
                         +all[i].y+j*8-camera.y);
    0000291C 9070                   MOV.W       L1019,R0   ; H'04F0
    0000291E 06FE                   MOV.L       @(R0,R15),R6
    00002920 906F                   MOV.W       L1019+2,R0 ; H'04EC
    00002922 03FE                   MOV.L       @(R0,R15),R3
    00002924 5667                   MOV.L       @(28,R6),R6
    00002926 6233                   MOV         R3,R2
    00002928 906C                   MOV.W       L1019+4,R0 ; H'04E8
    0000292A 4300                   SHLL        R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000292C 332C                   ADD         R2,R3
    0000292E 4308                   SHLL2       R3
    00002930 4300                   SHLL        R3
    00002932 363C                   ADD         R3,R6
    00002934 03FE                   MOV.L       @(R0,R15),R3
    00002936 4308                   SHLL2       R3
    00002938 5664                   MOV.L       @(16,R6),R6
    0000293A 4300                   SHLL        R3
    0000293C 9063                   MOV.W       L1019+6,R0 ; H'04A4
    0000293E 363C                   ADD         R3,R6
    00002940 03FE                   MOV.L       @(R0,R15),R3
    00002942 3638                   SUB         R3,R6
    00002944 905C                   MOV.W       L1019,R0   ; H'04F0
    00002946 05FE                   MOV.L       @(R0,R15),R5
    00002948 905B                   MOV.W       L1019+2,R0 ; H'04EC
    0000294A 03FE                   MOV.L       @(R0,R15),R3
    0000294C 5557                   MOV.L       @(28,R5),R5
    0000294E 6233                   MOV         R3,R2
    00002950 905A                   MOV.W       L1019+8,R0 ; H'04A0
    00002952 4300                   SHLL        R3
    00002954 332C                   ADD         R2,R3
    00002956 4308                   SHLL2       R3
    00002958 4300                   SHLL        R3
    0000295A 353C                   ADD         R3,R5
    0000295C 03FE                   MOV.L       @(R0,R15),R3
    0000295E 5553                   MOV.L       @(12,R5),R5
    00002960 3538                   SUB         R3,R5
    00002962 75F8                   ADD         #-8,R5
          game.c   447                                                    break;
    00002964 A0EB                   BRA         L924
    00002966 E403                   MOV         #3,R4
    00002968              L531:                            ; case label 
          game.c   448                                            case W_RIGHT:
          game.c   449                                                    draw_bmp(WALL, level->wall[i].x-camera.x, level->wall[i].y
                         ++j*8-camera.y);
    00002968 904A                   MOV.W       L1019,R0   ; H'04F0
    0000296A 06FE                   MOV.L       @(R0,R15),R6
    0000296C 9049                   MOV.W       L1019+2,R0 ; H'04EC
    0000296E 03FE                   MOV.L       @(R0,R15),R3
    00002970 5667                   MOV.L       @(28,R6),R6
    00002972 6233                   MOV         R3,R2
    00002974 9046                   MOV.W       L1019+4,R0 ; H'04E8
    00002976 4300                   SHLL        R3
    00002978 332C                   ADD         R2,R3
    0000297A 4308                   SHLL2       R3
    0000297C 4300                   SHLL        R3
    0000297E 363C                   ADD         R3,R6
    00002980 03FE                   MOV.L       @(R0,R15),R3
    00002982 4308                   SHLL2       R3
    00002984 5664                   MOV.L       @(16,R6),R6
    00002986 4300                   SHLL        R3
    00002988 903D                   MOV.W       L1019+6,R0 ; H'04A4
    0000298A 363C                   ADD         R3,R6
    0000298C 03FE                   MOV.L       @(R0,R15),R3
    0000298E 3638                   SUB         R3,R6
    00002990 9036                   MOV.W       L1019,R0   ; H'04F0
    00002992 05FE                   MOV.L       @(R0,R15),R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002994 9035                   MOV.W       L1019+2,R0 ; H'04EC
    00002996 03FE                   MOV.L       @(R0,R15),R3
    00002998 5557                   MOV.L       @(28,R5),R5
    0000299A 6233                   MOV         R3,R2
    0000299C 4300                   SHLL        R3
    0000299E 332C                   ADD         R2,R3
    000029A0 4308                   SHLL2       R3
    000029A2 4300                   SHLL        R3
    000029A4 353C                   ADD         R3,R5
    000029A6 902F                   MOV.W       L1019+8,R0 ; H'04A0
    000029A8 5553                   MOV.L       @(12,R5),R5
    000029AA 03FE                   MOV.L       @(R0,R15),R3
    000029AC 3538                   SUB         R3,R5
    000029AE D317                   MOV.L       L1019+12,R3; _draw_bmp
    000029B0 430B                   JSR         @R3
    000029B2 E401                   MOV         #1,R4
          game.c   450                                                    draw_bmp(SPIKE_RIGHT, level->wall[i].x+8-camera.x, level->
                         +wall[i].y+j*8-camera.y);
    000029B4 9024                   MOV.W       L1019,R0   ; H'04F0
    000029B6 06FE                   MOV.L       @(R0,R15),R6
    000029B8 9023                   MOV.W       L1019+2,R0 ; H'04EC
    000029BA 03FE                   MOV.L       @(R0,R15),R3
    000029BC 5667                   MOV.L       @(28,R6),R6
    000029BE 6233                   MOV         R3,R2
    000029C0 9020                   MOV.W       L1019+4,R0 ; H'04E8
    000029C2 4300                   SHLL        R3
    000029C4 332C                   ADD         R2,R3
    000029C6 4308                   SHLL2       R3
    000029C8 4300                   SHLL        R3
    000029CA 363C                   ADD         R3,R6
    000029CC 03FE                   MOV.L       @(R0,R15),R3
    000029CE 4308                   SHLL2       R3
    000029D0 5664                   MOV.L       @(16,R6),R6
    000029D2 4300                   SHLL        R3
    000029D4 9017                   MOV.W       L1019+6,R0 ; H'04A4
    000029D6 363C                   ADD         R3,R6
    000029D8 03FE                   MOV.L       @(R0,R15),R3
    000029DA 3638                   SUB         R3,R6
    000029DC 9010                   MOV.W       L1019,R0   ; H'04F0
    000029DE 05FE                   MOV.L       @(R0,R15),R5
    000029E0 900F                   MOV.W       L1019+2,R0 ; H'04EC
    000029E2 03FE                   MOV.L       @(R0,R15),R3
    000029E4 5557                   MOV.L       @(28,R5),R5
    000029E6 6233                   MOV         R3,R2
    000029E8 900E                   MOV.W       L1019+8,R0 ; H'04A0
    000029EA 4300                   SHLL        R3
    000029EC 332C                   ADD         R2,R3
    000029EE 4308                   SHLL2       R3
    000029F0 4300                   SHLL        R3
    000029F2 353C                   ADD         R3,R5
    000029F4 03FE                   MOV.L       @(R0,R15),R3
    000029F6 5553                   MOV.L       @(12,R5),R5
    000029F8 3538                   SUB         R3,R5
    000029FA 7508                   ADD         #8,R5
          game.c   451                                                    break;
    000029FC A09F                   BRA         L924
    000029FE E404                   MOV         #4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  110


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002A00              L1019:                            
    00002A00 04F0                   .DATA.W     H'04F0
    00002A02 04EC                   .DATA.W     H'04EC
    00002A04 04E8                   .DATA.W     H'04E8
    00002A06 04A4                   .DATA.W     H'04A4
    00002A08 04A0                   .DATA.W     H'04A0
    00002A0A 0000                   .DATA.W     0
    00002A0C <00000000>             .DATA.L     _draw_bmp
    00002A10              L532:                            ; case label 
          game.c   452                                            case W_UP:
          game.c   453                                                    draw_bmp(WALL, level->wall[i].x-camera.x, level->wall[i].y
                         ++j*8-camera.y);
    00002A10 90C1                   MOV.W       L1020,R0   ; H'04F0
    00002A12 06FE                   MOV.L       @(R0,R15),R6
    00002A14 90C0                   MOV.W       L1020+2,R0 ; H'04EC
    00002A16 03FE                   MOV.L       @(R0,R15),R3
    00002A18 5667                   MOV.L       @(28,R6),R6
    00002A1A 6233                   MOV         R3,R2
    00002A1C 90BD                   MOV.W       L1020+4,R0 ; H'04E8
    00002A1E 4300                   SHLL        R3
    00002A20 332C                   ADD         R2,R3
    00002A22 4308                   SHLL2       R3
    00002A24 4300                   SHLL        R3
    00002A26 363C                   ADD         R3,R6
    00002A28 03FE                   MOV.L       @(R0,R15),R3
    00002A2A 4308                   SHLL2       R3
    00002A2C 5664                   MOV.L       @(16,R6),R6
    00002A2E 4300                   SHLL        R3
    00002A30 90B4                   MOV.W       L1020+6,R0 ; H'04A4
    00002A32 363C                   ADD         R3,R6
    00002A34 03FE                   MOV.L       @(R0,R15),R3
    00002A36 3638                   SUB         R3,R6
    00002A38 90AD                   MOV.W       L1020,R0   ; H'04F0
    00002A3A 05FE                   MOV.L       @(R0,R15),R5
    00002A3C 90AC                   MOV.W       L1020+2,R0 ; H'04EC
    00002A3E 03FE                   MOV.L       @(R0,R15),R3
    00002A40 5557                   MOV.L       @(28,R5),R5
    00002A42 6233                   MOV         R3,R2
    00002A44 4300                   SHLL        R3
    00002A46 332C                   ADD         R2,R3
    00002A48 4308                   SHLL2       R3
    00002A4A 4300                   SHLL        R3
    00002A4C 353C                   ADD         R3,R5
    00002A4E 90A6                   MOV.W       L1020+8,R0 ; H'04A0
    00002A50 5553                   MOV.L       @(12,R5),R5
    00002A52 03FE                   MOV.L       @(R0,R15),R3
    00002A54 3538                   SUB         R3,R5
    00002A56 D352                   MOV.L       L1020+10,R3; _draw_bmp
    00002A58 430B                   JSR         @R3
    00002A5A E401                   MOV         #1,R4
          game.c   454                                                    draw_bmp(SPIKE_UP, level->wall[i].x-camera.x, level->wall[
                         +i].y+j*8-8-camera.y);
    00002A5C 909B                   MOV.W       L1020,R0   ; H'04F0
    00002A5E 06FE                   MOV.L       @(R0,R15),R6
    00002A60 909A                   MOV.W       L1020+2,R0 ; H'04EC
    00002A62 03FE                   MOV.L       @(R0,R15),R3
    00002A64 5667                   MOV.L       @(28,R6),R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  111


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002A66 6233                   MOV         R3,R2
    00002A68 9097                   MOV.W       L1020+4,R0 ; H'04E8
    00002A6A 4300                   SHLL        R3
    00002A6C 332C                   ADD         R2,R3
    00002A6E 4308                   SHLL2       R3
    00002A70 4300                   SHLL        R3
    00002A72 363C                   ADD         R3,R6
    00002A74 03FE                   MOV.L       @(R0,R15),R3
    00002A76 4308                   SHLL2       R3
    00002A78 5664                   MOV.L       @(16,R6),R6
    00002A7A 4300                   SHLL        R3
    00002A7C 908E                   MOV.W       L1020+6,R0 ; H'04A4
    00002A7E 363C                   ADD         R3,R6
    00002A80 03FE                   MOV.L       @(R0,R15),R3
    00002A82 3638                   SUB         R3,R6
    00002A84 9087                   MOV.W       L1020,R0   ; H'04F0
    00002A86 76F8                   ADD         #-8,R6
    00002A88 05FE                   MOV.L       @(R0,R15),R5
    00002A8A 9085                   MOV.W       L1020+2,R0 ; H'04EC
    00002A8C 5557                   MOV.L       @(28,R5),R5
    00002A8E 03FE                   MOV.L       @(R0,R15),R3
    00002A90 6233                   MOV         R3,R2
    00002A92 4300                   SHLL        R3
    00002A94 332C                   ADD         R2,R3
    00002A96 4308                   SHLL2       R3
    00002A98 4300                   SHLL        R3
    00002A9A 353C                   ADD         R3,R5
    00002A9C 907F                   MOV.W       L1020+8,R0 ; H'04A0
    00002A9E 03FE                   MOV.L       @(R0,R15),R3
    00002AA0 5553                   MOV.L       @(12,R5),R5
    00002AA2 3538                   SUB         R3,R5
          game.c   455                                                    break;
    00002AA4 A04B                   BRA         L924
    00002AA6 E405                   MOV         #5,R4
    00002AA8              L533:                            ; case label 
          game.c   456                                            case W_DOWN:
          game.c   457                                                    draw_bmp(WALL, level->wall[i].x-camera.x, level->wall[i].y
                         ++j*8-camera.y);
    00002AA8 9075                   MOV.W       L1020,R0   ; H'04F0
    00002AAA 06FE                   MOV.L       @(R0,R15),R6
    00002AAC 9074                   MOV.W       L1020+2,R0 ; H'04EC
    00002AAE 03FE                   MOV.L       @(R0,R15),R3
    00002AB0 5667                   MOV.L       @(28,R6),R6
    00002AB2 6233                   MOV         R3,R2
    00002AB4 9071                   MOV.W       L1020+4,R0 ; H'04E8
    00002AB6 4300                   SHLL        R3
    00002AB8 332C                   ADD         R2,R3
    00002ABA 4308                   SHLL2       R3
    00002ABC 4300                   SHLL        R3
    00002ABE 363C                   ADD         R3,R6
    00002AC0 03FE                   MOV.L       @(R0,R15),R3
    00002AC2 4308                   SHLL2       R3
    00002AC4 5664                   MOV.L       @(16,R6),R6
    00002AC6 4300                   SHLL        R3
    00002AC8 9068                   MOV.W       L1020+6,R0 ; H'04A4
    00002ACA 363C                   ADD         R3,R6
    00002ACC 03FE                   MOV.L       @(R0,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  112


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002ACE 3638                   SUB         R3,R6
    00002AD0 9061                   MOV.W       L1020,R0   ; H'04F0
    00002AD2 05FE                   MOV.L       @(R0,R15),R5
    00002AD4 9060                   MOV.W       L1020+2,R0 ; H'04EC
    00002AD6 03FE                   MOV.L       @(R0,R15),R3
    00002AD8 5557                   MOV.L       @(28,R5),R5
    00002ADA 6233                   MOV         R3,R2
    00002ADC 4300                   SHLL        R3
    00002ADE 332C                   ADD         R2,R3
    00002AE0 4308                   SHLL2       R3
    00002AE2 4300                   SHLL        R3
    00002AE4 353C                   ADD         R3,R5
    00002AE6 905A                   MOV.W       L1020+8,R0 ; H'04A0
    00002AE8 5553                   MOV.L       @(12,R5),R5
    00002AEA 03FE                   MOV.L       @(R0,R15),R3
    00002AEC 3538                   SUB         R3,R5
    00002AEE D32C                   MOV.L       L1020+10,R3; _draw_bmp
    00002AF0 430B                   JSR         @R3
    00002AF2 E401                   MOV         #1,R4
          game.c   458                                                    draw_bmp(SPIKE_DOWN, level->wall[i].x-camera.x, level->wal
                         +l[i].y+j*8+8-camera.y);
    00002AF4 904F                   MOV.W       L1020,R0   ; H'04F0
    00002AF6 06FE                   MOV.L       @(R0,R15),R6
    00002AF8 904E                   MOV.W       L1020+2,R0 ; H'04EC
    00002AFA 03FE                   MOV.L       @(R0,R15),R3
    00002AFC 5667                   MOV.L       @(28,R6),R6
    00002AFE 6233                   MOV         R3,R2
    00002B00 904B                   MOV.W       L1020+4,R0 ; H'04E8
    00002B02 4300                   SHLL        R3
    00002B04 332C                   ADD         R2,R3
    00002B06 4308                   SHLL2       R3
    00002B08 4300                   SHLL        R3
    00002B0A 363C                   ADD         R3,R6
    00002B0C 03FE                   MOV.L       @(R0,R15),R3
    00002B0E 4308                   SHLL2       R3
    00002B10 5664                   MOV.L       @(16,R6),R6
    00002B12 4300                   SHLL        R3
    00002B14 9042                   MOV.W       L1020+6,R0 ; H'04A4
    00002B16 363C                   ADD         R3,R6
    00002B18 03FE                   MOV.L       @(R0,R15),R3
    00002B1A 3638                   SUB         R3,R6
    00002B1C 903B                   MOV.W       L1020,R0   ; H'04F0
    00002B1E 7608                   ADD         #8,R6
    00002B20 05FE                   MOV.L       @(R0,R15),R5
    00002B22 9039                   MOV.W       L1020+2,R0 ; H'04EC
    00002B24 5557                   MOV.L       @(28,R5),R5
    00002B26 03FE                   MOV.L       @(R0,R15),R3
    00002B28 6233                   MOV         R3,R2
    00002B2A 4300                   SHLL        R3
    00002B2C 332C                   ADD         R2,R3
    00002B2E 4308                   SHLL2       R3
    00002B30 4300                   SHLL        R3
    00002B32 353C                   ADD         R3,R5
    00002B34 9033                   MOV.W       L1020+8,R0 ; H'04A0
    00002B36 E406                   MOV         #6,R4
    00002B38 5553                   MOV.L       @(12,R5),R5
    00002B3A 03FE                   MOV.L       @(R0,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  113


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B3C 3538                   SUB         R3,R5
          game.c   459                                                    break;
    00002B3E              L924:                             
    00002B3E D318                   MOV.L       L1020+10,R3; _draw_bmp
    00002B40 430B                   JSR         @R3
    00002B42 0009                   NOP
    00002B44              L866:                             
    00002B44 9029                   MOV.W       L1020+4,R0 ; H'04E8
    00002B46 03FE                   MOV.L       @(R0,R15),R3
    00002B48 9027                   MOV.W       L1020+4,R0 ; H'04E8
    00002B4A 7301                   ADD         #1,R3
    00002B4C 0F36                   MOV.L       R3,@(R0,R15)
    00002B4E              L864:                             
    00002B4E 9022                   MOV.W       L1020,R0   ; H'04F0
    00002B50 02FE                   MOV.L       @(R0,R15),R2
    00002B52 9021                   MOV.W       L1020+2,R0 ; H'04EC
    00002B54 5227                   MOV.L       @(28,R2),R2
    00002B56 03FE                   MOV.L       @(R0,R15),R3
    00002B58 901F                   MOV.W       L1020+4,R0 ; H'04E8
    00002B5A 6133                   MOV         R3,R1
    00002B5C 00FE                   MOV.L       @(R0,R15),R0
    00002B5E 4300                   SHLL        R3
    00002B60 331C                   ADD         R1,R3
    00002B62 4308                   SHLL2       R3
    00002B64 4300                   SHLL        R3
    00002B66 332C                   ADD         R2,R3
    00002B68 5135                   MOV.L       @(20,R3),R1
    00002B6A 3013                   CMP/GE      R1,R0
    00002B6C 8901                   BT          L1021
    00002B6E AE8E                   BRA         L865
    00002B70 0009                   NOP
    00002B72              L1021:                            
    00002B72 9011                   MOV.W       L1020+2,R0 ; H'04EC
    00002B74 02FE                   MOV.L       @(R0,R15),R2
    00002B76 7201                   ADD         #1,R2
    00002B78 900E                   MOV.W       L1020+2,R0 ; H'04EC
    00002B7A 0F26                   MOV.L       R2,@(R0,R15)
    00002B7C              L862:                             
    00002B7C 900B                   MOV.W       L1020,R0   ; H'04F0
    00002B7E 03FE                   MOV.L       @(R0,R15),R3
    00002B80 900A                   MOV.W       L1020+2,R0 ; H'04EC
    00002B82 5238                   MOV.L       @(32,R3),R2
    00002B84 01FE                   MOV.L       @(R0,R15),R1
    00002B86 3123                   CMP/GE      R2,R1
    00002B88 8901                   BT          L1022
    00002B8A AE7C                   BRA         L863
    00002B8C 0009                   NOP
    00002B8E              L1022:                            
          game.c   460                                    }
          game.c   461                            }
          game.c   462                    }
          game.c   463                    /** Bullets **/
          game.c   464                    for(i=0 ; i<nb_bullets ; i++)
    00002B8E E300                   MOV         #0,R3
    00002B90 9002                   MOV.W       L1020+2,R0 ; H'04EC
    00002B92 A064                   BRA         L867
    00002B94 0F36                   MOV.L       R3,@(R0,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  114


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B96              L1020:                            
    00002B96 04F0                   .DATA.W     H'04F0
    00002B98 04EC                   .DATA.W     H'04EC
    00002B9A 04E8                   .DATA.W     H'04E8
    00002B9C 04A4                   .DATA.W     H'04A4
    00002B9E 04A0                   .DATA.W     H'04A0
    00002BA0 <00000000>             .DATA.L     _draw_bmp
    00002BA4              L868:                             
          game.c   465                    {
          game.c   466                            draw_bmp(bullet[i].direction+BULLET_LEFT, bullet[i].x-camera.x, bullet[i].y-camera
                         +.y);
    00002BA4 909C                   MOV.W       L1023,R0   ; H'04EC
    00002BA6 06FE                   MOV.L       @(R0,R15),R6
    00002BA8 929B                   MOV.W       L1023+2,R2 ; H'0220
    00002BAA 6363                   MOV         R6,R3
    00002BAC 909A                   MOV.W       L1023+4,R0 ; H'04A4
    00002BAE 32FC                   ADD         R15,R2
    00002BB0 4608                   SHLL2       R6
    00002BB2 363C                   ADD         R3,R6
    00002BB4 03FE                   MOV.L       @(R0,R15),R3
    00002BB6 4608                   SHLL2       R6
    00002BB8 9092                   MOV.W       L1023,R0   ; H'04EC
    00002BBA 362C                   ADD         R2,R6
    00002BBC 05FE                   MOV.L       @(R0,R15),R5
    00002BBE 5661                   MOV.L       @(4,R6),R6
    00002BC0 9091                   MOV.W       L1023+6,R0 ; H'04A0
    00002BC2 3638                   SUB         R3,R6
    00002BC4 6353                   MOV         R5,R3
    00002BC6 4508                   SHLL2       R5
    00002BC8 353C                   ADD         R3,R5
    00002BCA 4508                   SHLL2       R5
    00002BCC 03FE                   MOV.L       @(R0,R15),R3
    00002BCE 352C                   ADD         R2,R5
    00002BD0 9086                   MOV.W       L1023,R0   ; H'04EC
    00002BD2 6552                   MOV.L       @R5,R5
    00002BD4 04FE                   MOV.L       @(R0,R15),R4
    00002BD6 3538                   SUB         R3,R5
    00002BD8 6343                   MOV         R4,R3
    00002BDA 4408                   SHLL2       R4
    00002BDC 343C                   ADD         R3,R4
    00002BDE 4408                   SHLL2       R4
    00002BE0 342C                   ADD         R2,R4
    00002BE2 5444                   MOV.L       @(16,R4),R4
    00002BE4 D342                   MOV.L       L1023+16,R3; _draw_bmp
    00002BE6 430B                   JSR         @R3
    00002BE8 7410                   ADD         #16,R4
          game.c   467                            draw_bmp(bullet[i].direction+BULLET_LEFT, bullet[i].x+bullet[i].dx-camera.x, bulle
                         +t[i].y+bullet[i].dy-camera.y);
    00002BEA 9079                   MOV.W       L1023,R0   ; H'04EC
    00002BEC 9279                   MOV.W       L1023+2,R2 ; H'0220
    00002BEE 06FE                   MOV.L       @(R0,R15),R6
    00002BF0 9076                   MOV.W       L1023,R0   ; H'04EC
    00002BF2 6363                   MOV         R6,R3
    00002BF4 4608                   SHLL2       R6
    00002BF6 363C                   ADD         R3,R6
    00002BF8 03FE                   MOV.L       @(R0,R15),R3
    00002BFA 4608                   SHLL2       R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  115


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002BFC 9072                   MOV.W       L1023+4,R0 ; H'04A4
    00002BFE 32FC                   ADD         R15,R2
    00002C00 362C                   ADD         R2,R6
    00002C02 6133                   MOV         R3,R1
    00002C04 5661                   MOV.L       @(4,R6),R6
    00002C06 4308                   SHLL2       R3
    00002C08 331C                   ADD         R1,R3
    00002C0A 4308                   SHLL2       R3
    00002C0C 01FE                   MOV.L       @(R0,R15),R1
    00002C0E 332C                   ADD         R2,R3
    00002C10 9066                   MOV.W       L1023,R0   ; H'04EC
    00002C12 5333                   MOV.L       @(12,R3),R3
    00002C14 05FE                   MOV.L       @(R0,R15),R5
    00002C16 363C                   ADD         R3,R6
    00002C18 9062                   MOV.W       L1023,R0   ; H'04EC
    00002C1A 3618                   SUB         R1,R6
    00002C1C 6353                   MOV         R5,R3
    00002C1E 4508                   SHLL2       R5
    00002C20 353C                   ADD         R3,R5
    00002C22 4508                   SHLL2       R5
    00002C24 03FE                   MOV.L       @(R0,R15),R3
    00002C26 352C                   ADD         R2,R5
    00002C28 6133                   MOV         R3,R1
    00002C2A 4308                   SHLL2       R3
    00002C2C 6552                   MOV.L       @R5,R5
    00002C2E 331C                   ADD         R1,R3
    00002C30 9059                   MOV.W       L1023+6,R0 ; H'04A0
    00002C32 4308                   SHLL2       R3
    00002C34 01FE                   MOV.L       @(R0,R15),R1
    00002C36 332C                   ADD         R2,R3
    00002C38 9052                   MOV.W       L1023,R0   ; H'04EC
    00002C3A 5332                   MOV.L       @(8,R3),R3
    00002C3C 04FE                   MOV.L       @(R0,R15),R4
    00002C3E 353C                   ADD         R3,R5
    00002C40 3518                   SUB         R1,R5
    00002C42 6343                   MOV         R4,R3
    00002C44 4408                   SHLL2       R4
    00002C46 343C                   ADD         R3,R4
    00002C48 D329                   MOV.L       L1023+16,R3; _draw_bmp
    00002C4A 4408                   SHLL2       R4
    00002C4C 342C                   ADD         R2,R4
    00002C4E 5444                   MOV.L       @(16,R4),R4
    00002C50 430B                   JSR         @R3
    00002C52 7410                   ADD         #16,R4
    00002C54 9044                   MOV.W       L1023,R0   ; H'04EC
    00002C56 02FE                   MOV.L       @(R0,R15),R2
    00002C58 9042                   MOV.W       L1023,R0   ; H'04EC
    00002C5A 7201                   ADD         #1,R2
    00002C5C 0F26                   MOV.L       R2,@(R0,R15)
    00002C5E              L867:                             
    00002C5E 53F7                   MOV.L       @(28,R15),R3
    00002C60 903E                   MOV.W       L1023,R0   ; H'04EC
    00002C62 01FE                   MOV.L       @(R0,R15),R1
    00002C64 3133                   CMP/GE      R3,R1
    00002C66 8B9D                   BF          L868
          game.c   468                    }
          game.c   469                    /** Stones **/




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  116


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   470                    for(i=0 ; i<nb_stones ; i++)
    00002C68 A01A                   BRA         L925
    00002C6A E300                   MOV         #0,R3
    00002C6C              L870:                             
          game.c   471                            draw_bmp(STONE, stone[i].x-camera.x, stone[i].y-camera.y);
    00002C6C 9038                   MOV.W       L1023,R0   ; H'04EC
    00002C6E 63F3                   MOV         R15,R3
    00002C70 06FE                   MOV.L       @(R0,R15),R6
    00002C72 7320                   ADD         #32,R3
    00002C74 9036                   MOV.W       L1023+4,R0 ; H'04A4
    00002C76 4608                   SHLL2       R6
    00002C78 02FE                   MOV.L       @(R0,R15),R2
    00002C7A 4608                   SHLL2       R6
    00002C7C 9030                   MOV.W       L1023,R0   ; H'04EC
    00002C7E 363C                   ADD         R3,R6
    00002C80 05FE                   MOV.L       @(R0,R15),R5
    00002C82 5661                   MOV.L       @(4,R6),R6
    00002C84 902F                   MOV.W       L1023+6,R0 ; H'04A0
    00002C86 3628                   SUB         R2,R6
    00002C88 02FE                   MOV.L       @(R0,R15),R2
    00002C8A 4508                   SHLL2       R5
    00002C8C 4508                   SHLL2       R5
    00002C8E 353C                   ADD         R3,R5
    00002C90 6552                   MOV.L       @R5,R5
    00002C92 3528                   SUB         R2,R5
    00002C94 D216                   MOV.L       L1023+16,R2; _draw_bmp
    00002C96 420B                   JSR         @R2
    00002C98 E414                   MOV         #20,R4
    00002C9A 9021                   MOV.W       L1023,R0   ; H'04EC
    00002C9C 03FE                   MOV.L       @(R0,R15),R3
    00002C9E 7301                   ADD         #1,R3
    00002CA0              L925:                             
    00002CA0 901E                   MOV.W       L1023,R0   ; H'04EC
    00002CA2 6133                   MOV         R3,R1
    00002CA4 0F36                   MOV.L       R3,@(R0,R15)
    00002CA6 52F6                   MOV.L       @(24,R15),R2
    00002CA8 3123                   CMP/GE      R2,R1
    00002CAA 8BDF                   BF          L870
          game.c   472                    /** Orton **/
          game.c   473                    if(dead) draw_bmp(dead/4+EXPLOSION1, orton.x-camera.x, orton.y-camera.y);
    00002CAC 901C                   MOV.W       L1023+8,R0 ; H'04E2
    00002CAE 03FC                   MOV.B       @(R0,R15),R3
    00002CB0 2338                   TST         R3,R3
    00002CB2 891F                   BT          L871
    00002CB4 9016                   MOV.W       L1023+4,R0 ; H'04A4
    00002CB6 03FE                   MOV.L       @(R0,R15),R3
    00002CB8 9017                   MOV.W       L1023+10,R0; H'04C8
    00002CBA 06FE                   MOV.L       @(R0,R15),R6
    00002CBC 9013                   MOV.W       L1023+6,R0 ; H'04A0
    00002CBE 3638                   SUB         R3,R6
    00002CC0 03FE                   MOV.L       @(R0,R15),R3
    00002CC2 9013                   MOV.W       L1023+12,R0; H'04C4
    00002CC4 05FE                   MOV.L       @(R0,R15),R5
    00002CC6 3538                   SUB         R3,R5
    00002CC8 900E                   MOV.W       L1023+8,R0 ; H'04E2
    00002CCA 04FC                   MOV.B       @(R0,R15),R4
    00002CCC 4411                   CMP/PZ      R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  117


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002CCE 8900                   BT          L872
    00002CD0 7403                   ADD         #3,R4
    00002CD2              L872:                             
    00002CD2 4421                   SHAR        R4
    00002CD4 D206                   MOV.L       L1023+16,R2; _draw_bmp
    00002CD6 4421                   SHAR        R4
    00002CD8 420B                   JSR         @R2
    00002CDA 7421                   ADD         #33,R4
    00002CDC A020                   BRA         L873
    00002CDE 0009                   NOP
    00002CE0              L1023:                            
    00002CE0 04EC                   .DATA.W     H'04EC
    00002CE2 0220                   .DATA.W     H'0220
    00002CE4 04A4                   .DATA.W     H'04A4
    00002CE6 04A0                   .DATA.W     H'04A0
    00002CE8 04E2                   .DATA.W     H'04E2
    00002CEA 04C8                   .DATA.W     H'04C8
    00002CEC 04C4                   .DATA.W     H'04C4
    00002CEE 0000                   .DATA.W     0
    00002CF0 <00000000>             .DATA.L     _draw_bmp
    00002CF4              L871:                             
          game.c   474                    else draw_bmp(orton.position+6*orton.direction+ORTON_STOP_LEFT, orton.x-camera.x, orton.y-
                         +camera.y);
    00002CF4 9087                   MOV.W       L1024,R0   ; H'04A4
    00002CF6 03FE                   MOV.L       @(R0,R15),R3
    00002CF8 9086                   MOV.W       L1024+2,R0 ; H'04C8
    00002CFA 06FE                   MOV.L       @(R0,R15),R6
    00002CFC 9085                   MOV.W       L1024+4,R0 ; H'04A0
    00002CFE 3638                   SUB         R3,R6
    00002D00 03FE                   MOV.L       @(R0,R15),R3
    00002D02 9083                   MOV.W       L1024+6,R0 ; H'04C4
    00002D04 05FE                   MOV.L       @(R0,R15),R5
    00002D06 3538                   SUB         R3,R5
    00002D08 9081                   MOV.W       L1024+8,R0 ; H'04D4
    00002D0A 04FE                   MOV.L       @(R0,R15),R4
    00002D0C 9080                   MOV.W       L1024+10,R0; H'04D8
    00002D0E 6343                   MOV         R4,R3
    00002D10 02FE                   MOV.L       @(R0,R15),R2
    00002D12 4400                   SHLL        R4
    00002D14 4308                   SHLL2       R3
    00002D16 343C                   ADD         R3,R4
    00002D18 D340                   MOV.L       L1024+22,R3; _draw_bmp
    00002D1A 342C                   ADD         R2,R4
    00002D1C 430B                   JSR         @R3
    00002D1E 7415                   ADD         #21,R4
    00002D20              L873:                             
          game.c   475                    putdispvram_vbuf();
    00002D20 D23F                   MOV.L       L1024+26,R2; _putdispvram_vbuf
    00002D22 420B                   JSR         @R2
    00002D24 0009                   NOP
          game.c   476                    /** Messages **/
          game.c   477                    draw_message(level, &orton, nb_death);
    00002D26 9074                   MOV.W       L1024+12,R0; H'04E4
    00002D28 9570                   MOV.W       L1024+6,R5 ; H'04C4
    00002D2A 06FE                   MOV.L       @(R0,R15),R6
    00002D2C 9072                   MOV.W       L1024+14,R0; H'04F0
    00002D2E 35FC                   ADD         R15,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  118


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002D30 B0FC                   BSR         __$draw_message
    00002D32 04FE                   MOV.L       @(R0,R15),R4
          game.c   478                    Bdisp_PutDisp_DD();
    00002D34 D23B                   MOV.L       L1024+30,R2; _Bdisp_PutDisp_DD
    00002D36 420B                   JSR         @R2
    00002D38 0009                   NOP
          game.c   479                    if(begin)
    00002D3A 906C                   MOV.W       L1024+16,R0; H'04E1
    00002D3C 03FC                   MOV.B       @(R0,R15),R3
    00002D3E 2338                   TST         R3,R3
    00002D40 8D03                   BT/S        L874
          game.c   480                    {
          game.c   481                            begin = 0;
          game.c   482                    }
          game.c   483    /** Delay **/
          game.c   484                    Sleep(30);
    00002D42 E41E                   MOV         #30,R4
    00002D44 9067                   MOV.W       L1024+16,R0; H'04E1
    00002D46 E300                   MOV         #0,R3
    00002D48 0F34                   MOV.B       R3,@(R0,R15)
    00002D4A              L874:                             
    00002D4A D337                   MOV.L       L1024+34,R3; _Sleep
    00002D4C 430B                   JSR         @R3
    00002D4E 0009                   NOP
    00002D50              L572:                             
    00002D50 9062                   MOV.W       L1024+18,R0; H'04E3
    00002D52 02FC                   MOV.B       @(R0,R15),R2
    00002D54 2228                   TST         R2,R2
    00002D56 8902                   BT          L1025
    00002D58 D234                   MOV.L       L1024+38,R2; L573
    00002D5A 422B                   JMP         @R2
    00002D5C 0009                   NOP
    00002D5E              L1025:                            
    00002D5E              L926:                             
          game.c   485            }
          game.c   486            return 0;
    00002D5E E000                   MOV         #0,R0
          game.c   487    }
    00002D60              L565:                             
    00002D60 915B                   MOV.W       L1024+20,R1; H'04F4
    00002D62 3F1C                   ADD         R1,R15
    00002D64 4F16                   LDS.L       @R15+,MACL
    00002D66 4F26                   LDS.L       @R15+,PR
    00002D68 68F6                   MOV.L       @R15+,R8
    00002D6A 000B                   RTS
    00002D6C 69F6                   MOV.L       @R15+,R9
          game.c   488    
          game.c   489    void dialog(Level* level)
    00002D6E              _dialog:                         ; function: dialog
                                                           ; frame size=52
    00002D6E 2FE6                   MOV.L       R14,@-R15
    00002D70 2FD6                   MOV.L       R13,@-R15
          game.c   490    {
          game.c   491            int i, j, n, key, x, width, height, begin_line, line_lenght;
          game.c   492            for(n=0 ; n<level->nb_messages ; n++)
    00002D72 EE00                   MOV         #0,R14
    00002D74 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  119


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002D76 6D43                   MOV         R4,R13
    00002D78 2FB6                   MOV.L       R11,@-R15
    00002D7A 2FA6                   MOV.L       R10,@-R15
    00002D7C 2F96                   MOV.L       R9,@-R15
    00002D7E 2F86                   MOV.L       R8,@-R15
    00002D80 4F22                   STS.L       PR,@-R15
    00002D82 4F12                   STS.L       MACL,@-R15
    00002D84 D825                   MOV.L       L1024+22,R8; _draw_bmp
    00002D86 7FF0                   ADD         #-16,R15
    00002D88 A0BF                   BRA         L875
    00002D8A 1FE3                   MOV.L       R14,@(12,R15)
    00002D8C              L876:                             
          game.c   493            {
          game.c   494                    Bdisp_AllClr_VRAM();
    00002D8C D228                   MOV.L       L1024+42,R2; _Bdisp_AllClr_VRAM
    00002D8E 420B                   JSR         @R2
    00002D90 0009                   NOP
          game.c   495                    for(i=1 ; i<9 ; i++)
    00002D92 EB01                   MOV         #1,R11
    00002D94              L877:                             
          game.c   496                    {
          game.c   497                            for(j=0 ; j<16 ; j++)
    00002D94 6CE3                   MOV         R14,R12
    00002D96 69B3                   MOV         R11,R9
    00002D98 79FF                   ADD         #-1,R9
    00002D9A 6AB3                   MOV         R11,R10
    00002D9C 4A08                   SHLL2       R10
    00002D9E 4A00                   SHLL        R10
    00002DA0 7AF8                   ADD         #-8,R10
    00002DA2              L878:                             
    00002DA2 65C3                   MOV         R12,R5
          game.c   498                            {
          game.c   499                                    Bmp b = level->map[i*level->width+j];
    00002DA4 57D2                   MOV.L       @(8,R13),R7
    00002DA6 4508                   SHLL2       R5
    00002DA8 56D3                   MOV.L       @(12,R13),R6
    00002DAA 4500                   SHLL        R5
    00002DAC 0B67                   MUL.L       R6,R11
    00002DAE 001A                   STS         MACL,R0
    00002DB0 30CC                   ADD         R12,R0
    00002DB2 047C                   MOV.B       @(R0,R7),R4
    00002DB4 6043                   MOV         R4,R0
    00002DB6 8801                   CMP/EQ      #1,R0
    00002DB8 8B08                   BF          L879
    00002DBA 0967                   MUL.L       R6,R9
    00002DBC 001A                   STS         MACL,R0
    00002DBE 30CC                   ADD         R12,R0
    00002DC0 007C                   MOV.B       @(R0,R7),R0
    00002DC2 8801                   CMP/EQ      #1,R0
    00002DC4 8902                   BT          L879
          game.c   500                                    if(b==WALL && level->map[(i-1)*level->width+j]!=WALL)
          game.c   501                                            draw_bmp(WALL_TOP, 8*j, 8*i-8);
    00002DC6 66A3                   MOV         R10,R6
    00002DC8 A001                   BRA         L934
    00002DCA E402                   MOV         #2,R4
    00002DCC              L879:                             
          game.c   502                                    else




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  120


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   503                                            draw_bmp(b, 8*j, 8*i-8);
    00002DCC 66A3                   MOV         R10,R6
    00002DCE              L934:                             
    00002DCE 480B                   JSR         @R8
    00002DD0 0009                   NOP
    00002DD2 7C01                   ADD         #1,R12
    00002DD4 E310                   MOV         #16,R3
    00002DD6 3C33                   CMP/GE      R3,R12
    00002DD8 8BE3                   BF          L878
    00002DDA 7B01                   ADD         #1,R11
    00002DDC E309                   MOV         #9,R3
    00002DDE 3B33                   CMP/GE      R3,R11
    00002DE0 8BD8                   BF          L877
          game.c   504                            }
          game.c   505                    }
          game.c   506                    width = 0;
    00002DE2 6BE3                   MOV         R14,R11
          game.c   507                    begin_line = 0;
          game.c   508                    height = level->message[n].nb_lines * 6;
    00002DE4 5CF3                   MOV.L       @(12,R15),R12
    00002DE6 69E3                   MOV         R14,R9
    00002DE8 52D9                   MOV.L       @(36,R13),R2
    00002DEA 63C3                   MOV         R12,R3
    00002DEC 4C08                   SHLL2       R12
    00002DEE 4C00                   SHLL        R12
    00002DF0 3C3C                   ADD         R3,R12
    00002DF2 4C08                   SHLL2       R12
    00002DF4 32CC                   ADD         R12,R2
    00002DF6 5321                   MOV.L       @(4,R2),R3
    00002DF8 6233                   MOV         R3,R2
    00002DFA 4300                   SHLL        R3
    00002DFC 4208                   SHLL2       R2
    00002DFE 332C                   ADD         R2,R3
    00002E00 1F31                   MOV.L       R3,@(4,R15)
          game.c   509                    for(i=0 ; i<level->message[n].nb_lines ; i++)
    00002E02 A026                   BRA         L881
    00002E04 6A93                   MOV         R9,R10
    00002E06              L1024:                            
    00002E06 04A4                   .DATA.W     H'04A4
    00002E08 04C8                   .DATA.W     H'04C8
    00002E0A 04A0                   .DATA.W     H'04A0
    00002E0C 04C4                   .DATA.W     H'04C4
    00002E0E 04D4                   .DATA.W     H'04D4
    00002E10 04D8                   .DATA.W     H'04D8
    00002E12 04E4                   .DATA.W     H'04E4
    00002E14 04F0                   .DATA.W     H'04F0
    00002E16 04E1                   .DATA.W     H'04E1
    00002E18 04E3                   .DATA.W     H'04E3
    00002E1A 04F4                   .DATA.W     H'04F4
    00002E1C <00000000>             .DATA.L     _draw_bmp
    00002E20 <00000000>             .DATA.L     _putdispvram_vbuf
    00002E24 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00002E28 <00000000>             .DATA.L     _Sleep
    00002E2C <00000000>             .DATA.L     L573
    00002E30 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00002E34              L882:                             
          game.c   510                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  121


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   511                            line_lenght = strlen(level->message[n].str + begin_line);
    00002E34 54D9                   MOV.L       @(36,R13),R4
    00002E36 34CC                   ADD         R12,R4
    00002E38 6442                   MOV.L       @R4,R4
    00002E3A D36E                   MOV.L       L1026+2,R3 ; _strlen
    00002E3C 430B                   JSR         @R3
    00002E3E 349C                   ADD         R9,R4
    00002E40 6403                   MOV         R0,R4
    00002E42 4408                   SHLL2       R4
    00002E44 34B7                   CMP/GT      R11,R4
    00002E46 8F01                   BF/S        L883
    00002E48 6503                   MOV         R0,R5
          game.c   512                            if(line_lenght*4 > width) width = line_lenght*4;
    00002E4A 6B43                   MOV         R4,R11
    00002E4C              L883:                             
          game.c   513                            begin_line += line_lenght+1;
    00002E4C 7501                   ADD         #1,R5
    00002E4E 395C                   ADD         R5,R9
    00002E50 7A01                   ADD         #1,R10
    00002E52              L881:                             
    00002E52 53D9                   MOV.L       @(36,R13),R3
    00002E54 33CC                   ADD         R12,R3
    00002E56 5231                   MOV.L       @(4,R3),R2
    00002E58 3A23                   CMP/GE      R2,R10
    00002E5A 8BEB                   BF          L882
    00002E5C 50D9                   MOV.L       @(36,R13),R0
    00002E5E 6AB3                   MOV         R11,R10
    00002E60 E300                   MOV         #0,R3
    00002E62 33A7                   CMP/GT      R10,R3
    00002E64 3A3E                   ADDC        R3,R10
    00002E66 4A21                   SHAR        R10
    00002E68 30CC                   ADD         R12,R0
    00002E6A 5002                   MOV.L       @(8,R0),R0
    00002E6C 8801                   CMP/EQ      #1,R0
    00002E6E 8B02                   BF          L884
          game.c   514                    }
          game.c   515                    if(level->message[n].place == BOTTOM) x = 112-width/2;
    00002E70 EB70                   MOV         #112,R11
    00002E72 A002                   BRA         L885
    00002E74 3BA8                   SUB         R10,R11
    00002E76              L884:                             
          game.c   516                    else x = 16+width/2;
    00002E76 6BA3                   MOV         R10,R11
    00002E78 7B10                   ADD         #16,R11
    00002E7A              L885:                             
          game.c   517                    draw_rectangle(x-width/2, 24-height/2, x+width/2, 24+height/2);
    00002E7A E300                   MOV         #0,R3
    00002E7C D25E                   MOV.L       L1026+6,R2 ; _draw_rectangle
    00002E7E 66A3                   MOV         R10,R6
    00002E80 57F1                   MOV.L       @(4,R15),R7
    00002E82 E518                   MOV         #24,R5
    00002E84 3377                   CMP/GT      R7,R3
    00002E86 373E                   ADDC        R3,R7
    00002E88 4721                   SHAR        R7
    00002E8A 36BC                   ADD         R11,R6
    00002E8C 1F72                   MOV.L       R7,@(8,R15)
    00002E8E 64B3                   MOV         R11,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  122


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002E90 53F2                   MOV.L       @(8,R15),R3
    00002E92 7718                   ADD         #24,R7
    00002E94 3538                   SUB         R3,R5
    00002E96 420B                   JSR         @R2
    00002E98 34A8                   SUB         R10,R4
          game.c   518    
          game.c   519                    begin_line = 0;
    00002E9A 69E3                   MOV         R14,R9
          game.c   520                    for(i=0 ; i<level->message[n].nb_lines ; i++)
    00002E9C A01F                   BRA         L886
    00002E9E 6AE3                   MOV         R14,R10
    00002EA0              L887:                             
          game.c   521                    {
          game.c   522                            line_lenght = strlen(level->message[n].str + begin_line);
    00002EA0 54D9                   MOV.L       @(36,R13),R4
    00002EA2 34CC                   ADD         R12,R4
    00002EA4 6442                   MOV.L       @R4,R4
    00002EA6 D353                   MOV.L       L1026+2,R3 ; _strlen
    00002EA8 430B                   JSR         @R3
    00002EAA 349C                   ADD         R9,R4
    00002EAC 1F01                   MOV.L       R0,@(4,R15)
          game.c   523                            PrintMini(x+1-line_lenght*2, 25-height/2+i*6, level->message[n].str + begin_line, 
                         +MINI_REV);
    00002EAE E712                   MOV         #18,R7
    00002EB0 56D9                   MOV.L       @(36,R13),R6
    00002EB2 65A3                   MOV         R10,R5
    00002EB4 52F2                   MOV.L       @(8,R15),R2
    00002EB6 64B3                   MOV         R11,R4
    00002EB8 36CC                   ADD         R12,R6
    00002EBA 63A3                   MOV         R10,R3
    00002EBC 6662                   MOV.L       @R6,R6
    00002EBE 4500                   SHLL        R5
    00002EC0 369C                   ADD         R9,R6
    00002EC2 4308                   SHLL2       R3
    00002EC4 353C                   ADD         R3,R5
    00002EC6 3528                   SUB         R2,R5
    00002EC8 53F1                   MOV.L       @(4,R15),R3
    00002ECA 7519                   ADD         #25,R5
    00002ECC 4300                   SHLL        R3
    00002ECE 3438                   SUB         R3,R4
    00002ED0 D34A                   MOV.L       L1026+10,R3; _PrintMini
    00002ED2 430B                   JSR         @R3
    00002ED4 7401                   ADD         #1,R4
    00002ED6 7A01                   ADD         #1,R10
          game.c   524                            begin_line += line_lenght+1;
    00002ED8 52F1                   MOV.L       @(4,R15),R2
    00002EDA 7201                   ADD         #1,R2
    00002EDC 392C                   ADD         R2,R9
    00002EDE              L886:                             
    00002EDE 53D9                   MOV.L       @(36,R13),R3
    00002EE0 33CC                   ADD         R12,R3
    00002EE2 5231                   MOV.L       @(4,R3),R2
    00002EE4 3A23                   CMP/GE      R2,R10
    00002EE6 8BDB                   BF          L887
          game.c   525                    }
          game.c   526                    
          game.c   527                    key = 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  123


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   528                    Bdisp_PutDisp_DD();
    00002EE8 D345                   MOV.L       L1026+14,R3; _Bdisp_PutDisp_DD
    00002EEA 430B                   JSR         @R3
    00002EEC 2FE2                   MOV.L       R14,@R15
          game.c   529                    IsKeyDown(KEY_CTRL_EXE);
    00002EEE D245                   MOV.L       L1026+18,R2; _KeyDown
    00002EF0 420B                   JSR         @R2
    00002EF2 E41F                   MOV         #31,R4
          game.c   530                    while(key != KEY_CTRL_EXE) GetKey(&key);
    00002EF4 A003                   BRA         L888
    00002EF6 0009                   NOP
    00002EF8              L889:                             
    00002EF8 D243                   MOV.L       L1026+22,R2; _GetKeyMod
    00002EFA 420B                   JSR         @R2
    00002EFC 64F3                   MOV         R15,R4
    00002EFE              L888:                             
    00002EFE 60F2                   MOV.L       @R15,R0
    00002F00 881F                   CMP/EQ      #31,R0
    00002F02 8BF9                   BF          L889
    00002F04 52F3                   MOV.L       @(12,R15),R2
    00002F06 7201                   ADD         #1,R2
    00002F08 1F23                   MOV.L       R2,@(12,R15)
    00002F0A              L875:                             
    00002F0A 53DA                   MOV.L       @(40,R13),R3
    00002F0C 51F3                   MOV.L       @(12,R15),R1
    00002F0E 3133                   CMP/GE      R3,R1
    00002F10 8901                   BT          L1027
    00002F12 AF3B                   BRA         L876
    00002F14 0009                   NOP
    00002F16              L1027:                            
          game.c   531            }
          game.c   532    }
    00002F16 7F10                   ADD         #16,R15
    00002F18 4F16                   LDS.L       @R15+,MACL
    00002F1A 4F26                   LDS.L       @R15+,PR
    00002F1C 68F6                   MOV.L       @R15+,R8
    00002F1E 69F6                   MOV.L       @R15+,R9
    00002F20 6AF6                   MOV.L       @R15+,R10
    00002F22 6BF6                   MOV.L       @R15+,R11
    00002F24 6CF6                   MOV.L       @R15+,R12
    00002F26 6DF6                   MOV.L       @R15+,R13
    00002F28 000B                   RTS
    00002F2A 6EF6                   MOV.L       @R15+,R14
          game.c   533    
          game.c   534    static void draw_message(Level* level, Character* orton, int nb_death)
    00002F2C              __$draw_message:                 ; function: draw_message
                                                           ; frame size=52
    00002F2C 2FE6                   MOV.L       R14,@-R15
    00002F2E 6E43                   MOV         R4,R14
    00002F30 2FD6                   MOV.L       R13,@-R15
    00002F32 2FC6                   MOV.L       R12,@-R15
    00002F34 2FB6                   MOV.L       R11,@-R15
    00002F36 EC00                   MOV         #0,R12
          game.c   535    {
          game.c   536            int i, sel=-1;
          game.c   537            static int current_message, time=0, id_level;
          game.c   538            if(level->id != id_level)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  124


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002F38 D434                   MOV.L       L1026+26,R4; __$id_level$489
    00002F3A 2FA6                   MOV.L       R10,@-R15
    00002F3C 2F96                   MOV.L       R9,@-R15
    00002F3E 2F86                   MOV.L       R8,@-R15
    00002F40 4F22                   STS.L       PR,@-R15
    00002F42 7FEC                   ADD         #-20,R15
    00002F44 6342                   MOV.L       @R4,R3
    00002F46 62E2                   MOV.L       @R14,R2
    00002F48 3230                   CMP/EQ      R3,R2
    00002F4A 8D04                   BT/S        L890
    00002F4C EBFF                   MOV         #-1,R11
          game.c   539            {
          game.c   540                    time = 0;
    00002F4E D030                   MOV.L       L1026+30,R0; __$time$488
    00002F50 20C2                   MOV.L       R12,@R0
          game.c   541                    id_level = level->id;
    00002F52 63E2                   MOV.L       @R14,R3
    00002F54 2432                   MOV.L       R3,@R4
    00002F56              L890:                             
          game.c   542            }
          game.c   543            for(i=0 ; i<level->nb_messages ; i++)
    00002F56 A072                   BRA         L891
    00002F58 67C3                   MOV         R12,R7
    00002F5A              L892:                             
    00002F5A 6473                   MOV         R7,R4
    00002F5C 52E9                   MOV.L       @(36,R14),R2
    00002F5E E020                   MOV         #32,R0
    00002F60 6373                   MOV         R7,R3
    00002F62 4408                   SHLL2       R4
    00002F64 4400                   SHLL        R4
    00002F66 343C                   ADD         R3,R4
    00002F68 4408                   SHLL2       R4
    00002F6A 324C                   ADD         R4,R2
    00002F6C 032C                   MOV.B       @(R0,R2),R3
    00002F6E 2338                   TST         R3,R3
    00002F70 8B64                   BF          L893
          game.c   544            {
          game.c   545                    if(level->message[i].seen == 0)
          game.c   546                    {
          game.c   547                            switch(level->message[i].trigger)
    00002F72 50E9                   MOV.L       @(36,R14),R0
    00002F74 304C                   ADD         R4,R0
    00002F76 5003                   MOV.L       @(12,R0),R0
    00002F78 8800                   CMP/EQ      #0,R0
    00002F7A 8909                   BT          L537
    00002F7C 8801                   CMP/EQ      #1,R0
    00002F7E 8909                   BT          L538
    00002F80 8802                   CMP/EQ      #2,R0
    00002F82 890E                   BT          L539
    00002F84 8803                   CMP/EQ      #3,R0
    00002F86 8920                   BT          L540
    00002F88 8804                   CMP/EQ      #4,R0
    00002F8A 8943                   BT          L541
    00002F8C A056                   BRA         L893
    00002F8E 0009                   NOP
    00002F90              L537:                            ; case label 
          game.c   548                            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  125


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   549                                    case BEGIN: sel = i; break;
    00002F90 A054                   BRA         L893
    00002F92 6B73                   MOV         R7,R11
    00002F94              L538:                            ; case label 
          game.c   550                                    case DEATH:
          game.c   551                                            if(nb_death >= level->message[i].trigger_param[0])
    00002F94 52E9                   MOV.L       @(36,R14),R2
    00002F96 342C                   ADD         R2,R4
    00002F98 5344                   MOV.L       @(16,R4),R3
    00002F9A 3633                   CMP/GE      R3,R6
    00002F9C 894D                   BT          L507
          game.c   552                                                    sel = i;
          game.c   553                                            break;
    00002F9E A04D                   BRA         L893
    00002FA0 0009                   NOP
    00002FA2              L539:                            ; case label 
          game.c   554                                    case X:
          game.c   555                                            if((level->message[i].trigger_param[0]==BEFORE && orton->x<=level-
                         +>message[i].trigger_param[1]) || (level->message[i].trigger_param[0]==AFTER && orton->x>=level->message[i]
                         +.trigger_param[1]))
    00002FA2 5DE9                   MOV.L       @(36,R14),R13
    00002FA4 3D4C                   ADD         R4,R13
    00002FA6 1FD4                   MOV.L       R13,@(16,R15)
    00002FA8 7D10                   ADD         #16,R13
    00002FAA 6AD2                   MOV.L       @R13,R10
    00002FAC 2AA8                   TST         R10,R10
    00002FAE 8B03                   BF          L898
    00002FB0 52D1                   MOV.L       @(4,R13),R2
    00002FB2 6352                   MOV.L       @R5,R3
    00002FB4 3327                   CMP/GT      R2,R3
    00002FB6 8B40                   BF          L507
    00002FB8              L898:                             
    00002FB8 60A3                   MOV         R10,R0
    00002FBA 8801                   CMP/EQ      #1,R0
    00002FBC 8B3E                   BF          L893
    00002FBE 52D1                   MOV.L       @(4,R13),R2
    00002FC0 6352                   MOV.L       @R5,R3
    00002FC2 3323                   CMP/GE      R2,R3
    00002FC4 8B3A                   BF          L893
    00002FC6 A038                   BRA         L507
    00002FC8 0009                   NOP
    00002FCA              L540:                            ; case label 
          game.c   556                                                    sel = i;
          game.c   557                                            break;
          game.c   558                                    case Y:
          game.c   559                                            if((level->message[i].trigger_param[0] == BEFORE && orton->y <= le
                         +vel->message[i].trigger_param[1]) ||
          game.c   560                                               (level->message[i].trigger_param[0] == AFTER && orton->y >= lev
                         +el->message[i].trigger_param[1]))
    00002FCA 5DE9                   MOV.L       @(36,R14),R13
    00002FCC 3D4C                   ADD         R4,R13
    00002FCE 1FD3                   MOV.L       R13,@(12,R15)
    00002FD0 7D10                   ADD         #16,R13
    00002FD2 6AD2                   MOV.L       @R13,R10
    00002FD4 2AA8                   TST         R10,R10
    00002FD6 8B03                   BF          L901
    00002FD8 52D1                   MOV.L       @(4,R13),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  126


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002FDA 5351                   MOV.L       @(4,R5),R3
    00002FDC 3327                   CMP/GT      R2,R3
    00002FDE 8B2C                   BF          L507
    00002FE0              L901:                             
    00002FE0 60A3                   MOV         R10,R0
    00002FE2 8801                   CMP/EQ      #1,R0
    00002FE4 8B2A                   BF          L893
    00002FE6 52D1                   MOV.L       @(4,R13),R2
    00002FE8 5351                   MOV.L       @(4,R5),R3
    00002FEA 3323                   CMP/GE      R2,R3
    00002FEC 8B26                   BF          L893
    00002FEE A024                   BRA         L507
    00002FF0 0009                   NOP
    00002FF2              L1026:                            
    00002FF2 0000                   .DATA.W     0
    00002FF4 <00000000>             .DATA.L     _strlen
    00002FF8 <00000000>             .DATA.L     _draw_rectangle
    00002FFC <00000000>             .DATA.L     _PrintMini
    00003000 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00003004 <00000000>             .DATA.L     _KeyDown
    00003008 <00000000>             .DATA.L     _GetKeyMod
    0000300C <00000000>             .DATA.L     __$id_level$489
    00003010 <00000000>             .DATA.L     __$time$488
    00003014              L541:                            ; case label 
          game.c   561                                                    sel = i;
          game.c   562                                            break;
          game.c   563                                    case XY:
          game.c   564                                            if(orton->x >= level->message[i].trigger_param[0] &&
          game.c   565                                               orton->x <= level->message[i].trigger_param[1] &&
          game.c   566                                               orton->y >= level->message[i].trigger_param[2] &&
          game.c   567                                               orton->y <= level->message[i].trigger_param[3])
    00003014 6A52                   MOV.L       @R5,R10
    00003016 5DE9                   MOV.L       @(36,R14),R13
    00003018 3D4C                   ADD         R4,R13
    0000301A 1FD2                   MOV.L       R13,@(8,R15)
    0000301C 7D10                   ADD         #16,R13
    0000301E 63D2                   MOV.L       @R13,R3
    00003020 3A33                   CMP/GE      R3,R10
    00003022 8B0B                   BF          L893
    00003024 51D1                   MOV.L       @(4,R13),R1
    00003026 3A17                   CMP/GT      R1,R10
    00003028 8908                   BT          L893
    0000302A 52D2                   MOV.L       @(8,R13),R2
    0000302C 5351                   MOV.L       @(4,R5),R3
    0000302E 3323                   CMP/GE      R2,R3
    00003030 8B04                   BF          L893
    00003032 50D3                   MOV.L       @(12,R13),R0
    00003034 5151                   MOV.L       @(4,R5),R1
    00003036 3107                   CMP/GT      R0,R1
    00003038 8900                   BT          L893
    0000303A              L507:
          game.c   568                                                    sel = i;
    0000303A 6B73                   MOV         R7,R11
          game.c   569                                            break;
    0000303C              L893:                             
    0000303C 7701                   ADD         #1,R7
    0000303E              L891:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  127


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000303E 53EA                   MOV.L       @(40,R14),R3
    00003040 3733                   CMP/GE      R3,R7
    00003042 8B8A                   BF          L892
          game.c   570                            }
          game.c   571                    }
          game.c   572            }
          game.c   573            if(sel != -1)
    00003044 DD5A                   MOV.L       L1028+2,R13; __$current_message$487
    00003046 60B3                   MOV         R11,R0
    00003048 88FF                   CMP/EQ      #-1,R0
    0000304A 890E                   BT          L903
          game.c   574            {
          game.c   575                    level->message[sel].seen = 1;
    0000304C 51E9                   MOV.L       @(36,R14),R1
    0000304E E020                   MOV         #32,R0
    00003050 62B3                   MOV         R11,R2
    00003052 63B3                   MOV         R11,R3
    00003054 4208                   SHLL2       R2
    00003056 4200                   SHLL        R2
    00003058 323C                   ADD         R3,R2
    0000305A 4208                   SHLL2       R2
    0000305C 321C                   ADD         R1,R2
    0000305E E301                   MOV         #1,R3
    00003060 0234                   MOV.B       R3,@(R0,R2)
          game.c   576                    current_message = sel;
          game.c   577                    time = MESSAGE_DEFAULT_TIME;
    00003062 E33C                   MOV         #60,R3
    00003064 D253                   MOV.L       L1028+6,R2 ; __$time$488
    00003066 2DB2                   MOV.L       R11,@R13
    00003068 2232                   MOV.L       R3,@R2
    0000306A              L903:                             
          game.c   578            }
          game.c   579    
          game.c   580            if(time)
    0000306A D052                   MOV.L       L1028+6,R0 ; __$time$488
    0000306C 6102                   MOV.L       @R0,R1
    0000306E 2118                   TST         R1,R1
    00003070 8B01                   BF          L1029
    00003072 A08E                   BRA         L904
    00003074 0009                   NOP
    00003076              L1029:                            
          game.c   581            {
          game.c   582                    int width=0, height, y=2, begin_line=0, line_lenght;
    00003076 69C3                   MOV         R12,R9
    00003078 2FC2                   MOV.L       R12,@R15
    0000307A EB02                   MOV         #2,R11
    0000307C DA4E                   MOV.L       L1028+10,R10; _strlen
          game.c   583                    height = level->message[current_message].nb_lines * 6;
    0000307E 63D2                   MOV.L       @R13,R3
    00003080 51E9                   MOV.L       @(36,R14),R1
    00003082 6233                   MOV         R3,R2
    00003084 4308                   SHLL2       R3
    00003086 4300                   SHLL        R3
    00003088 332C                   ADD         R2,R3
    0000308A 4308                   SHLL2       R3
    0000308C 331C                   ADD         R1,R3
    0000308E 5231                   MOV.L       @(4,R3),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  128


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00003090 6323                   MOV         R2,R3
    00003092 4200                   SHLL        R2
    00003094 4308                   SHLL2       R3
    00003096 323C                   ADD         R3,R2
    00003098 1F21                   MOV.L       R2,@(4,R15)
          game.c   584                    for(i=0 ; i<level->message[current_message].nb_lines ; i++)
    0000309A A017                   BRA         L905
    0000309C 6893                   MOV         R9,R8
    0000309E              L906:                             
          game.c   585                    {
          game.c   586                            line_lenght = strlen(level->message[current_message].str + begin_line);
    0000309E 64D2                   MOV.L       @R13,R4
    000030A0 52E9                   MOV.L       @(36,R14),R2
    000030A2 6343                   MOV         R4,R3
    000030A4 4408                   SHLL2       R4
    000030A6 4400                   SHLL        R4
    000030A8 343C                   ADD         R3,R4
    000030AA 4408                   SHLL2       R4
    000030AC 63F2                   MOV.L       @R15,R3
    000030AE 342C                   ADD         R2,R4
    000030B0 6442                   MOV.L       @R4,R4
    000030B2 4A0B                   JSR         @R10
    000030B4 343C                   ADD         R3,R4
    000030B6 6503                   MOV         R0,R5
    000030B8 4508                   SHLL2       R5
    000030BA 3597                   CMP/GT      R9,R5
    000030BC 8F01                   BF/S        L907
    000030BE 6403                   MOV         R0,R4
          game.c   587                            if(line_lenght*4 > width) width = line_lenght*4;
    000030C0 6953                   MOV         R5,R9
    000030C2              L907:                             
          game.c   588                            begin_line += line_lenght+1;
    000030C2 7401                   ADD         #1,R4
    000030C4 62F2                   MOV.L       @R15,R2
    000030C6 7801                   ADD         #1,R8
    000030C8 324C                   ADD         R4,R2
    000030CA 2F22                   MOV.L       R2,@R15
    000030CC              L905:                             
    000030CC 63D2                   MOV.L       @R13,R3
    000030CE 6233                   MOV         R3,R2
    000030D0 51E9                   MOV.L       @(36,R14),R1
    000030D2 4308                   SHLL2       R3
    000030D4 4300                   SHLL        R3
    000030D6 332C                   ADD         R2,R3
    000030D8 4308                   SHLL2       R3
    000030DA 331C                   ADD         R1,R3
    000030DC 5231                   MOV.L       @(4,R3),R2
    000030DE 3823                   CMP/GE      R2,R8
    000030E0 8BDD                   BF          L906
          game.c   589                    }
          game.c   590                    if(level->message[current_message].place == BOTTOM) y = 62-height;
    000030E2 60D2                   MOV.L       @R13,R0
    000030E4 52E9                   MOV.L       @(36,R14),R2
    000030E6 6303                   MOV         R0,R3
    000030E8 4008                   SHLL2       R0
    000030EA 4000                   SHLL        R0
    000030EC 303C                   ADD         R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  129


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000030EE 4008                   SHLL2       R0
    000030F0 302C                   ADD         R2,R0
    000030F2 5002                   MOV.L       @(8,R0),R0
    000030F4 8801                   CMP/EQ      #1,R0
    000030F6 8B02                   BF          L908
    000030F8 53F1                   MOV.L       @(4,R15),R3
    000030FA EB3E                   MOV         #62,R11
    000030FC 3B38                   SUB         R3,R11
    000030FE              L908:                             
          game.c   591                    draw_rectangle(62-width/2, y-1, 65+width/2, y+height-1);
    000030FE E300                   MOV         #0,R3
    00003100 D22E                   MOV.L       L1028+14,R2; _draw_rectangle
    00003102 65B3                   MOV         R11,R5
    00003104 57F1                   MOV.L       @(4,R15),R7
    00003106 E43E                   MOV         #62,R4
    00003108 37BC                   ADD         R11,R7
    0000310A 77FF                   ADD         #-1,R7
    0000310C 3397                   CMP/GT      R9,R3
    0000310E 393E                   ADDC        R3,R9
    00003110 4921                   SHAR        R9
    00003112 6693                   MOV         R9,R6
    00003114 2F92                   MOV.L       R9,@R15
    00003116 75FF                   ADD         #-1,R5
    00003118 7641                   ADD         #65,R6
    0000311A 6393                   MOV         R9,R3
    0000311C 420B                   JSR         @R2
    0000311E 3438                   SUB         R3,R4
          game.c   592    
          game.c   593                    begin_line = 0;
    00003120 68C3                   MOV         R12,R8
          game.c   594                    for(i=0 ; i<level->message[current_message].nb_lines ; i++)
    00003122 A027                   BRA         L909
    00003124 69C3                   MOV         R12,R9
    00003126              L910:                             
          game.c   595                    {
          game.c   596                            line_lenght = strlen(level->message[current_message].str + begin_line);
    00003126 64D2                   MOV.L       @R13,R4
    00003128 52E9                   MOV.L       @(36,R14),R2
    0000312A 6343                   MOV         R4,R3
    0000312C 4408                   SHLL2       R4
    0000312E 4400                   SHLL        R4
    00003130 343C                   ADD         R3,R4
    00003132 4408                   SHLL2       R4
    00003134 342C                   ADD         R2,R4
    00003136 6442                   MOV.L       @R4,R4
    00003138 4A0B                   JSR         @R10
    0000313A 348C                   ADD         R8,R4
    0000313C 2F02                   MOV.L       R0,@R15
          game.c   597                            PrintMini(63-line_lenght*2, y+i*6, level->message[current_message].str + begin_lin
                         +e, MINI_REV);
    0000313E E712                   MOV         #18,R7
    00003140 66D2                   MOV.L       @R13,R6
    00003142 6593                   MOV         R9,R5
    00003144 52E9                   MOV.L       @(36,R14),R2
    00003146 E43F                   MOV         #63,R4
    00003148 6363                   MOV         R6,R3
    0000314A 4608                   SHLL2       R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  130


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000314C 4600                   SHLL        R6
    0000314E 363C                   ADD         R3,R6
    00003150 4608                   SHLL2       R6
    00003152 362C                   ADD         R2,R6
    00003154 6662                   MOV.L       @R6,R6
    00003156 6393                   MOV         R9,R3
    00003158 368C                   ADD         R8,R6
    0000315A 4500                   SHLL        R5
    0000315C 4308                   SHLL2       R3
    0000315E 353C                   ADD         R3,R5
    00003160 D317                   MOV.L       L1028+18,R3; _PrintMini
    00003162 35BC                   ADD         R11,R5
    00003164 6203                   MOV         R0,R2
    00003166 4200                   SHLL        R2
    00003168 430B                   JSR         @R3
    0000316A 3428                   SUB         R2,R4
          game.c   598                            begin_line += line_lenght+1;
    0000316C 62F2                   MOV.L       @R15,R2
    0000316E 7901                   ADD         #1,R9
    00003170 7201                   ADD         #1,R2
    00003172 382C                   ADD         R2,R8
    00003174              L909:                             
    00003174 63D2                   MOV.L       @R13,R3
    00003176 6233                   MOV         R3,R2
    00003178 51E9                   MOV.L       @(36,R14),R1
    0000317A 4308                   SHLL2       R3
    0000317C 4300                   SHLL        R3
    0000317E 332C                   ADD         R2,R3
    00003180 4308                   SHLL2       R3
    00003182 331C                   ADD         R1,R3
    00003184 5231                   MOV.L       @(4,R3),R2
    00003186 3923                   CMP/GE      R2,R9
    00003188 8BCD                   BF          L910
          game.c   599                    }
          game.c   600                    time--;
    0000318A D10A                   MOV.L       L1028+6,R1 ; __$time$488
    0000318C 6312                   MOV.L       @R1,R3
    0000318E 73FF                   ADD         #-1,R3
    00003190 2132                   MOV.L       R3,@R1
    00003192              L904:                             
          game.c   601            }
          game.c   602    }
    00003192 7F14                   ADD         #20,R15
    00003194 4F26                   LDS.L       @R15+,PR
    00003196 68F6                   MOV.L       @R15+,R8
    00003198 69F6                   MOV.L       @R15+,R9
    0000319A 6AF6                   MOV.L       @R15+,R10
    0000319C 6BF6                   MOV.L       @R15+,R11
    0000319E 6CF6                   MOV.L       @R15+,R12
    000031A0 6DF6                   MOV.L       @R15+,R13
    000031A2 000B                   RTS
    000031A4 6EF6                   MOV.L       @R15+,R14
          game.c   603    
          game.c   604    void pause()
    000031A6              _pause:                          ; function: pause
                                                           ; frame size=0
          game.c   605    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE  131


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          game.c   606            extern jmp_buf exit_jmp;
          game.c   607            longjmp(exit_jmp,1);
    000031A6 D407                   MOV.L       L1028+22,R4; _exit_jmp
    000031A8 D307                   MOV.L       L1028+26,R3; _longjmp
    000031AA 432B                   JMP         @R3
    000031AC E501                   MOV         #1,R5
    000031AE              L1028:                            
    000031AE 0000                   .DATA.W     0
    000031B0 <00000000>             .DATA.L     __$current_message$487
    000031B4 <00000000>             .DATA.L     __$time$488
    000031B8 <00000000>             .DATA.L     _strlen
    000031BC <00000000>             .DATA.L     _draw_rectangle
    000031C0 <00000000>             .DATA.L     _PrintMini
    000031C4 <00000000>             .DATA.L     _exit_jmp
    000031C8 <00000000>             .DATA.L     _longjmp
          game.c   608    /*
          game.c   609            int i=0, j;
          game.c   610            char* vram = vram_adress();
          game.c   611            char bmp[] = {255, 255, 255, 255, 255, 255, 255, 255, 195, 140, 152, 67, 201, 36, 147, 207, 195, 4
                         +, 152, 199, 207, 36, 158, 79, 207, 38, 48, 195, 255, 255, 255, 255, 255, 255, 255, 255};
          game.c   612            for(i=0 ; i<9 ; i++)
          game.c   613            {
          game.c   614                    for(j=0 ; j<4 ; j++)
          game.c   615                            vram[(i+28<<4)+j+6] = bmp[(i<<2)+j];
          game.c   616            }
          game.c   617            IsKeyDown(KEY_CTRL_EXE);
          game.c   618            while(i != KEY_CTRL_EXE)
          game.c   619            {
          game.c   620                    GetKey(&i);
          game.c   621            }*/
          game.c   622    }
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
D   00000000              __$time$488:                     ; static: time
    00000000 00000000               .DATA.L     H'00000000
B   00000000              __$current_message$487:          ; static: current_message
    00000000 00000004               .RES.L      1
    00000004              __$id_level$489:                 ; static: id_level
    00000004 00000004               .RES.L      1



















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 14-Jun-2013 09:15:30  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        56




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      622



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000031CC Byte(s)
CONSTANT SECTION (C):                               00000010 Byte(s)
DATA     SECTION (D):                               00000004 Byte(s)
BSS      SECTION (B):                               00000008 Byte(s)

 TOTAL PROGRAM SIZE: 000031E8 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           20
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           9
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           467






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk89BA.tmp 

